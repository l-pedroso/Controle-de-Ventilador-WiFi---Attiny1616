
Controle de Ventilador Smart .elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00803800  00002a29  00002add  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000047  0000a9e2  000029e2  00002a96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000110  00803866  00803866  00002b43  2**0
                  ALLOC
  4 .comment      00000060  00000000  00000000  00002b43  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005c8  00000000  00000000  00002be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d22  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003480  00000000  00000000  0000bed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d32  00000000  00000000  0000f352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c60  00000000  00000000  00012084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000317e  00000000  00000000  00012ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002fe1  00000000  00000000  00015e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000488  00000000  00000000  00018e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_8>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_20>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      6c:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_27>
      70:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_28>
      74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      7c:	6a 09       	sbc	r22, r10
      7e:	6d 09       	sbc	r22, r13
      80:	70 09       	sbc	r23, r0
      82:	73 09       	sbc	r23, r3
      84:	80 09       	sbc	r24, r0
      86:	84 09       	sbc	r24, r4
      88:	88 09       	sbc	r24, r8
      8a:	b8 09       	sbc	r27, r8
      8c:	b6 09       	sbc	r27, r6

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	e9 e2       	ldi	r30, 0x29	; 41
      a2:	fa e2       	ldi	r31, 0x2A	; 42
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a6 36       	cpi	r26, 0x66	; 102
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	29 e3       	ldi	r18, 0x39	; 57
      b2:	a6 e6       	ldi	r26, 0x66	; 102
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a6 37       	cpi	r26, 0x76	; 118
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 a8 02 	call	0x550	; 0x550 <main>
      c4:	0c 94 ef 14 	jmp	0x29de	; 0x29de <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <set_lamp_output>:
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
      cc:	88 23       	and	r24, r24
      ce:	21 f0       	breq	.+8      	; 0xd8 <set_lamp_output+0xc>
		VPORTC.OUT |= (1 << pin);
      d0:	99 b1       	in	r25, 0x09	; 9
      d2:	91 60       	ori	r25, 0x01	; 1
      d4:	99 b9       	out	0x09, r25	; 9
      d6:	03 c0       	rjmp	.+6      	; 0xde <set_lamp_output+0x12>
	} else {
		VPORTC.OUT &= ~(1 << pin);
      d8:	99 b1       	in	r25, 0x09	; 9
      da:	9e 7f       	andi	r25, 0xFE	; 254
      dc:	99 b9       	out	0x09, r25	; 9
/****************************************************** 
* LAMP CONTROL                                        *
*******************************************************/
void set_lamp_output(output_state state){
	Rele3_set_level(state);
	lamp_state = state;
      de:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <lamp_state>
	mcu_dp_bool_update(DPID_SWITCH_LED,state);
      e2:	68 2f       	mov	r22, r24
      e4:	85 e0       	ldi	r24, 0x05	; 5
      e6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
      ea:	08 95       	ret

000000ec <toggle_lamp_output>:
}

void toggle_lamp_output(){	
	//ToDo zerocross implementation
	if(lamp_state == on){
      ec:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <lamp_state>
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	21 f4       	brne	.+8      	; 0xfc <toggle_lamp_output+0x10>
		set_lamp_output(off);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 66 00 	call	0xcc	; 0xcc <set_lamp_output>
      fa:	08 95       	ret
	}else{
		set_lamp_output(on);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 66 00 	call	0xcc	; 0xcc <set_lamp_output>
     102:	08 95       	ret

00000104 <get_lamp_output>:
	}
}

output_state get_lamp_output(){
	if(Rele3_get_level()){
     104:	50 9b       	sbis	0x0a, 0	; 10
     106:	02 c0       	rjmp	.+4      	; 0x10c <get_lamp_output+0x8>
		return off;
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret
	}else{
		return on;
     10c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     10e:	08 95       	ret

00000110 <get_fan_output>:
	}
}

output_state get_fan_output(){
	return fan_state;
}
     110:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <fan_state>
     114:	08 95       	ret

00000116 <set_fan_direction>:
/******************************************************
* FAN DIRECTION CONTROL                               *
*******************************************************/
void set_fan_direction(dir direction){
	
	if(fan_state == on && direction != fan_direction){
     116:	90 91 6b 38 	lds	r25, 0x386B	; 0x80386b <fan_state>
     11a:	91 30       	cpi	r25, 0x01	; 1
     11c:	b9 f4       	brne	.+46     	; 0x14c <set_fan_direction+0x36>
     11e:	90 91 6c 38 	lds	r25, 0x386C	; 0x80386c <fan_direction>
     122:	98 17       	cp	r25, r24
     124:	99 f0       	breq	.+38     	; 0x14c <set_fan_direction+0x36>
     126:	68 2f       	mov	r22, r24
		fan_direction = direction;
     128:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <fan_direction>
		cnt_direction = 30000;
     12c:	80 e3       	ldi	r24, 0x30	; 48
     12e:	95 e7       	ldi	r25, 0x75	; 117
     130:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <cnt_direction>
     134:	90 93 69 38 	sts	0x3869, r25	; 0x803869 <cnt_direction+0x1>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	87 7f       	andi	r24, 0xF7	; 247
     13c:	81 b9       	out	0x01, r24	; 1
     13e:	81 b1       	in	r24, 0x01	; 1
     140:	8b 7f       	andi	r24, 0xFB	; 251
     142:	81 b9       	out	0x01, r24	; 1
		Rele1_set_level(0);
		Rele2_set_level(0);
		mcu_dp_enum_update(DPID_FAN_DIRECTION, fan_direction);
     144:	86 e6       	ldi	r24, 0x66	; 102
     146:	0e 94 49 06 	call	0xc92	; 0xc92 <mcu_dp_enum_update>
     14a:	08 95       	ret
	}else if(direction == open){
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	31 f4       	brne	.+12     	; 0x15c <set_fan_direction+0x46>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	87 7f       	andi	r24, 0xF7	; 247
     154:	81 b9       	out	0x01, r24	; 1
     156:	81 b1       	in	r24, 0x01	; 1
     158:	8b 7f       	andi	r24, 0xFB	; 251
     15a:	81 b9       	out	0x01, r24	; 1
     15c:	08 95       	ret

0000015e <get_fan_direction>:
	}	
}

dir get_fan_direction(){
	return fan_direction;
}
     15e:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <fan_direction>
     162:	08 95       	ret

00000164 <process_direction_relay>:
}


void process_direction_relay(){
	
	if(fan_direction == down){
     164:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <fan_direction>
     168:	81 11       	cpse	r24, r1
     16a:	06 c0       	rjmp	.+12     	; 0x178 <process_direction_relay+0x14>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     16c:	91 b1       	in	r25, 0x01	; 1
     16e:	98 60       	ori	r25, 0x08	; 8
     170:	91 b9       	out	0x01, r25	; 1
	} else {
		VPORTA.OUT &= ~(1 << pin);
     172:	91 b1       	in	r25, 0x01	; 1
     174:	9b 7f       	andi	r25, 0xFB	; 251
     176:	91 b9       	out	0x01, r25	; 1
		Rele1_set_level(1);
		Rele2_set_level(0);
	}
	if(fan_direction == up){
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	31 f4       	brne	.+12     	; 0x188 <process_direction_relay+0x24>
     17c:	81 b1       	in	r24, 0x01	; 1
     17e:	87 7f       	andi	r24, 0xF7	; 247
     180:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     182:	81 b1       	in	r24, 0x01	; 1
     184:	84 60       	ori	r24, 0x04	; 4
     186:	81 b9       	out	0x01, r24	; 1
     188:	08 95       	ret

0000018a <set_fan_direction_immediately>:
dir get_fan_direction(){
	return fan_direction;
}

void set_fan_direction_immediately(){
	process_direction_relay();
     18a:	0e 94 b2 00 	call	0x164	; 0x164 <process_direction_relay>
     18e:	08 95       	ret

00000190 <set_fan_output>:


/******************************************************
* FAN ON/OFF CONTROL                                  *
*******************************************************/
void set_fan_output(output_state state){
     190:	cf 93       	push	r28
     192:	c8 2f       	mov	r28, r24
	fan_state = state;
     194:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <fan_state>
	if(fan_state == off){
     198:	81 11       	cpse	r24, r1
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <set_fan_output+0x14>
		set_fan_direction(open);
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <set_fan_output+0x18>
	}else{
		set_fan_direction_immediately();
     1a4:	0e 94 c5 00 	call	0x18a	; 0x18a <set_fan_direction_immediately>
	}
	mcu_dp_bool_update(DPID_SWITCH_FAN,state);
     1a8:	6c 2f       	mov	r22, r28
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
	//ToDo -> insert a delay to wait relay on state			
	triac_set_output_state(fan_state);
     1b0:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <fan_state>
     1b4:	0e 94 1e 0b 	call	0x163c	; 0x163c <triac_set_output_state>
}
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <toggle_fan_output>:

void toggle_fan_output(){
	if(fan_state == on){
     1bc:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <fan_state>
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	21 f4       	brne	.+8      	; 0x1cc <toggle_fan_output+0x10>
		set_fan_output(off);		
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	0e 94 c8 00 	call	0x190	; 0x190 <set_fan_output>
     1ca:	08 95       	ret
	}else {
		set_fan_output(on);
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 c8 00 	call	0x190	; 0x190 <set_fan_output>
     1d2:	08 95       	ret

000001d4 <set_fan_speed_percentage>:
	}	
}

void set_fan_speed_percentage(uint8_t percent_speed){
	
	speed = percent_speed;
     1d4:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <speed>
	triac_set_angle(MAX_ANGLE - (PERCENT_STEP * percent_speed));	
     1d8:	68 2f       	mov	r22, r24
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__floatsisf>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 ec       	ldi	r20, 0xC0	; 192
     1ea:	5f e3       	ldi	r21, 0x3F	; 63
     1ec:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__mulsf3>
     1f0:	9b 01       	movw	r18, r22
     1f2:	ac 01       	movw	r20, r24
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	86 e1       	ldi	r24, 0x16	; 22
     1fa:	93 e4       	ldi	r25, 0x43	; 67
     1fc:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__subsf3>
     200:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
     204:	86 2f       	mov	r24, r22
     206:	0e 94 18 0b 	call	0x1630	; 0x1630 <triac_set_angle>
	mcu_dp_value_update(DPID_FAN_SPEED, speed);
     20a:	40 91 01 38 	lds	r20, 0x3801	; 0x803801 <speed>
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcu_dp_value_update>
     21a:	08 95       	ret

0000021c <increase_speed>:

/******************************************************
* FAN SPEED CONTROL                                   *
*******************************************************/
void increase_speed(){
	if(triac_get_output_state() == on){
     21c:	0e 94 21 0b 	call	0x1642	; 0x1642 <triac_get_output_state>
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	79 f4       	brne	.+30     	; 0x242 <increase_speed+0x26>
		if(speed <= 80) {
     224:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <speed>
     228:	81 35       	cpi	r24, 0x51	; 81
     22a:	20 f4       	brcc	.+8      	; 0x234 <increase_speed+0x18>
			speed += 20;
     22c:	8c 5e       	subi	r24, 0xEC	; 236
     22e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <speed>
     232:	03 c0       	rjmp	.+6      	; 0x23a <increase_speed+0x1e>
		}else {
			speed = 100;
     234:	84 e6       	ldi	r24, 0x64	; 100
     236:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <speed>
		}
		set_fan_speed_percentage(speed);
     23a:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <speed>
     23e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_fan_speed_percentage>
     242:	08 95       	ret

00000244 <decrease_speed>:
	}
}

void decrease_speed(){	
	if(triac_get_output_state() == on){
     244:	0e 94 21 0b 	call	0x1642	; 0x1642 <triac_get_output_state>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	79 f4       	brne	.+30     	; 0x26a <decrease_speed+0x26>
		if(speed >= 20 ){
     24c:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <speed>
     250:	84 31       	cpi	r24, 0x14	; 20
     252:	20 f0       	brcs	.+8      	; 0x25c <decrease_speed+0x18>
			 speed -= 20;
     254:	84 51       	subi	r24, 0x14	; 20
     256:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <speed>
     25a:	03 c0       	rjmp	.+6      	; 0x262 <decrease_speed+0x1e>
		}else{
			 speed = 20;
     25c:	84 e1       	ldi	r24, 0x14	; 20
     25e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <speed>
		}
		set_fan_speed_percentage(speed);
     262:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <speed>
     266:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_fan_speed_percentage>
     26a:	08 95       	ret

0000026c <get_fan_speed_percentage>:
	mcu_dp_value_update(DPID_FAN_SPEED, speed);
}

uint8_t get_fan_speed_percentage(){
	return speed;
}
     26c:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <speed>
     270:	08 95       	ret

00000272 <set_wifi_led_status>:

/******************************************************
* WIFI LED CONTROL                                    *
*******************************************************/
void set_wifi_led_status(led_status status){
	led_mode = status;
     272:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
     276:	08 95       	ret

00000278 <process_wifi_led>:

}

void process_wifi_led(){
		switch(led_mode){
     278:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	b1 f0       	breq	.+44     	; 0x2ac <process_wifi_led+0x34>
     280:	28 f0       	brcs	.+10     	; 0x28c <process_wifi_led+0x14>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	19 f1       	breq	.+70     	; 0x2cc <process_wifi_led+0x54>
     286:	83 30       	cpi	r24, 0x03	; 3
     288:	29 f1       	breq	.+74     	; 0x2d4 <process_wifi_led+0x5c>
     28a:	28 c0       	rjmp	.+80     	; 0x2dc <process_wifi_led+0x64>
			case blink_fast:
			if(cnt_led == 0){
     28c:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <__data_end>
     290:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <__data_end+0x1>
     294:	89 2b       	or	r24, r25
     296:	29 f5       	brne	.+74     	; 0x2e2 <process_wifi_led+0x6a>
				cnt_led = LED_FAST_PERIOD;
     298:	84 ec       	ldi	r24, 0xC4	; 196
     29a:	99 e0       	ldi	r25, 0x09	; 9
     29c:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <__data_end>
     2a0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <__data_end+0x1>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	VPORTB.IN |= 1 << pin;
     2a4:	86 b1       	in	r24, 0x06	; 6
     2a6:	80 61       	ori	r24, 0x10	; 16
     2a8:	86 b9       	out	0x06, r24	; 6
     2aa:	08 95       	ret
				LED_toggle_level();
			}
			break;
			
			case blink_slow:
			if(cnt_led == 0){
     2ac:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <__data_end>
     2b0:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <__data_end+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	a9 f4       	brne	.+42     	; 0x2e2 <process_wifi_led+0x6a>
				cnt_led = LED_SLOW_PERIOD;
     2b8:	88 e8       	ldi	r24, 0x88	; 136
     2ba:	93 e1       	ldi	r25, 0x13	; 19
     2bc:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <__data_end>
     2c0:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <__data_end+0x1>
     2c4:	86 b1       	in	r24, 0x06	; 6
     2c6:	80 61       	ori	r24, 0x10	; 16
     2c8:	86 b9       	out	0x06, r24	; 6
     2ca:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     2cc:	85 b1       	in	r24, 0x05	; 5
     2ce:	80 61       	ori	r24, 0x10	; 16
     2d0:	85 b9       	out	0x05, r24	; 5
     2d2:	08 95       	ret
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2d4:	85 b1       	in	r24, 0x05	; 5
     2d6:	8f 7e       	andi	r24, 0xEF	; 239
     2d8:	85 b9       	out	0x05, r24	; 5
     2da:	08 95       	ret
     2dc:	85 b1       	in	r24, 0x05	; 5
     2de:	8f 7e       	andi	r24, 0xEF	; 239
     2e0:	85 b9       	out	0x05, r24	; 5
     2e2:	08 95       	ret

000002e4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     2e4:	0e 94 29 04 	call	0x852	; 0x852 <system_init>

	touch_init();
     2e8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <touch_init>
     2ec:	08 95       	ret

000002ee <__vector_6>:
bool flag= 0;
extern uint16_t cnt_direction;
extern uint16_t cnt_led;

ISR(RTC_CNT_vect)
{
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	2f 93       	push	r18
     2fa:	3f 93       	push	r19
     2fc:	4f 93       	push	r20
     2fe:	5f 93       	push	r21
     300:	6f 93       	push	r22
     302:	7f 93       	push	r23
     304:	8f 93       	push	r24
     306:	9f 93       	push	r25
     308:	af 93       	push	r26
     30a:	bf 93       	push	r27
     30c:	ef 93       	push	r30
     30e:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
     310:	0e 94 9f 03 	call	0x73e	; 0x73e <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <gain_setting_int_cap+0x7f5720>
}
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <__vector_8>:

ISR(TCA0_OVF_vect)
{
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
     348:	3f 93       	push	r19
     34a:	4f 93       	push	r20
     34c:	5f 93       	push	r21
     34e:	6f 93       	push	r22
     350:	7f 93       	push	r23
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31
	/* Insert your TCA overflow interrupt handling code */

	/* The interrupt flag has to be cleared manually */
	
	if(cnt_direction  > 0){
     35e:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <cnt_direction>
     362:	90 91 69 38 	lds	r25, 0x3869	; 0x803869 <cnt_direction+0x1>
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	49 f0       	breq	.+18     	; 0x37c <__vector_8+0x40>
		flag = 1;
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	20 93 6d 38 	sts	0x386D, r18	; 0x80386d <flag>
		cnt_direction--;
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <cnt_direction>
     376:	90 93 69 38 	sts	0x3869, r25	; 0x803869 <cnt_direction+0x1>
     37a:	08 c0       	rjmp	.+16     	; 0x38c <__vector_8+0x50>
		}else if(flag){
     37c:	80 91 6d 38 	lds	r24, 0x386D	; 0x80386d <flag>
     380:	88 23       	and	r24, r24
     382:	21 f0       	breq	.+8      	; 0x38c <__vector_8+0x50>
		flag = 0;
     384:	10 92 6d 38 	sts	0x386D, r1	; 0x80386d <flag>
		process_direction_relay();
     388:	0e 94 b2 00 	call	0x164	; 0x164 <process_direction_relay>
	}
		
	if(cnt_led > 0) cnt_led--;
     38c:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <__data_end>
     390:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <__data_end+0x1>
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	29 f0       	breq	.+10     	; 0x3a2 <__vector_8+0x66>
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <__data_end>
     39e:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <__data_end+0x1>
	process_wifi_led();
     3a2:	0e 94 3c 01 	call	0x278	; 0x278 <process_wifi_led>
		
	triac_driver_tick();
     3a6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <triac_driver_tick>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <gain_setting_int_cap+0x7f5fe8>
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	7f 91       	pop	r23
     3be:	6f 91       	pop	r22
     3c0:	5f 91       	pop	r21
     3c2:	4f 91       	pop	r20
     3c4:	3f 91       	pop	r19
     3c6:	2f 91       	pop	r18
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <touch_status_display>:
Output : none
Notes  : none
============================================================================*/
void touch_status_display(void)
{
	key_status = get_sensor_state(0) & KEY_TOUCHED_MASK;
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     3da:	80 78       	andi	r24, 0x80	; 128
     3dc:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag0) {
     3e0:	88 23       	and	r24, r24
     3e2:	51 f0       	breq	.+20     	; 0x3f8 <touch_status_display+0x26>
     3e4:	90 91 74 38 	lds	r25, 0x3874	; 0x803874 <flag0>
     3e8:	91 11       	cpse	r25, r1
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <touch_status_display+0x26>
		toggle_lamp_output();
     3ec:	0e 94 76 00 	call	0xec	; 0xec <toggle_lamp_output>
		flag0 = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 74 38 	sts	0x3874, r24	; 0x803874 <flag0>
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	} else if(0u == key_status && flag0){
     3f8:	81 11       	cpse	r24, r1
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	80 91 74 38 	lds	r24, 0x3874	; 0x803874 <flag0>
     400:	81 11       	cpse	r24, r1
		flag0 = 0;
     402:	10 92 74 38 	sts	0x3874, r1	; 0x803874 <flag0>
	}

	key_status = get_sensor_state(1) & KEY_TOUCHED_MASK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     40e:	80 78       	andi	r24, 0x80	; 128
     410:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag1) {
     414:	88 23       	and	r24, r24
     416:	51 f0       	breq	.+20     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     418:	90 91 73 38 	lds	r25, 0x3873	; 0x803873 <flag1>
     41c:	91 11       	cpse	r25, r1
     41e:	06 c0       	rjmp	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		toggle_fan_output();
     420:	0e 94 de 00 	call	0x1bc	; 0x1bc <toggle_fan_output>
		flag1 = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	80 93 73 38 	sts	0x3873, r24	; 0x803873 <flag1>
     42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}else if(0u == key_status && flag1){
     42c:	81 11       	cpse	r24, r1
     42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     430:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <flag1>
     434:	81 11       	cpse	r24, r1
		flag1 = 0;
     436:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <flag1>
	}

	key_status = get_sensor_state(2) & KEY_TOUCHED_MASK;
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     442:	80 78       	andi	r24, 0x80	; 128
     444:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag2) {
     448:	88 23       	and	r24, r24
     44a:	51 f0       	breq	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     44c:	90 91 72 38 	lds	r25, 0x3872	; 0x803872 <flag2>
     450:	91 11       	cpse	r25, r1
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		decrease_speed();
     454:	0e 94 22 01 	call	0x244	; 0x244 <decrease_speed>
		flag2 = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 72 38 	sts	0x3872, r24	; 0x803872 <flag2>
     45e:	07 c0       	rjmp	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	}else if(0u == key_status && flag2){
     460:	81 11       	cpse	r24, r1
     462:	05 c0       	rjmp	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     464:	80 91 72 38 	lds	r24, 0x3872	; 0x803872 <flag2>
     468:	81 11       	cpse	r24, r1
		flag2 = 0;
     46a:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <flag2>
	}

	key_status = get_sensor_state(3) & KEY_TOUCHED_MASK;
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     476:	80 78       	andi	r24, 0x80	; 128
     478:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag3) {
     47c:	88 23       	and	r24, r24
     47e:	59 f0       	breq	.+22     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     480:	90 91 71 38 	lds	r25, 0x3871	; 0x803871 <flag3>
     484:	91 11       	cpse	r25, r1
     486:	07 c0       	rjmp	.+14     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		set_fan_direction(up);
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
		flag3 = 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 71 38 	sts	0x3871, r24	; 0x803871 <flag3>
     494:	07 c0       	rjmp	.+14     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	}else if(0u == key_status && flag3){
     496:	81 11       	cpse	r24, r1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     49a:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <flag3>
     49e:	81 11       	cpse	r24, r1
			flag3 = 0;
     4a0:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <flag3>
	}

	key_status = get_sensor_state(4) & KEY_TOUCHED_MASK;
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     4ac:	80 78       	andi	r24, 0x80	; 128
     4ae:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag4) {
     4b2:	88 23       	and	r24, r24
     4b4:	51 f0       	breq	.+20     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4b6:	90 91 70 38 	lds	r25, 0x3870	; 0x803870 <flag4>
     4ba:	91 11       	cpse	r25, r1
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		increase_speed();
     4be:	0e 94 0e 01 	call	0x21c	; 0x21c <increase_speed>
		flag4 = 1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 70 38 	sts	0x3870, r24	; 0x803870 <flag4>
     4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	}else if(0u == key_status && flag4){
     4ca:	81 11       	cpse	r24, r1
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4ce:	80 91 70 38 	lds	r24, 0x3870	; 0x803870 <flag4>
     4d2:	81 11       	cpse	r24, r1
		flag4 = 0;
     4d4:	10 92 70 38 	sts	0x3870, r1	; 0x803870 <flag4>
	}

	key_status = get_sensor_state(5) & KEY_TOUCHED_MASK;
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 b0 03 	call	0x760	; 0x760 <get_sensor_state>
     4e0:	80 78       	andi	r24, 0x80	; 128
     4e2:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <key_status>
	if (0u != key_status && !flag5) {
     4e6:	88 23       	and	r24, r24
     4e8:	59 f0       	breq	.+22     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4ea:	90 91 6f 38 	lds	r25, 0x386F	; 0x80386f <flag5>
     4ee:	91 11       	cpse	r25, r1
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		set_fan_direction(down);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
		flag5 = 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <flag5>
     4fe:	08 95       	ret
	}else if(0u == key_status && flag5){
     500:	81 11       	cpse	r24, r1
     502:	05 c0       	rjmp	.+10     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     504:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <flag5>
     508:	81 11       	cpse	r24, r1
		flag5 = 0;
     50a:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <flag5>
     50e:	08 95       	ret

00000510 <touch_example>:
	 *
	 * Note: This is a sample file to provide reference on using touch status in a user application. This file is not
	 * linked to a project build.
	 */

	cpu_irq_enable(); /* Global Interrupt Enable */
     510:	78 94       	sei

	touch_process();
     512:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <touch_process>
	if (measurement_done_touch == 1) {
     516:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <measurement_done_touch>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	21 f4       	brne	.+8      	; 0x526 <touch_example+0x16>
		measurement_done_touch = 0;
     51e:	10 92 76 38 	sts	0x3876, r1	; 0x803876 <measurement_done_touch>
		touch_status_display();
     522:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <touch_status_display>
     526:	08 95       	ret

00000528 <Triac_set_level>:
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     528:	88 23       	and	r24, r24
     52a:	21 f0       	breq	.+8      	; 0x534 <Triac_set_level+0xc>
		VPORTA.OUT |= (1 << pin);
     52c:	81 b1       	in	r24, 0x01	; 1
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	81 b9       	out	0x01, r24	; 1
     532:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
     534:	81 b1       	in	r24, 0x01	; 1
     536:	8d 7f       	andi	r24, 0xFD	; 253
     538:	81 b9       	out	0x01, r24	; 1
     53a:	08 95       	ret

0000053c <Zerocross_get_level>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     53c:	86 b1       	in	r24, 0x06	; 6
 * Reads the level on a pin
 */
static inline bool Zerocross_get_level()
{
	return PORTB_get_pin_level(5);
}
     53e:	85 fb       	bst	r24, 5
     540:	88 27       	eor	r24, r24
     542:	80 f9       	bld	r24, 0
     544:	08 95       	ret

00000546 <tuya_wifi_rx_cb>:
#include "app.h"


void tuya_wifi_rx_cb(void){
	uint8_t data;
	data = USART0.RXDATAL;
     546:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <gain_setting_int_cap+0x7f5ddd>
	uart_receive_input(data);
     54a:	0e 94 71 06 	call	0xce2	; 0xce2 <uart_receive_input>
     54e:	08 95       	ret

00000550 <main>:
}

int main(void)
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	26 97       	sbiw	r28, 0x06	; 6
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
	triac_driver_config config;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     55e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <atmel_start_init>
	
	config.get_zero_pin_state_func = Zerocross_get_level;
     562:	8e e9       	ldi	r24, 0x9E	; 158
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	48 2f       	mov	r20, r24
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	9a 83       	std	Y+2, r25	; 0x02
	config.triac_control_func = Triac_set_level;
     56c:	84 e9       	ldi	r24, 0x94	; 148
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	68 2f       	mov	r22, r24
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	9c 83       	std	Y+4, r25	; 0x04
	config.trigger_angle = 0;
	config.triac_state = off;
	triac_driver_init(config);
     576:	5a 81       	ldd	r21, Y+2	; 0x02
     578:	7c 81       	ldd	r23, Y+4	; 0x04
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <triac_driver_init>

	USART_0_set_ISR_cb(&tuya_wifi_rx_cb, RX_CB);
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	83 ea       	ldi	r24, 0xA3	; 163
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 b4 04 	call	0x968	; 0x968 <USART_0_set_ISR_cb>
	wifi_protocol_init();
     58c:	0e 94 2b 07 	call	0xe56	; 0xe56 <wifi_protocol_init>
	/* Replace with your application code */
   //mcu_set_wifi_mode(SMART_CONFIG);
	
	while (1) {
		touch_example();
     590:	0e 94 88 02 	call	0x510	; 0x510 <touch_example>
		wifi_uart_service();
     594:	0e 94 9e 06 	call	0xd3c	; 0xd3c <wifi_uart_service>
		
		switch(mcu_get_wifi_work_state())
     598:	0e 94 3b 07 	call	0xe76	; 0xe76 <mcu_get_wifi_work_state>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	51 f0       	breq	.+20     	; 0x5b4 <main+0x64>
     5a0:	28 f0       	brcs	.+10     	; 0x5ac <main+0x5c>
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	59 f0       	breq	.+22     	; 0x5bc <main+0x6c>
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	69 f0       	breq	.+26     	; 0x5c4 <main+0x74>
     5aa:	f2 cf       	rjmp	.-28     	; 0x590 <main+0x40>
		{
			case SMART_CONFIG_STATE:
			// In EZ mode, the LED flickers quickly.
			set_wifi_led_status(blink_fast);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 39 01 	call	0x272	; 0x272 <set_wifi_led_status>
			break;
     5b2:	ee cf       	rjmp	.-36     	; 0x590 <main+0x40>
			case AP_STATE:
			// In AP mode, the LED flickers slowly.
			set_wifi_led_status(blink_slow);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 39 01 	call	0x272	; 0x272 <set_wifi_led_status>
			break;
     5ba:	ea cf       	rjmp	.-44     	; 0x590 <main+0x40>
			case WIFI_NOT_CONNECTED:
			// The Wi-Fi network has been set up and is connecting to the router. The LED is off.
			set_wifi_led_status(led_off);
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	0e 94 39 01 	call	0x272	; 0x272 <set_wifi_led_status>
			break;
     5c2:	e6 cf       	rjmp	.-52     	; 0x590 <main+0x40>
			case WIFI_CONNECTED:
			set_wifi_led_status(led_on);
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	0e 94 39 01 	call	0x272	; 0x272 <set_wifi_led_status>
			break;
     5ca:	e2 cf       	rjmp	.-60     	; 0x590 <main+0x40>

000005cc <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     5cc:	e7 e1       	ldi	r30, 0x17	; 23
     5ce:	f4 e0       	ldi	r31, 0x04	; 4
     5d0:	80 81       	ld	r24, Z
     5d2:	87 7f       	andi	r24, 0xF7	; 247
     5d4:	80 83       	st	Z, r24
     5d6:	80 81       	ld	r24, Z
     5d8:	88 7f       	andi	r24, 0xF8	; 248
     5da:	84 60       	ori	r24, 0x04	; 4
     5dc:	80 83       	st	Z, r24
     5de:	e4 e1       	ldi	r30, 0x14	; 20
     5e0:	f4 e0       	ldi	r31, 0x04	; 4
     5e2:	80 81       	ld	r24, Z
     5e4:	87 7f       	andi	r24, 0xF7	; 247
     5e6:	80 83       	st	Z, r24
     5e8:	80 81       	ld	r24, Z
     5ea:	88 7f       	andi	r24, 0xF8	; 248
     5ec:	84 60       	ori	r24, 0x04	; 4
     5ee:	80 83       	st	Z, r24
     5f0:	e5 e1       	ldi	r30, 0x15	; 21
     5f2:	f4 e0       	ldi	r31, 0x04	; 4
     5f4:	80 81       	ld	r24, Z
     5f6:	87 7f       	andi	r24, 0xF7	; 247
     5f8:	80 83       	st	Z, r24
     5fa:	80 81       	ld	r24, Z
     5fc:	88 7f       	andi	r24, 0xF8	; 248
     5fe:	84 60       	ori	r24, 0x04	; 4
     600:	80 83       	st	Z, r24
     602:	e0 e3       	ldi	r30, 0x30	; 48
     604:	f4 e0       	ldi	r31, 0x04	; 4
     606:	80 81       	ld	r24, Z
     608:	87 7f       	andi	r24, 0xF7	; 247
     60a:	80 83       	st	Z, r24
     60c:	80 81       	ld	r24, Z
     60e:	88 7f       	andi	r24, 0xF8	; 248
     610:	84 60       	ori	r24, 0x04	; 4
     612:	80 83       	st	Z, r24
     614:	e6 e1       	ldi	r30, 0x16	; 22
     616:	f4 e0       	ldi	r31, 0x04	; 4
     618:	80 81       	ld	r24, Z
     61a:	87 7f       	andi	r24, 0xF7	; 247
     61c:	80 83       	st	Z, r24
     61e:	80 81       	ld	r24, Z
     620:	88 7f       	andi	r24, 0xF8	; 248
     622:	84 60       	ori	r24, 0x04	; 4
     624:	80 83       	st	Z, r24
     626:	e1 e3       	ldi	r30, 0x31	; 49
     628:	f4 e0       	ldi	r31, 0x04	; 4
     62a:	80 81       	ld	r24, Z
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	80 83       	st	Z, r24
     630:	80 81       	ld	r24, Z
     632:	88 7f       	andi	r24, 0xF8	; 248
     634:	84 60       	ori	r24, 0x04	; 4
     636:	80 83       	st	Z, r24
     638:	08 95       	ret

0000063a <qtm_measure_complete_callback>:
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 77 38 	sts	0x3877, r24	; 0x803877 <touch_postprocess_request>
     640:	08 95       	ret

00000642 <qtm_error_callback>:
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 75 38 	sts	0x3875, r24	; 0x803875 <module_error_code>
     648:	08 95       	ret

0000064a <touch_sensors_config>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	86 e2       	ldi	r24, 0x26	; 38
     650:	98 e3       	ldi	r25, 0x38	; 56
     652:	0e 94 9c 11 	call	0x2338	; 0x2338 <qtm_ptc_init_acquisition_module>
     656:	8d ec       	ldi	r24, 0xCD	; 205
     658:	98 e3       	ldi	r25, 0x38	; 56
     65a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <qtm_ptc_qtlib_assign_signal_memory>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
     662:	0b c0       	rjmp	.+22     	; 0x67a <touch_sensors_config+0x30>
     664:	be 01       	movw	r22, r28
     666:	86 e2       	ldi	r24, 0x26	; 38
     668:	98 e3       	ldi	r25, 0x38	; 56
     66a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <qtm_enable_sensor_node>
     66e:	be 01       	movw	r22, r28
     670:	86 e2       	ldi	r24, 0x26	; 38
     672:	98 e3       	ldi	r25, 0x38	; 56
     674:	0e 94 73 12 	call	0x24e6	; 0x24e6 <qtm_calibrate_sensor_node>
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	c6 30       	cpi	r28, 0x06	; 6
     67c:	d1 05       	cpc	r29, r1
     67e:	90 f3       	brcs	.-28     	; 0x664 <touch_sensors_config+0x1a>
     680:	c0 e0       	ldi	r28, 0x00	; 0
     682:	d0 e0       	ldi	r29, 0x00	; 0
     684:	0f c0       	rjmp	.+30     	; 0x6a4 <touch_sensors_config+0x5a>
     686:	ae 01       	movw	r20, r28
     688:	44 0f       	add	r20, r20
     68a:	55 1f       	adc	r21, r21
     68c:	44 0f       	add	r20, r20
     68e:	55 1f       	adc	r21, r21
     690:	4c 0f       	add	r20, r28
     692:	5d 1f       	adc	r21, r29
     694:	41 55       	subi	r20, 0x51	; 81
     696:	57 4c       	sbci	r21, 0xC7	; 199
     698:	6c 2f       	mov	r22, r28
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	98 e3       	ldi	r25, 0x38	; 56
     69e:	0e 94 98 0b 	call	0x1730	; 0x1730 <qtm_init_sensor_key>
     6a2:	21 96       	adiw	r28, 0x01	; 1
     6a4:	c6 30       	cpi	r28, 0x06	; 6
     6a6:	d1 05       	cpc	r29, r1
     6a8:	70 f3       	brcs	.-36     	; 0x686 <touch_sensors_config+0x3c>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <Timer_set_period>:
     6b2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f571e>
     6b6:	92 fd       	sbrc	r25, 2
     6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <Timer_set_period>
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gain_setting_int_cap+0x7f5727>
     6c0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gain_setting_int_cap+0x7f5728>
     6c4:	08 95       	ret

000006c6 <touch_init>:
     6c6:	80 e2       	ldi	r24, 0x20	; 32
     6c8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Timer_set_period>
     6cc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <touch_ptc_pin_config>
     6d0:	0e 94 25 03 	call	0x64a	; 0x64a <touch_sensors_config>
     6d4:	08 95       	ret

000006d6 <touch_process>:
     6d6:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <time_to_measure_touch_flag>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	51 f4       	brne	.+20     	; 0x6f2 <touch_process+0x1c>
     6de:	6d e1       	ldi	r22, 0x1D	; 29
     6e0:	73 e0       	ldi	r23, 0x03	; 3
     6e2:	86 e2       	ldi	r24, 0x26	; 38
     6e4:	98 e3       	ldi	r25, 0x38	; 56
     6e6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <qtm_ptc_start_measurement_seq>
     6ea:	81 11       	cpse	r24, r1
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <touch_process+0x1c>
     6ee:	10 92 78 38 	sts	0x3878, r1	; 0x803878 <time_to_measure_touch_flag>
     6f2:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <touch_postprocess_request>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	09 f5       	brne	.+66     	; 0x73c <touch_process+0x66>
     6fa:	10 92 77 38 	sts	0x3877, r1	; 0x803877 <touch_postprocess_request>
     6fe:	0e 94 1e 10 	call	0x203c	; 0x203c <qtm_acquisition_process>
     702:	81 11       	cpse	r24, r1
     704:	0a c0       	rjmp	.+20     	; 0x71a <touch_process+0x44>
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	98 e3       	ldi	r25, 0x38	; 56
     70a:	0e 94 b7 0b 	call	0x176e	; 0x176e <qtm_key_sensors_process>
     70e:	88 23       	and	r24, r24
     710:	39 f0       	breq	.+14     	; 0x720 <touch_process+0x4a>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 21 03 	call	0x642	; 0x642 <qtm_error_callback>
     718:	03 c0       	rjmp	.+6      	; 0x720 <touch_process+0x4a>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 21 03 	call	0x642	; 0x642 <qtm_error_callback>
     720:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <qtlib_key_set1>
     724:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <qtlib_key_set1+0x1>
     728:	80 81       	ld	r24, Z
     72a:	88 23       	and	r24, r24
     72c:	24 f4       	brge	.+8      	; 0x736 <touch_process+0x60>
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <time_to_measure_touch_flag>
     734:	08 95       	ret
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <measurement_done_touch>
     73c:	08 95       	ret

0000073e <touch_timer_handler>:
     73e:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <interrupt_cnt>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 ae 38 	sts	0x38AE, r24	; 0x8038ae <interrupt_cnt>
     748:	84 31       	cpi	r24, 0x14	; 20
     74a:	48 f0       	brcs	.+18     	; 0x75e <touch_timer_handler+0x20>
     74c:	10 92 ae 38 	sts	0x38AE, r1	; 0x8038ae <interrupt_cnt>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 78 38 	sts	0x3878, r24	; 0x803878 <time_to_measure_touch_flag>
     756:	84 e1       	ldi	r24, 0x14	; 20
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 8d 0b 	call	0x171a	; 0x171a <qtm_update_qtlib_timer>
     75e:	08 95       	ret

00000760 <get_sensor_state>:
     760:	e0 91 06 38 	lds	r30, 0x3806	; 0x803806 <qtlib_key_set1+0x4>
     764:	f0 91 07 38 	lds	r31, 0x3807	; 0x803807 <qtlib_key_set1+0x5>
     768:	9c 01       	movw	r18, r24
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	82 0f       	add	r24, r18
     770:	93 1f       	adc	r25, r19
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	e8 0f       	add	r30, r24
     778:	f9 1f       	adc	r31, r25
     77a:	80 81       	ld	r24, Z
     77c:	08 95       	ret

0000077e <__vector_20>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     77e:	1f 92       	push	r1
     780:	0f 92       	push	r0
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
	qtm_t161x_ptc_handler_eoc();
     7a0:	0e 94 b4 12 	call	0x2568	; 0x2568 <qtm_t161x_ptc_handler_eoc>
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	08 95       	ret

000007ca <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	68 ed       	ldi	r22, 0xD8	; 216
     7ce:	81 e6       	ldi	r24, 0x61	; 97
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	08 95       	ret

000007da <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     7da:	78 94       	sei

	return 0;
}
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret

000007e0 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7e4:	e8 2f       	mov	r30, r24
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	e0 5f       	subi	r30, 0xF0	; 240
     7ea:	fb 4f       	sbci	r31, 0xFB	; 251
     7ec:	90 81       	ld	r25, Z
     7ee:	98 60       	ori	r25, 0x08	; 8
     7f0:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	88 30       	cpi	r24, 0x08	; 8
     7f6:	b0 f3       	brcs	.-20     	; 0x7e4 <mcu_init+0x4>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7fc:	e8 2f       	mov	r30, r24
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	e0 5d       	subi	r30, 0xD0	; 208
     802:	fb 4f       	sbci	r31, 0xFB	; 251
     804:	90 81       	ld	r25, Z
     806:	98 60       	ori	r25, 0x08	; 8
     808:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	88 30       	cpi	r24, 0x08	; 8
     80e:	b0 f3       	brcs	.-20     	; 0x7fc <mcu_init+0x1c>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	08 c0       	rjmp	.+16     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     814:	e8 2f       	mov	r30, r24
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	e0 5b       	subi	r30, 0xB0	; 176
     81a:	fb 4f       	sbci	r31, 0xFB	; 251
     81c:	90 81       	ld	r25, Z
     81e:	98 60       	ori	r25, 0x08	; 8
     820:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	88 30       	cpi	r24, 0x08	; 8
     826:	b0 f3       	brcs	.-20     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     828:	08 95       	ret

0000082a <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     82a:	84 b1       	in	r24, 0x04	; 4
     82c:	87 7f       	andi	r24, 0xF7	; 247
     82e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     830:	e3 e3       	ldi	r30, 0x33	; 51
     832:	f4 e0       	ldi	r31, 0x04	; 4
     834:	80 81       	ld	r24, Z
     836:	87 7f       	andi	r24, 0xF7	; 247
     838:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     83a:	85 b1       	in	r24, 0x05	; 5
     83c:	8b 7f       	andi	r24, 0xFB	; 251
     83e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     840:	84 b1       	in	r24, 0x04	; 4
     842:	84 60       	ori	r24, 0x04	; 4
     844:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
     846:	0e 94 34 05 	call	0xa68	; 0xa68 <USART_0_init>
     84a:	08 95       	ret

0000084c <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     84c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <TIMER_0_init>
     850:	08 95       	ret

00000852 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     852:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     856:	81 b1       	in	r24, 0x01	; 1
     858:	8d 7f       	andi	r24, 0xFD	; 253
     85a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     85c:	80 b1       	in	r24, 0x00	; 0
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     862:	81 b1       	in	r24, 0x01	; 1
     864:	8b 7f       	andi	r24, 0xFB	; 251
     866:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     868:	80 b1       	in	r24, 0x00	; 0
     86a:	84 60       	ori	r24, 0x04	; 4
     86c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     86e:	81 b1       	in	r24, 0x01	; 1
     870:	87 7f       	andi	r24, 0xF7	; 247
     872:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     874:	80 b1       	in	r24, 0x00	; 0
     876:	88 60       	ori	r24, 0x08	; 8
     878:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     87a:	85 b1       	in	r24, 0x05	; 5
     87c:	8f 7e       	andi	r24, 0xEF	; 239
     87e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     880:	84 b1       	in	r24, 0x04	; 4
     882:	80 61       	ori	r24, 0x10	; 16
     884:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     886:	84 b1       	in	r24, 0x04	; 4
     888:	8f 7d       	andi	r24, 0xDF	; 223
     88a:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     88c:	e5 e3       	ldi	r30, 0x35	; 53
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	80 81       	ld	r24, Z
     892:	87 7f       	andi	r24, 0xF7	; 247
     894:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     896:	89 b1       	in	r24, 0x09	; 9
     898:	8e 7f       	andi	r24, 0xFE	; 254
     89a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     89c:	88 b1       	in	r24, 0x08	; 8
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	Rele3_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     8a2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <CLKCTRL_init>

	Timer_init();
     8a6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <Timer_init>

	USART_0_initialization();
     8aa:	0e 94 15 04 	call	0x82a	; 0x82a <USART_0_initialization>

	TIMER_0_initialization();
     8ae:	0e 94 26 04 	call	0x84c	; 0x84c <TIMER_0_initialization>

	CPUINT_init();
     8b2:	0e 94 ed 03 	call	0x7da	; 0x7da <CPUINT_init>

	SLPCTRL_init();
     8b6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <SLPCTRL_init>

	BOD_init();
     8ba:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <BOD_init>
     8be:	08 95       	ret

000008c0 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     8c0:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     8c2:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     8c4:	40 83       	st	Z, r20
	ret                             // Return to caller
     8c6:	08 95       	ret

000008c8 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     8c8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f571e>
     8cc:	81 11       	cpse	r24, r1
     8ce:	fc cf       	rjmp	.-8      	; 0x8c8 <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     8d0:	e0 e4       	ldi	r30, 0x40	; 64
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	81 e8       	ldi	r24, 0x81	; 129
     8d6:	80 83       	st	Z, r24

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret

000008e0 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	08 95       	ret

000008e4 <TIMER_0_init>:

	// TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp /* Compare 0 Waveform Output Value: disabled */
	//		 | 0 << TCA_SINGLE_CMP1OV_bp /* Compare 1 Waveform Output Value: disabled */
	//		 | 0 << TCA_SINGLE_CMP2OV_bp; /* Compare 2 Waveform Output Value: disabled */

	TCA0.SINGLE.DBGCTRL = 1 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: enabled */
     8e4:	e0 e0       	ldi	r30, 0x00	; 0
     8e6:	fa e0       	ldi	r31, 0x0A	; 10
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	86 87       	std	Z+14, r24	; 0x0e

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc /* Count on positive edge event */;

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: disabled */
     8ec:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */

	TCA0.SINGLE.PER = 0xfa; /* Period: 0xfa */
     8ee:	8a ef       	ldi	r24, 0xFA	; 250
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	86 a3       	std	Z+38, r24	; 0x26
     8f4:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV8_gc /* System Clock / 8 */
     8f6:	87 e0       	ldi	r24, 0x07	; 7
     8f8:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret

000008fe <USART_0_default_rx_isr_cb>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
     8fe:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <gain_setting_int_cap+0x7f5ddd>
     902:	e0 91 86 38 	lds	r30, 0x3886	; 0x803886 <USART_0_rx_head>
     906:	ef 5f       	subi	r30, 0xFF	; 255
     908:	e7 70       	andi	r30, 0x07	; 7
     90a:	80 91 85 38 	lds	r24, 0x3885	; 0x803885 <USART_0_rx_tail>
     90e:	e8 17       	cp	r30, r24
     910:	59 f0       	breq	.+22     	; 0x928 <USART_0_default_rx_isr_cb+0x2a>
     912:	e0 93 86 38 	sts	0x3886, r30	; 0x803886 <USART_0_rx_head>
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	e9 57       	subi	r30, 0x79	; 121
     91a:	f7 4c       	sbci	r31, 0xC7	; 199
     91c:	90 83       	st	Z, r25
     91e:	80 91 84 38 	lds	r24, 0x3884	; 0x803884 <USART_0_rx_elements>
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	80 93 84 38 	sts	0x3884, r24	; 0x803884 <USART_0_rx_elements>
     928:	08 95       	ret

0000092a <USART_0_default_udre_isr_cb>:
     92a:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <USART_0_tx_elements>
     92e:	88 23       	and	r24, r24
     930:	89 f0       	breq	.+34     	; 0x954 <USART_0_default_udre_isr_cb+0x2a>
     932:	e0 91 7a 38 	lds	r30, 0x387A	; 0x80387a <USART_0_tx_tail>
     936:	ef 5f       	subi	r30, 0xFF	; 255
     938:	e7 70       	andi	r30, 0x07	; 7
     93a:	e0 93 7a 38 	sts	0x387A, r30	; 0x80387a <USART_0_tx_tail>
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	e4 58       	subi	r30, 0x84	; 132
     942:	f7 4c       	sbci	r31, 0xC7	; 199
     944:	80 81       	ld	r24, Z
     946:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <gain_setting_int_cap+0x7f5ddf>
     94a:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <USART_0_tx_elements>
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <USART_0_tx_elements>
     954:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <USART_0_tx_elements>
     958:	81 11       	cpse	r24, r1
     95a:	05 c0       	rjmp	.+10     	; 0x966 <USART_0_default_udre_isr_cb+0x3c>
     95c:	e0 e0       	ldi	r30, 0x00	; 0
     95e:	f8 e0       	ldi	r31, 0x08	; 8
     960:	85 81       	ldd	r24, Z+5	; 0x05
     962:	8f 7d       	andi	r24, 0xDF	; 223
     964:	85 83       	std	Z+5, r24	; 0x05
     966:	08 95       	ret

00000968 <USART_0_set_ISR_cb>:
     968:	61 30       	cpi	r22, 0x01	; 1
     96a:	19 f0       	breq	.+6      	; 0x972 <USART_0_set_ISR_cb+0xa>
     96c:	62 30       	cpi	r22, 0x02	; 2
     96e:	31 f0       	breq	.+12     	; 0x97c <USART_0_set_ISR_cb+0x14>
     970:	08 95       	ret
     972:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <USART_0_rx_isr_cb>
     976:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <USART_0_rx_isr_cb+0x1>
     97a:	08 95       	ret
     97c:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <USART_0_udre_isr_cb>
     980:	90 93 62 38 	sts	0x3862, r25	; 0x803862 <USART_0_udre_isr_cb+0x1>
     984:	08 95       	ret

00000986 <__vector_27>:
     986:	1f 92       	push	r1
     988:	0f 92       	push	r0
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	0f 92       	push	r0
     98e:	11 24       	eor	r1, r1
     990:	2f 93       	push	r18
     992:	3f 93       	push	r19
     994:	4f 93       	push	r20
     996:	5f 93       	push	r21
     998:	6f 93       	push	r22
     99a:	7f 93       	push	r23
     99c:	8f 93       	push	r24
     99e:	9f 93       	push	r25
     9a0:	af 93       	push	r26
     9a2:	bf 93       	push	r27
     9a4:	ef 93       	push	r30
     9a6:	ff 93       	push	r31
     9a8:	e0 91 63 38 	lds	r30, 0x3863	; 0x803863 <USART_0_rx_isr_cb>
     9ac:	f0 91 64 38 	lds	r31, 0x3864	; 0x803864 <USART_0_rx_isr_cb+0x1>
     9b0:	30 97       	sbiw	r30, 0x00	; 0
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__vector_27+0x30>
     9b4:	09 95       	icall
     9b6:	ff 91       	pop	r31
     9b8:	ef 91       	pop	r30
     9ba:	bf 91       	pop	r27
     9bc:	af 91       	pop	r26
     9be:	9f 91       	pop	r25
     9c0:	8f 91       	pop	r24
     9c2:	7f 91       	pop	r23
     9c4:	6f 91       	pop	r22
     9c6:	5f 91       	pop	r21
     9c8:	4f 91       	pop	r20
     9ca:	3f 91       	pop	r19
     9cc:	2f 91       	pop	r18
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_28>:
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
     9fa:	e0 91 61 38 	lds	r30, 0x3861	; 0x803861 <USART_0_udre_isr_cb>
     9fe:	f0 91 62 38 	lds	r31, 0x3862	; 0x803862 <USART_0_udre_isr_cb+0x1>
     a02:	30 97       	sbiw	r30, 0x00	; 0
     a04:	09 f0       	breq	.+2      	; 0xa08 <__vector_28+0x30>
     a06:	09 95       	icall
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
     a2a:	20 91 7b 38 	lds	r18, 0x387B	; 0x80387b <USART_0_tx_head>
     a2e:	2f 5f       	subi	r18, 0xFF	; 255
     a30:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
     a32:	90 91 79 38 	lds	r25, 0x3879	; 0x803879 <USART_0_tx_elements>
     a36:	98 30       	cpi	r25, 0x08	; 8
     a38:	e1 f3       	breq	.-8      	; 0xa32 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
     a3a:	e2 2f       	mov	r30, r18
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	e4 58       	subi	r30, 0x84	; 132
     a40:	f7 4c       	sbci	r31, 0xC7	; 199
     a42:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
     a44:	20 93 7b 38 	sts	0x387B, r18	; 0x80387b <USART_0_tx_head>
	ENTER_CRITICAL(W);
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	0f 92       	push	r0
	USART_0_tx_elements++;
     a4e:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <USART_0_tx_elements>
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <USART_0_tx_elements>
	EXIT_CRITICAL(W);
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART0.CTRLA |= (1 << USART_DREIE_bp);
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f8 e0       	ldi	r31, 0x08	; 8
     a60:	85 81       	ldd	r24, Z+5	; 0x05
     a62:	80 62       	ori	r24, 0x20	; 32
     a64:	85 83       	std	Z+5, r24	; 0x05
     a66:	08 95       	ret

00000a68 <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
     a68:	e0 e0       	ldi	r30, 0x00	; 0
     a6a:	f8 e0       	ldi	r31, 0x08	; 8
     a6c:	86 eb       	ldi	r24, 0xB6	; 182
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	80 87       	std	Z+8, r24	; 0x08
     a72:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     a78:	80 ec       	ldi	r24, 0xC0	; 192
     a7a:	86 83       	std	Z+6, r24	; 0x06
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
     a7c:	10 92 85 38 	sts	0x3885, r1	; 0x803885 <USART_0_rx_tail>
	USART_0_rx_head     = x;
     a80:	10 92 86 38 	sts	0x3886, r1	; 0x803886 <USART_0_rx_head>
	USART_0_rx_elements = x;
     a84:	10 92 84 38 	sts	0x3884, r1	; 0x803884 <USART_0_rx_elements>
	USART_0_tx_tail     = x;
     a88:	10 92 7a 38 	sts	0x387A, r1	; 0x80387a <USART_0_tx_tail>
	USART_0_tx_head     = x;
     a8c:	10 92 7b 38 	sts	0x387B, r1	; 0x80387b <USART_0_tx_head>
	USART_0_tx_elements = x;
     a90:	10 92 79 38 	sts	0x3879, r1	; 0x803879 <USART_0_tx_elements>

	return 0;
}
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	08 95       	ret

00000a98 <my_strlen>:
    
    set_wifimode_flag = SET_WIFICONFIG_ERROR;
    
    length = set_wifi_uart_byte(length, mode);
    
    wifi_uart_write_frame(WIFI_MODE_CMD, MCU_TX_VER, length);
     a98:	fc 01       	movw	r30, r24
     a9a:	89 2b       	or	r24, r25
     a9c:	a1 f0       	breq	.+40     	; 0xac6 <my_strlen+0x2e>
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	ba 01       	movw	r22, r20
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <my_strlen+0x18>
     aa6:	4f 5f       	subi	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	6f 4f       	sbci	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	f9 01       	movw	r30, r18
     ab0:	9f 01       	movw	r18, r30
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	80 81       	ld	r24, Z
     ab8:	81 11       	cpse	r24, r1
     aba:	f5 cf       	rjmp	.-22     	; 0xaa6 <my_strlen+0xe>
     abc:	34 2f       	mov	r19, r20
     abe:	25 2f       	mov	r18, r21
     ac0:	86 2f       	mov	r24, r22
     ac2:	97 2f       	mov	r25, r23
     ac4:	04 c0       	rjmp	.+8      	; 0xace <my_strlen+0x36>
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	63 2f       	mov	r22, r19
     ad0:	72 2f       	mov	r23, r18
     ad2:	08 95       	ret

00000ad4 <my_memcpy>:
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	eb 01       	movw	r28, r22
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	71 f1       	breq	.+92     	; 0xb3a <my_memcpy+0x66>
     ade:	20 97       	sbiw	r28, 0x00	; 0
     ae0:	79 f1       	breq	.+94     	; 0xb40 <my_memcpy+0x6c>
     ae2:	68 17       	cp	r22, r24
     ae4:	79 07       	cpc	r23, r25
     ae6:	90 f4       	brcc	.+36     	; 0xb0c <my_memcpy+0x38>
     ae8:	9b 01       	movw	r18, r22
     aea:	24 0f       	add	r18, r20
     aec:	35 1f       	adc	r19, r21
     aee:	28 17       	cp	r18, r24
     af0:	39 07       	cpc	r19, r25
     af2:	78 f0       	brcs	.+30     	; 0xb12 <my_memcpy+0x3e>
     af4:	1e c0       	rjmp	.+60     	; 0xb32 <my_memcpy+0x5e>
     af6:	fc 01       	movw	r30, r24
     af8:	e2 0f       	add	r30, r18
     afa:	f3 1f       	adc	r31, r19
     afc:	de 01       	movw	r26, r28
     afe:	a2 0f       	add	r26, r18
     b00:	b3 1f       	adc	r27, r19
     b02:	7c 91       	ld	r23, X
     b04:	70 83       	st	Z, r23
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <my_memcpy+0x42>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <my_memcpy+0x42>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	24 17       	cp	r18, r20
     b18:	35 07       	cpc	r19, r21
     b1a:	68 f3       	brcs	.-38     	; 0xaf6 <my_memcpy+0x22>
     b1c:	13 c0       	rjmp	.+38     	; 0xb44 <my_memcpy+0x70>
     b1e:	41 50       	subi	r20, 0x01	; 1
     b20:	51 09       	sbc	r21, r1
     b22:	fc 01       	movw	r30, r24
     b24:	e4 0f       	add	r30, r20
     b26:	f5 1f       	adc	r31, r21
     b28:	de 01       	movw	r26, r28
     b2a:	a4 0f       	add	r26, r20
     b2c:	b5 1f       	adc	r27, r21
     b2e:	2c 91       	ld	r18, X
     b30:	20 83       	st	Z, r18
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	99 f7       	brne	.-26     	; 0xb1e <my_memcpy+0x4a>
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <my_memcpy+0x70>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <my_memcpy+0x70>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <byte_to_int>:
     b4a:	fc 01       	movw	r30, r24
     b4c:	60 81       	ld	r22, Z
     b4e:	86 2f       	mov	r24, r22
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ba 2f       	mov	r27, r26
     b58:	a9 2f       	mov	r26, r25
     b5a:	98 2f       	mov	r25, r24
     b5c:	88 27       	eor	r24, r24
     b5e:	21 81       	ldd	r18, Z+1	; 0x01
     b60:	82 2b       	or	r24, r18
     b62:	ba 2f       	mov	r27, r26
     b64:	a9 2f       	mov	r26, r25
     b66:	98 2f       	mov	r25, r24
     b68:	88 27       	eor	r24, r24
     b6a:	22 81       	ldd	r18, Z+2	; 0x02
     b6c:	82 2b       	or	r24, r18
     b6e:	ba 2f       	mov	r27, r26
     b70:	a9 2f       	mov	r26, r25
     b72:	98 2f       	mov	r25, r24
     b74:	88 27       	eor	r24, r24
     b76:	23 81       	ldd	r18, Z+3	; 0x03
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	62 2b       	or	r22, r18
     b7e:	08 95       	ret

00000b80 <mcu_dp_raw_update>:
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	90 91 71 39 	lds	r25, 0x3971	; 0x803971 <stop_update_flag>
     b8c:	91 30       	cpi	r25, 0x01	; 1
     b8e:	d9 f0       	breq	.+54     	; 0xbc6 <mcu_dp_raw_update+0x46>
     b90:	c5 2f       	mov	r28, r21
     b92:	d4 2f       	mov	r29, r20
     b94:	8b 01       	movw	r16, r22
     b96:	68 2f       	mov	r22, r24
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     ba6:	6c 2f       	mov	r22, r28
     ba8:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     bac:	6d 2f       	mov	r22, r29
     bae:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     bb2:	4d 2f       	mov	r20, r29
     bb4:	5c 2f       	mov	r21, r28
     bb6:	b8 01       	movw	r22, r16
     bb8:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
     bbc:	ac 01       	movw	r20, r24
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <mcu_dp_bool_update>:
     bd2:	cf 93       	push	r28
     bd4:	90 91 71 39 	lds	r25, 0x3971	; 0x803971 <stop_update_flag>
     bd8:	91 30       	cpi	r25, 0x01	; 1
     bda:	f1 f0       	breq	.+60     	; 0xc18 <mcu_dp_bool_update+0x46>
     bdc:	c6 2f       	mov	r28, r22
     bde:	68 2f       	mov	r22, r24
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     bfa:	c1 11       	cpse	r28, r1
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <mcu_dp_bool_update+0x36>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c04:	ac 01       	movw	r20, r24
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <mcu_dp_bool_update+0x3e>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c0e:	ac 01       	movw	r20, r24
     c10:	63 e0       	ldi	r22, 0x03	; 3
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <mcu_dp_value_update>:
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	90 91 71 39 	lds	r25, 0x3971	; 0x803971 <stop_update_flag>
     c2a:	91 30       	cpi	r25, 0x01	; 1
     c2c:	61 f1       	breq	.+88     	; 0xc86 <mcu_dp_value_update+0x68>
     c2e:	6a 01       	movw	r12, r20
     c30:	7b 01       	movw	r14, r22
     c32:	68 2f       	mov	r22, r24
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c48:	64 e0       	ldi	r22, 0x04	; 4
     c4a:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c4e:	4f 2d       	mov	r20, r15
     c50:	55 27       	eor	r21, r21
     c52:	66 27       	eor	r22, r22
     c54:	77 27       	eor	r23, r23
     c56:	64 2f       	mov	r22, r20
     c58:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c5c:	a7 01       	movw	r20, r14
     c5e:	66 27       	eor	r22, r22
     c60:	77 27       	eor	r23, r23
     c62:	64 2f       	mov	r22, r20
     c64:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c68:	77 27       	eor	r23, r23
     c6a:	6f 2d       	mov	r22, r15
     c6c:	5e 2d       	mov	r21, r14
     c6e:	4d 2d       	mov	r20, r13
     c70:	64 2f       	mov	r22, r20
     c72:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c76:	6c 2d       	mov	r22, r12
     c78:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     c7c:	ac 01       	movw	r20, r24
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	08 95       	ret

00000c92 <mcu_dp_enum_update>:
     c92:	cf 93       	push	r28
     c94:	90 91 71 39 	lds	r25, 0x3971	; 0x803971 <stop_update_flag>
     c98:	91 30       	cpi	r25, 0x01	; 1
     c9a:	b9 f0       	breq	.+46     	; 0xcca <mcu_dp_enum_update+0x38>
     c9c:	c6 2f       	mov	r28, r22
     c9e:	68 2f       	mov	r22, r24
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     cba:	6c 2f       	mov	r22, r28
     cbc:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
     cc0:	ac 01       	movw	r20, r24
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	87 e0       	ldi	r24, 0x07	; 7
     cc6:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <mcu_get_dp_download_bool>:
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	08 95       	ret

00000cd6 <mcu_get_dp_download_enum>:
     cd6:	fc 01       	movw	r30, r24
     cd8:	80 81       	ld	r24, Z
     cda:	08 95       	ret

00000cdc <mcu_get_dp_download_value>:
     cdc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <byte_to_int>
     ce0:	08 95       	ret

00000ce2 <uart_receive_input>:
     ce2:	40 91 36 39 	lds	r20, 0x3936	; 0x803936 <rx_buf_out>
     ce6:	50 91 37 39 	lds	r21, 0x3937	; 0x803937 <rx_buf_out+0x1>
     cea:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <rx_buf_in>
     cee:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <rx_buf_in+0x1>
     cf2:	ba 01       	movw	r22, r20
     cf4:	62 1b       	sub	r22, r18
     cf6:	73 0b       	sbc	r23, r19
     cf8:	61 30       	cpi	r22, 0x01	; 1
     cfa:	71 05       	cpc	r23, r1
     cfc:	f1 f0       	breq	.+60     	; 0xd3a <uart_receive_input+0x58>
     cfe:	42 17       	cp	r20, r18
     d00:	53 07       	cpc	r21, r19
     d02:	30 f4       	brcc	.+12     	; 0xd10 <uart_receive_input+0x2e>
     d04:	b9 01       	movw	r22, r18
     d06:	64 1b       	sub	r22, r20
     d08:	75 0b       	sbc	r23, r21
     d0a:	67 31       	cpi	r22, 0x17	; 23
     d0c:	71 05       	cpc	r23, r1
     d0e:	a8 f4       	brcc	.+42     	; 0xd3a <uart_receive_input+0x58>
     d10:	26 53       	subi	r18, 0x36	; 54
     d12:	39 43       	sbci	r19, 0x39	; 57
     d14:	30 f0       	brcs	.+12     	; 0xd22 <uart_receive_input+0x40>
     d16:	2f e1       	ldi	r18, 0x1F	; 31
     d18:	39 e3       	ldi	r19, 0x39	; 57
     d1a:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <rx_buf_in>
     d1e:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <rx_buf_in+0x1>
     d22:	e0 91 1d 39 	lds	r30, 0x391D	; 0x80391d <rx_buf_in>
     d26:	f0 91 1e 39 	lds	r31, 0x391E	; 0x80391e <rx_buf_in+0x1>
     d2a:	9f 01       	movw	r18, r30
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <rx_buf_in>
     d34:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <rx_buf_in+0x1>
     d38:	80 83       	st	Z, r24
     d3a:	08 95       	ret

00000d3c <wifi_uart_service>:
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <wifi_uart_service+0x28>
     d46:	c0 91 8f 38 	lds	r28, 0x388F	; 0x80388f <rx_in.2162>
     d4a:	d0 91 90 38 	lds	r29, 0x3890	; 0x803890 <rx_in.2162+0x1>
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	80 93 8f 38 	sts	0x388F, r24	; 0x80388f <rx_in.2162>
     d56:	90 93 90 38 	sts	0x3890, r25	; 0x803890 <rx_in.2162+0x1>
     d5a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <take_byte_rxbuff>
     d5e:	c3 50       	subi	r28, 0x03	; 3
     d60:	d7 4c       	sbci	r29, 0xC7	; 199
     d62:	88 83       	st	Y, r24
     d64:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <rx_in.2162>
     d68:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <rx_in.2162+0x1>
     d6c:	4f 97       	sbiw	r24, 0x1f	; 31
     d6e:	20 f4       	brcc	.+8      	; 0xd78 <wifi_uart_service+0x3c>
     d70:	0e 94 c1 09 	call	0x1382	; 0x1382 <with_data_rxbuff>
     d74:	81 11       	cpse	r24, r1
     d76:	e7 cf       	rjmp	.-50     	; 0xd46 <wifi_uart_service+0xa>
     d78:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <rx_in.2162>
     d7c:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <rx_in.2162+0x1>
     d80:	07 97       	sbiw	r24, 0x07	; 7
     d82:	08 f4       	brcc	.+2      	; 0xd86 <wifi_uart_service+0x4a>
     d84:	63 c0       	rjmp	.+198    	; 0xe4c <wifi_uart_service+0x110>
     d86:	c0 e0       	ldi	r28, 0x00	; 0
     d88:	d0 e0       	ldi	r29, 0x00	; 0
     d8a:	48 c0       	rjmp	.+144    	; 0xe1c <wifi_uart_service+0xe0>
     d8c:	fe 01       	movw	r30, r28
     d8e:	e3 50       	subi	r30, 0x03	; 3
     d90:	f7 4c       	sbci	r31, 0xC7	; 199
     d92:	80 81       	ld	r24, Z
     d94:	85 35       	cpi	r24, 0x55	; 85
     d96:	11 f0       	breq	.+4      	; 0xd9c <wifi_uart_service+0x60>
     d98:	21 96       	adiw	r28, 0x01	; 1
     d9a:	40 c0       	rjmp	.+128    	; 0xe1c <wifi_uart_service+0xe0>
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	fc 01       	movw	r30, r24
     da2:	e3 50       	subi	r30, 0x03	; 3
     da4:	f7 4c       	sbci	r31, 0xC7	; 199
     da6:	20 81       	ld	r18, Z
     da8:	2a 3a       	cpi	r18, 0xAA	; 170
     daa:	a9 f5       	brne	.+106    	; 0xe16 <wifi_uart_service+0xda>
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	fc 01       	movw	r30, r24
     db0:	e3 50       	subi	r30, 0x03	; 3
     db2:	f7 4c       	sbci	r31, 0xC7	; 199
     db4:	20 81       	ld	r18, Z
     db6:	21 11       	cpse	r18, r1
     db8:	30 c0       	rjmp	.+96     	; 0xe1a <wifi_uart_service+0xde>
     dba:	fe 01       	movw	r30, r28
     dbc:	ef 5f       	subi	r30, 0xFF	; 255
     dbe:	f6 4c       	sbci	r31, 0xC6	; 198
     dc0:	20 81       	ld	r18, Z
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	92 2f       	mov	r25, r18
     dc6:	fe 01       	movw	r30, r28
     dc8:	ee 5f       	subi	r30, 0xFE	; 254
     dca:	f6 4c       	sbci	r31, 0xC6	; 198
     dcc:	00 81       	ld	r16, Z
     dce:	10 e0       	ldi	r17, 0x00	; 0
     dd0:	09 5f       	subi	r16, 0xF9	; 249
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	08 0f       	add	r16, r24
     dd6:	19 1f       	adc	r17, r25
     dd8:	07 32       	cpi	r16, 0x27	; 39
     dda:	11 05       	cpc	r17, r1
     ddc:	10 f0       	brcs	.+4      	; 0xde2 <wifi_uart_service+0xa6>
     dde:	23 96       	adiw	r28, 0x03	; 3
     de0:	1d c0       	rjmp	.+58     	; 0xe1c <wifi_uart_service+0xe0>
     de2:	40 17       	cp	r20, r16
     de4:	51 07       	cpc	r21, r17
     de6:	20 f1       	brcs	.+72     	; 0xe30 <wifi_uart_service+0xf4>
     de8:	b8 01       	movw	r22, r16
     dea:	61 50       	subi	r22, 0x01	; 1
     dec:	71 09       	sbc	r23, r1
     dee:	ce 01       	movw	r24, r28
     df0:	83 50       	subi	r24, 0x03	; 3
     df2:	97 4c       	sbci	r25, 0xC7	; 199
     df4:	0e 94 a4 08 	call	0x1148	; 0x1148 <get_check_sum>
     df8:	0c 0f       	add	r16, r28
     dfa:	1d 1f       	adc	r17, r29
     dfc:	f8 01       	movw	r30, r16
     dfe:	e4 50       	subi	r30, 0x04	; 4
     e00:	f7 4c       	sbci	r31, 0xC7	; 199
     e02:	90 81       	ld	r25, Z
     e04:	89 17       	cp	r24, r25
     e06:	11 f0       	breq	.+4      	; 0xe0c <wifi_uart_service+0xd0>
     e08:	23 96       	adiw	r28, 0x03	; 3
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <wifi_uart_service+0xe0>
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <data_handle>
     e12:	e8 01       	movw	r28, r16
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <wifi_uart_service+0xe0>
     e16:	ec 01       	movw	r28, r24
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <wifi_uart_service+0xe0>
     e1a:	ec 01       	movw	r28, r24
     e1c:	40 91 8f 38 	lds	r20, 0x388F	; 0x80388f <rx_in.2162>
     e20:	50 91 90 38 	lds	r21, 0x3890	; 0x803890 <rx_in.2162+0x1>
     e24:	4c 1b       	sub	r20, r28
     e26:	5d 0b       	sbc	r21, r29
     e28:	47 30       	cpi	r20, 0x07	; 7
     e2a:	51 05       	cpc	r21, r1
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <wifi_uart_service+0xf4>
     e2e:	ae cf       	rjmp	.-164    	; 0xd8c <wifi_uart_service+0x50>
     e30:	40 93 8f 38 	sts	0x388F, r20	; 0x80388f <rx_in.2162>
     e34:	50 93 90 38 	sts	0x3890, r21	; 0x803890 <rx_in.2162+0x1>
     e38:	41 15       	cp	r20, r1
     e3a:	51 05       	cpc	r21, r1
     e3c:	39 f0       	breq	.+14     	; 0xe4c <wifi_uart_service+0x110>
     e3e:	be 01       	movw	r22, r28
     e40:	63 50       	subi	r22, 0x03	; 3
     e42:	77 4c       	sbci	r23, 0xC7	; 199
     e44:	8d ef       	ldi	r24, 0xFD	; 253
     e46:	98 e3       	ldi	r25, 0x38	; 56
     e48:	0e 94 6a 05 	call	0xad4	; 0xad4 <my_memcpy>
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <wifi_protocol_init>:
     e56:	8f e1       	ldi	r24, 0x1F	; 31
     e58:	99 e3       	ldi	r25, 0x39	; 57
     e5a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <rx_buf_in>
     e5e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <rx_buf_in+0x1>
     e62:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <rx_buf_out>
     e66:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <rx_buf_out+0x1>
     e6a:	10 92 71 39 	sts	0x3971, r1	; 0x803971 <stop_update_flag>
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <wifi_work_state>
     e74:	08 95       	ret

00000e76 <mcu_get_wifi_work_state>:
 * -          SMART_AND_AP_STATE: WIFI smartconfig&AP mode
 * @note   1:If the module is in self-processing mode, the MCU does not need to call this function.
 */
unsigned char mcu_get_wifi_work_state(void)
{
    return wifi_work_state;
     e76:	80 91 6f 39 	lds	r24, 0x396F	; 0x80396f <wifi_work_state>
}
     e7a:	08 95       	ret

00000e7c <dp_download_switch_fan_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : Issue and report type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_switch_fan_handle(const unsigned char value[], unsigned short length)
{
     e7c:	cf 93       	push	r28
    //Example: The current DP type isBOOL
    unsigned char ret;
    //0:off/1:on
    unsigned char switch_fan;
    
    switch_fan = mcu_get_dp_download_bool(value,length);
     e7e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <mcu_get_dp_download_bool>
     e82:	c8 2f       	mov	r28, r24
    if(switch_fan == 0) {
     e84:	81 11       	cpse	r24, r1
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <dp_download_switch_fan_handle+0x14>
        set_fan_output(off);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 c8 00 	call	0x190	; 0x190 <set_fan_output>
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <dp_download_switch_fan_handle+0x1a>
    }else {
        set_fan_output(on);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 c8 00 	call	0x190	; 0x190 <set_fan_output>
    }
  
    //There should be a report after processing the DP
    ret = mcu_dp_bool_update(DPID_SWITCH_FAN,switch_fan);
     e96:	6c 2f       	mov	r22, r28
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
    if(ret == SUCCESS)
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	09 f0       	breq	.+2      	; 0xea4 <dp_download_switch_fan_handle+0x28>
        return SUCCESS;
    else
        return ERROR;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
}
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <dp_download_countdown_fan_handle>:
{
    //Example: The current DP type isVALUE
    unsigned char ret;
    unsigned long countdown_fan;
    
    countdown_fan = mcu_get_dp_download_value(value,length);
     ea8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <mcu_get_dp_download_value>
     eac:	ab 01       	movw	r20, r22
     eae:	bc 01       	movw	r22, r24
    //VALUE type data processing
    
    */
    
    //There should be a report after processing the DP
    ret = mcu_dp_value_update(DPID_COUNTDOWN_FAN,countdown_fan);
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcu_dp_value_update>
    if(ret == SUCCESS)
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f0       	breq	.+2      	; 0xebc <dp_download_countdown_fan_handle+0x14>
        return SUCCESS;
    else
        return ERROR;
     eba:	80 e0       	ldi	r24, 0x00	; 0
}
     ebc:	08 95       	ret

00000ebe <dp_download_countdown_1_handle>:
{
    //Example: The current DP type isVALUE
    unsigned char ret;
    unsigned long countdown_1;
    
    countdown_1 = mcu_get_dp_download_value(value,length);
     ebe:	0e 94 6e 06 	call	0xcdc	; 0xcdc <mcu_get_dp_download_value>
     ec2:	ab 01       	movw	r20, r22
     ec4:	bc 01       	movw	r22, r24
    //VALUE type data processing
    
    */
    
    //There should be a report after processing the DP
    ret = mcu_dp_value_update(DPID_COUNTDOWN_1,countdown_1);
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcu_dp_value_update>
    if(ret == SUCCESS)
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	09 f0       	breq	.+2      	; 0xed2 <dp_download_countdown_1_handle+0x14>
        return SUCCESS;
    else
        return ERROR;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
}
     ed2:	08 95       	ret

00000ed4 <dp_download_fan_speed_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : Issue and report type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_fan_speed_handle(const unsigned char value[], unsigned short length)
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
    //Example: The current DP type isVALUE
    unsigned char ret;
    unsigned long fan_speed;
    
    fan_speed = mcu_get_dp_download_value(value,length);
     edc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <mcu_get_dp_download_value>
     ee0:	c6 2f       	mov	r28, r22
     ee2:	07 2f       	mov	r16, r23
     ee4:	18 2f       	mov	r17, r24
     ee6:	d9 2f       	mov	r29, r25
    /*
    //VALUE type data processing
    
    */
	
	set_fan_speed_percentage(fan_speed);
     ee8:	86 2f       	mov	r24, r22
     eea:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_fan_speed_percentage>
    
    //There should be a report after processing the DP
    ret = mcu_dp_value_update(DPID_FAN_SPEED,fan_speed);
     eee:	4c 2f       	mov	r20, r28
     ef0:	50 2f       	mov	r21, r16
     ef2:	61 2f       	mov	r22, r17
     ef4:	7d 2f       	mov	r23, r29
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcu_dp_value_update>
    if(ret == SUCCESS)
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <dp_download_fan_speed_handle+0x2e>
        return SUCCESS;
    else
        return ERROR;
     f00:	80 e0       	ldi	r24, 0x00	; 0
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <dp_download_switch_led_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : Issue and report type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_switch_led_handle(const unsigned char value[], unsigned short length)
{
     f0c:	cf 93       	push	r28
    //Example: The current DP type isBOOL
    unsigned char ret;
    //0:off/1:on
    unsigned char switch_led;
    
    switch_led = mcu_get_dp_download_bool(value,length);
     f0e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <mcu_get_dp_download_bool>
     f12:	c8 2f       	mov	r28, r24
    if(switch_led == 0) {
     f14:	81 11       	cpse	r24, r1
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <dp_download_switch_led_handle+0x14>
        set_lamp_output(off);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 66 00 	call	0xcc	; 0xcc <set_lamp_output>
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <dp_download_switch_led_handle+0x1a>
    }else {
        set_lamp_output(on);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	0e 94 66 00 	call	0xcc	; 0xcc <set_lamp_output>
    }
  
    //There should be a report after processing the DP
    ret = mcu_dp_bool_update(DPID_SWITCH_LED,switch_led);
     f26:	6c 2f       	mov	r22, r28
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
    if(ret == SUCCESS)
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <dp_download_switch_led_handle+0x28>
        return SUCCESS;
    else
        return ERROR;
     f32:	80 e0       	ldi	r24, 0x00	; 0
}
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <dp_download_relay_status_handle>:
{
    //Example: The current DP type isENUM
    unsigned char ret;
    unsigned char relay_status;
    
    relay_status = mcu_get_dp_download_enum(value,length);
     f38:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <mcu_get_dp_download_enum>
    
        break;
    }
    
    //There should be a report after processing the DP
    ret = mcu_dp_enum_update(DPID_RELAY_STATUS, relay_status);
     f3c:	68 2f       	mov	r22, r24
     f3e:	8b e0       	ldi	r24, 0x0B	; 11
     f40:	0e 94 49 06 	call	0xc92	; 0xc92 <mcu_dp_enum_update>
    if(ret == SUCCESS)
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	09 f0       	breq	.+2      	; 0xf4a <dp_download_relay_status_handle+0x12>
        return SUCCESS;
    else
        return ERROR;
     f48:	80 e0       	ldi	r24, 0x00	; 0
}
     f4a:	08 95       	ret

00000f4c <dp_download_cycle_timing_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : Issue and report type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_cycle_timing_handle(const unsigned char value[], unsigned short length)
{
     f4c:	ab 01       	movw	r20, r22
    //RAW type data processing
    
    */
    
    //There should be a report after processing the DP
    ret = mcu_dp_raw_update(DPID_CYCLE_TIMING,value,length);
     f4e:	bc 01       	movw	r22, r24
     f50:	85 e6       	ldi	r24, 0x65	; 101
     f52:	0e 94 c0 05 	call	0xb80	; 0xb80 <mcu_dp_raw_update>
    if(ret == SUCCESS)
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	09 f0       	breq	.+2      	; 0xf5c <dp_download_cycle_timing_handle+0x10>
        return SUCCESS;
    else
        return ERROR;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
}
     f5c:	08 95       	ret

00000f5e <dp_download_fan_direction_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : Issue and report type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_fan_direction_handle(const unsigned char value[], unsigned short length)
{
     f5e:	cf 93       	push	r28
    //Example: The current DP type isENUM
    unsigned char ret;
    unsigned char fan_direction;
    
    fan_direction = mcu_get_dp_download_enum(value,length);
     f60:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <mcu_get_dp_download_enum>
     f64:	c8 2f       	mov	r28, r24
    switch(fan_direction) {
     f66:	88 23       	and	r24, r24
     f68:	19 f0       	breq	.+6      	; 0xf70 <dp_download_fan_direction_handle+0x12>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	29 f0       	breq	.+10     	; 0xf78 <dp_download_fan_direction_handle+0x1a>
     f6e:	08 c0       	rjmp	.+16     	; 0xf80 <dp_download_fan_direction_handle+0x22>
        case 0:
		set_fan_direction(down);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
        break;
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <dp_download_fan_direction_handle+0x28>
        
        case 1:
		set_fan_direction(up);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
        break;
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <dp_download_fan_direction_handle+0x28>
        
        default:
		set_fan_direction(down);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 8b 00 	call	0x116	; 0x116 <set_fan_direction>
        break;
    }
    
    //There should be a report after processing the DP
    ret = mcu_dp_enum_update(DPID_FAN_DIRECTION, fan_direction);
     f86:	6c 2f       	mov	r22, r28
     f88:	86 e6       	ldi	r24, 0x66	; 102
     f8a:	0e 94 49 06 	call	0xc92	; 0xc92 <mcu_dp_enum_update>
    if(ret == SUCCESS)
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	09 f0       	breq	.+2      	; 0xf94 <dp_download_fan_direction_handle+0x36>
        return SUCCESS;
    else
        return ERROR;
     f92:	80 e0       	ldi	r24, 0x00	; 0
}
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <uart_transmit_output>:
 * @return Null
 */
void uart_transmit_output(unsigned char value)
{
    
	USART_0_write(value);
     f98:	0e 94 15 05 	call	0xa2a	; 0xa2a <USART_0_write>
     f9c:	08 95       	ret

00000f9e <all_data_update>:
 */
void all_data_update(void)
{ 
    //This code is automatically generated by the platform. 
    //Please modify each reportable and reportable function according to the actual data.
    mcu_dp_bool_update(DPID_SWITCH_FAN, get_fan_output()); //BOOL data report;
     f9e:	0e 94 88 00 	call	0x110	; 0x110 <get_fan_output>
     fa2:	68 2f       	mov	r22, r24
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
    //mcu_dp_value_update(DPID_COUNTDOWN_FAN,current Fan countdown); //VALUE type data report;
    mcu_dp_value_update(DPID_FAN_SPEED, get_fan_speed_percentage()); //VALUE type data report;
     faa:	0e 94 36 01 	call	0x26c	; 0x26c <get_fan_speed_percentage>
     fae:	48 2f       	mov	r20, r24
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	84 e0       	ldi	r24, 0x04	; 4
     fb8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <mcu_dp_value_update>
    mcu_dp_bool_update(DPID_SWITCH_LED,get_lamp_output()); //BOOL data report;
     fbc:	0e 94 82 00 	call	0x104	; 0x104 <get_lamp_output>
     fc0:	68 2f       	mov	r22, r24
     fc2:	85 e0       	ldi	r24, 0x05	; 5
     fc4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <mcu_dp_bool_update>
  //  mcu_dp_value_update(DPID_COUNTDOWN_1,current Fan light countdown); //VALUE type data report;
   // mcu_dp_enum_update(DPID_RELAY_STATUS,current Power-on state setting); //ENUM type data report;
   // mcu_dp_raw_update(DPID_CYCLE_TIMING,current Cycle Timing pointer,current Cycle Timing data length); //RAW type data report;
    mcu_dp_enum_update(DPID_FAN_DIRECTION,get_fan_direction()); //ENUM type data report;
     fc8:	0e 94 af 00 	call	0x15e	; 0x15e <get_fan_direction>
     fcc:	68 2f       	mov	r22, r24
     fce:	86 e6       	ldi	r24, 0x66	; 102
     fd0:	0e 94 49 06 	call	0xc92	; 0xc92 <mcu_dp_enum_update>
     fd4:	08 95       	ret

00000fd6 <dp_download_handle>:
 * -           0(ERROR): failure
 * -           1(SUCCESS): success
 * @note   The function user cannot modify
 */
unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
{
     fd6:	9b 01       	movw	r18, r22
    Current function processing can issue/report data calls                    
    Need to implement the data processing in the specific function
    The result of the processing needs to be fed back to the APP, otherwise the APP will consider the delivery failure.
    ***********************************/
    unsigned char ret;
    switch(dpid) {
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	29 f1       	breq	.+74     	; 0x1026 <dp_download_handle+0x50>
     fdc:	38 f4       	brcc	.+14     	; 0xfec <dp_download_handle+0x16>
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	b1 f0       	breq	.+44     	; 0x100e <dp_download_handle+0x38>
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	d1 f0       	breq	.+52     	; 0x101a <dp_download_handle+0x44>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	d9 f5       	brne	.+118    	; 0x1060 <dp_download_handle+0x8a>
     fea:	0b c0       	rjmp	.+22     	; 0x1002 <dp_download_handle+0x2c>
     fec:	8b 30       	cpi	r24, 0x0B	; 11
     fee:	39 f1       	breq	.+78     	; 0x103e <dp_download_handle+0x68>
     ff0:	18 f4       	brcc	.+6      	; 0xff8 <dp_download_handle+0x22>
     ff2:	87 30       	cpi	r24, 0x07	; 7
     ff4:	f1 f0       	breq	.+60     	; 0x1032 <dp_download_handle+0x5c>
     ff6:	34 c0       	rjmp	.+104    	; 0x1060 <dp_download_handle+0x8a>
     ff8:	85 36       	cpi	r24, 0x65	; 101
     ffa:	39 f1       	breq	.+78     	; 0x104a <dp_download_handle+0x74>
     ffc:	86 36       	cpi	r24, 0x66	; 102
     ffe:	59 f1       	breq	.+86     	; 0x1056 <dp_download_handle+0x80>
    1000:	2f c0       	rjmp	.+94     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_SWITCH_FAN:
            //Fan switchprocessing function
            ret = dp_download_switch_fan_handle(value,length);
    1002:	ba 01       	movw	r22, r20
    1004:	c9 01       	movw	r24, r18
    1006:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dp_download_switch_fan_handle>
    100a:	98 2f       	mov	r25, r24
        break;
    100c:	29 c0       	rjmp	.+82     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_COUNTDOWN_FAN:
            //Fan countdownprocessing function
            ret = dp_download_countdown_fan_handle(value,length);
    100e:	ba 01       	movw	r22, r20
    1010:	c9 01       	movw	r24, r18
    1012:	0e 94 54 07 	call	0xea8	; 0xea8 <dp_download_countdown_fan_handle>
    1016:	98 2f       	mov	r25, r24
        break;
    1018:	23 c0       	rjmp	.+70     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_FAN_SPEED:
            //Fan speedprocessing function
            ret = dp_download_fan_speed_handle(value,length);
    101a:	ba 01       	movw	r22, r20
    101c:	c9 01       	movw	r24, r18
    101e:	0e 94 6a 07 	call	0xed4	; 0xed4 <dp_download_fan_speed_handle>
    1022:	98 2f       	mov	r25, r24
        break;
    1024:	1d c0       	rjmp	.+58     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_SWITCH_LED:
            //Fan light switchprocessing function
            ret = dp_download_switch_led_handle(value,length);
    1026:	ba 01       	movw	r22, r20
    1028:	c9 01       	movw	r24, r18
    102a:	0e 94 86 07 	call	0xf0c	; 0xf0c <dp_download_switch_led_handle>
    102e:	98 2f       	mov	r25, r24
        break;
    1030:	17 c0       	rjmp	.+46     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_COUNTDOWN_1:
            //Fan light countdownprocessing function
            ret = dp_download_countdown_1_handle(value,length);
    1032:	ba 01       	movw	r22, r20
    1034:	c9 01       	movw	r24, r18
    1036:	0e 94 5f 07 	call	0xebe	; 0xebe <dp_download_countdown_1_handle>
    103a:	98 2f       	mov	r25, r24
        break;
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_RELAY_STATUS:
            //Power-on state settingprocessing function
            ret = dp_download_relay_status_handle(value,length);
    103e:	ba 01       	movw	r22, r20
    1040:	c9 01       	movw	r24, r18
    1042:	0e 94 9c 07 	call	0xf38	; 0xf38 <dp_download_relay_status_handle>
    1046:	98 2f       	mov	r25, r24
        break;
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_CYCLE_TIMING:
            //Cycle Timingprocessing function
            ret = dp_download_cycle_timing_handle(value,length);
    104a:	ba 01       	movw	r22, r20
    104c:	c9 01       	movw	r24, r18
    104e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <dp_download_cycle_timing_handle>
    1052:	98 2f       	mov	r25, r24
        break;
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <dp_download_handle+0x8a>
        case DPID_FAN_DIRECTION:
            //Fan Directionprocessing function
            ret = dp_download_fan_direction_handle(value,length);
    1056:	ba 01       	movw	r22, r20
    1058:	c9 01       	movw	r24, r18
    105a:	0e 94 af 07 	call	0xf5e	; 0xf5e <dp_download_fan_direction_handle>
    105e:	98 2f       	mov	r25, r24
        
        default:
        break;
    }
    return ret;
}
    1060:	89 2f       	mov	r24, r25
    1062:	08 95       	ret

00001064 <get_download_cmd_total>:
 * @note   The function user cannot modify
 */
unsigned char get_download_cmd_total(void)
{
    return(sizeof(download_cmd) / sizeof(download_cmd[0]));
}
    1064:	88 e0       	ldi	r24, 0x08	; 8
    1066:	08 95       	ret

00001068 <wifi_uart_write_data>:
 * @param[in] {in} Send buffer pointer
 * @param[in] {len} Data transmission length
 * @return Null
 */
static void wifi_uart_write_data(unsigned char *in, unsigned short len)
{
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    if((NULL == in) || (0 == len)) {
    1072:	89 2b       	or	r24, r25
    1074:	69 f0       	breq	.+26     	; 0x1090 <wifi_uart_write_data+0x28>
    1076:	61 15       	cp	r22, r1
    1078:	71 05       	cpc	r23, r1
    107a:	29 f4       	brne	.+10     	; 0x1086 <wifi_uart_write_data+0x1e>
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <wifi_uart_write_data+0x28>
        return;
    }
    
    while(len --) {
        uart_transmit_output(*in);
    107e:	89 91       	ld	r24, Y+
    1080:	0e 94 cc 07 	call	0xf98	; 0xf98 <uart_transmit_output>
{
    if((NULL == in) || (0 == len)) {
        return;
    }
    
    while(len --) {
    1084:	b8 01       	movw	r22, r16
    1086:	8b 01       	movw	r16, r22
    1088:	01 50       	subi	r16, 0x01	; 1
    108a:	11 09       	sbc	r17, r1
    108c:	67 2b       	or	r22, r23
    108e:	b9 f7       	brne	.-18     	; 0x107e <wifi_uart_write_data+0x16>
        uart_transmit_output(*in);
        in ++;
    }
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <get_dowmload_dpid_index>:
 * @brief  Get the serial number of the DPID in the array
 * @param[in] {dpid} dpid
 * @return dp number
 */
static unsigned char get_dowmload_dpid_index(unsigned char dpid)
{
    109a:	cf 93       	push	r28
    109c:	c8 2f       	mov	r28, r24
    unsigned char index;
    unsigned char total = get_download_cmd_total();
    109e:	0e 94 32 08 	call	0x1064	; 0x1064 <get_download_cmd_total>
    10a2:	28 2f       	mov	r18, r24
    
    for(index = 0; index < total; index ++) {
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <get_dowmload_dpid_index+0x22>
        if(download_cmd[index].dp_id == dpid) {
    10a8:	e8 2f       	mov	r30, r24
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	ee 51       	subi	r30, 0x1E	; 30
    10b2:	f6 45       	sbci	r31, 0x56	; 86
    10b4:	90 81       	ld	r25, Z
    10b6:	9c 17       	cp	r25, r28
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <get_dowmload_dpid_index+0x26>
static unsigned char get_dowmload_dpid_index(unsigned char dpid)
{
    unsigned char index;
    unsigned char total = get_download_cmd_total();
    
    for(index = 0; index < total; index ++) {
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	82 17       	cp	r24, r18
    10be:	a0 f3       	brcs	.-24     	; 0x10a8 <get_dowmload_dpid_index+0xe>
            break;
        }
    }
    
    return index;
}
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <data_point_handle>:
 * @brief  Delivery data processing
 * @param[in] {value} Send data source pointer
 * @return Return data processing result
 */
static unsigned char data_point_handle(const unsigned char value[])
{
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    unsigned char dp_id,index;
    unsigned char dp_type;
    unsigned char ret;
    unsigned short dp_len;
    
    dp_id = value[0];
    10d2:	f8 80       	ld	r15, Y
    dp_type = value[1];
    10d4:	e9 80       	ldd	r14, Y+1	; 0x01
    dp_len = value[2] * 0x100;
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	1a 81       	ldd	r17, Y+2	; 0x02
    dp_len += value[3];
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	08 0f       	add	r16, r24
    10de:	11 1d       	adc	r17, r1
    
    index = get_dowmload_dpid_index(dp_id);
    10e0:	8f 2d       	mov	r24, r15
    10e2:	0e 94 4d 08 	call	0x109a	; 0x109a <get_dowmload_dpid_index>

    if(dp_type != download_cmd[index].dp_type) {
    10e6:	e8 2f       	mov	r30, r24
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 51       	subi	r30, 0x1E	; 30
    10f0:	f6 45       	sbci	r31, 0x56	; 86
    10f2:	81 81       	ldd	r24, Z+1	; 0x01
    10f4:	e8 12       	cpse	r14, r24
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <data_point_handle+0x44>
        //Error message
        return FALSE;
    }else {
        ret = dp_download_handle(dp_id,value + 4,dp_len);
    10f8:	be 01       	movw	r22, r28
    10fa:	6c 5f       	subi	r22, 0xFC	; 252
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	a8 01       	movw	r20, r16
    1100:	8f 2d       	mov	r24, r15
    1102:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dp_download_handle>
    }
    
    return ret;
    1106:	01 c0       	rjmp	.+2      	; 0x110a <data_point_handle+0x46>
    
    index = get_dowmload_dpid_index(dp_id);

    if(dp_type != download_cmd[index].dp_type) {
        //Error message
        return FALSE;
    1108:	80 e0       	ldi	r24, 0x00	; 0
    }else {
        ret = dp_download_handle(dp_id,value + 4,dp_len);
    }
    
    return ret;
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <set_wifi_uart_byte>:
 * @param[in] {byte} Write byte value
 * @return UART send buffer ends write address
 */
unsigned short set_wifi_uart_byte(unsigned short dest, unsigned char byte)
{
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
    1118:	fc 01       	movw	r30, r24
    111a:	e2 5c       	subi	r30, 0xC2	; 194
    111c:	f6 4c       	sbci	r31, 0xC6	; 198
    
    *obj = byte;
    111e:	60 83       	st	Z, r22
    dest += 1;
    
    return dest;
}
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	08 95       	ret

00001124 <set_wifi_uart_buffer>:
 * @param[in] {src} source address
 * @param[in] {len} Data length
 * @return UART send buffer ends write address
 */
unsigned short set_wifi_uart_buffer(unsigned short dest, const unsigned char *src, unsigned short len)
{
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	8c 01       	movw	r16, r24
    112e:	ea 01       	movw	r28, r20
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
    
    my_memcpy(obj,src,len);
    1130:	82 5c       	subi	r24, 0xC2	; 194
    1132:	96 4c       	sbci	r25, 0xC6	; 198
    1134:	0e 94 6a 05 	call	0xad4	; 0xad4 <my_memcpy>
    
    dest += len;
    return dest;
}
    1138:	c8 01       	movw	r24, r16
    113a:	8c 0f       	add	r24, r28
    113c:	9d 1f       	adc	r25, r29
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <get_check_sum>:
 * @param[in] {pack} Data source pointer
 * @param[in] {pack_len} Need to calculate the length of the checksum data
 * @return checksum
 */
unsigned char get_check_sum(unsigned char *pack, unsigned short pack_len)
{
    1148:	fc 01       	movw	r30, r24
    unsigned short i;
    unsigned char check_sum = 0;
    114a:	80 e0       	ldi	r24, 0x00	; 0
    
    for(i = 0; i < pack_len; i ++) {
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	05 c0       	rjmp	.+10     	; 0x115c <get_check_sum+0x14>
        check_sum += *pack ++;
    1152:	90 81       	ld	r25, Z
    1154:	89 0f       	add	r24, r25
unsigned char get_check_sum(unsigned char *pack, unsigned short pack_len)
{
    unsigned short i;
    unsigned char check_sum = 0;
    
    for(i = 0; i < pack_len; i ++) {
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
        check_sum += *pack ++;
    115a:	31 96       	adiw	r30, 0x01	; 1
unsigned char get_check_sum(unsigned char *pack, unsigned short pack_len)
{
    unsigned short i;
    unsigned char check_sum = 0;
    
    for(i = 0; i < pack_len; i ++) {
    115c:	26 17       	cp	r18, r22
    115e:	37 07       	cpc	r19, r23
    1160:	c0 f3       	brcs	.-16     	; 0x1152 <get_check_sum+0xa>
        check_sum += *pack ++;
    }
    
    return check_sum;
}
    1162:	08 95       	ret

00001164 <wifi_uart_write_frame>:
 * @param[in] {fr_ver} Frame version
 * @param[in] {len} Data length
 * @return Null
 */
void wifi_uart_write_frame(unsigned char fr_type, unsigned char fr_ver, unsigned short len)
{
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    unsigned char check_sum = 0;
    
    wifi_uart_tx_buf[HEAD_FIRST] = 0x55;
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f9 e3       	ldi	r31, 0x39	; 57
    1170:	95 e5       	ldi	r25, 0x55	; 85
    1172:	90 83       	st	Z, r25
    wifi_uart_tx_buf[HEAD_SECOND] = 0xaa;
    1174:	9a ea       	ldi	r25, 0xAA	; 170
    1176:	91 83       	std	Z+1, r25	; 0x01
    wifi_uart_tx_buf[PROTOCOL_VERSION] = fr_ver;
    1178:	62 83       	std	Z+2, r22	; 0x02
    wifi_uart_tx_buf[FRAME_TYPE] = fr_type;
    117a:	83 83       	std	Z+3, r24	; 0x03
    wifi_uart_tx_buf[LENGTH_HIGH] = len >> 8;
    117c:	54 83       	std	Z+4, r21	; 0x04
    wifi_uart_tx_buf[LENGTH_LOW] = len & 0xff;
    117e:	45 83       	std	Z+5, r20	; 0x05
    
    len += PROTOCOL_HEAD;
    1180:	8a 01       	movw	r16, r20
    1182:	09 5f       	subi	r16, 0xF9	; 249
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    check_sum = get_check_sum((unsigned char *)wifi_uart_tx_buf, len - 1);
    1186:	ea 01       	movw	r28, r20
    1188:	26 96       	adiw	r28, 0x06	; 6
    118a:	be 01       	movw	r22, r28
    118c:	cf 01       	movw	r24, r30
    118e:	0e 94 a4 08 	call	0x1148	; 0x1148 <get_check_sum>
    wifi_uart_tx_buf[len - 1] = check_sum;
    1192:	c8 5c       	subi	r28, 0xC8	; 200
    1194:	d6 4c       	sbci	r29, 0xC6	; 198
    1196:	88 83       	st	Y, r24
    
    wifi_uart_write_data((unsigned char *)wifi_uart_tx_buf, len);
    1198:	b8 01       	movw	r22, r16
    119a:	88 e3       	ldi	r24, 0x38	; 56
    119c:	99 e3       	ldi	r25, 0x39	; 57
    119e:	0e 94 34 08 	call	0x1068	; 0x1068 <wifi_uart_write_data>
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <heat_beat_check>:
static void heat_beat_check(void)
{
    unsigned char length = 0;
    static unsigned char mcu_reset_state = FALSE;
    
    if(FALSE == mcu_reset_state) {
    11ac:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <mcu_reset_state.2084>
    11b0:	81 11       	cpse	r24, r1
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <heat_beat_check+0x1a>
        length = set_wifi_uart_byte(length, FALSE);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
        mcu_reset_state = TRUE;
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	90 93 91 38 	sts	0x3891, r25	; 0x803891 <mcu_reset_state.2084>
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <heat_beat_check+0x24>
    }else {
        length = set_wifi_uart_byte(length, TRUE);
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_wifi_uart_byte>
    }
    
    wifi_uart_write_frame(HEAT_BEAT_CMD, MCU_TX_VER, length);
    11d0:	48 2f       	mov	r20, r24
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	63 e0       	ldi	r22, 0x03	; 3
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
    11dc:	08 95       	ret

000011de <product_info_update>:
 * @brief  Product information upload
 * @param  Null
 * @return Null
 */
static void product_info_update(void)
{
    11de:	cf 93       	push	r28
    unsigned char length = 0;
    unsigned char str[10] = {0};
    
    length = set_wifi_uart_buffer(length, "{\"p\":\"", my_strlen("{\"p\":\""));
    11e0:	82 ef       	ldi	r24, 0xF2	; 242
    11e2:	99 ea       	ldi	r25, 0xA9	; 169
    11e4:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    11e8:	ab 01       	movw	r20, r22
    11ea:	62 ef       	ldi	r22, 0xF2	; 242
    11ec:	79 ea       	ldi	r23, 0xA9	; 169
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    11f6:	c8 2f       	mov	r28, r24
    length = set_wifi_uart_buffer(length,(unsigned char *)PRODUCT_KEY,my_strlen((unsigned char *)PRODUCT_KEY));
    11f8:	89 ef       	ldi	r24, 0xF9	; 249
    11fa:	99 ea       	ldi	r25, 0xA9	; 169
    11fc:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1200:	ab 01       	movw	r20, r22
    1202:	69 ef       	ldi	r22, 0xF9	; 249
    1204:	79 ea       	ldi	r23, 0xA9	; 169
    1206:	8c 2f       	mov	r24, r28
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    120e:	c8 2f       	mov	r28, r24
    length = set_wifi_uart_buffer(length, "\",\"v\":\"", my_strlen("\",\"v\":\""));
    1210:	8a e0       	ldi	r24, 0x0A	; 10
    1212:	9a ea       	ldi	r25, 0xAA	; 170
    1214:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1218:	ab 01       	movw	r20, r22
    121a:	6a e0       	ldi	r22, 0x0A	; 10
    121c:	7a ea       	ldi	r23, 0xAA	; 170
    121e:	8c 2f       	mov	r24, r28
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    1226:	c8 2f       	mov	r28, r24
    length = set_wifi_uart_buffer(length,(unsigned char *)MCU_VER,my_strlen((unsigned char *)MCU_VER));
    1228:	82 e1       	ldi	r24, 0x12	; 18
    122a:	9a ea       	ldi	r25, 0xAA	; 170
    122c:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1230:	ab 01       	movw	r20, r22
    1232:	62 e1       	ldi	r22, 0x12	; 18
    1234:	7a ea       	ldi	r23, 0xAA	; 170
    1236:	8c 2f       	mov	r24, r28
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    123e:	c8 2f       	mov	r28, r24
    length = set_wifi_uart_buffer(length, "\",\"m\":", my_strlen("\",\"m\":"));
    1240:	88 e1       	ldi	r24, 0x18	; 24
    1242:	9a ea       	ldi	r25, 0xAA	; 170
    1244:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1248:	ab 01       	movw	r20, r22
    124a:	68 e1       	ldi	r22, 0x18	; 24
    124c:	7a ea       	ldi	r23, 0xAA	; 170
    124e:	8c 2f       	mov	r24, r28
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    1256:	c8 2f       	mov	r28, r24
    length = set_wifi_uart_buffer(length, (unsigned char *)CONFIG_MODE, my_strlen((unsigned char *)CONFIG_MODE));
    1258:	8f e1       	ldi	r24, 0x1F	; 31
    125a:	9a ea       	ldi	r25, 0xAA	; 170
    125c:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1260:	ab 01       	movw	r20, r22
    1262:	6f e1       	ldi	r22, 0x1F	; 31
    1264:	7a ea       	ldi	r23, 0xAA	; 170
    1266:	8c 2f       	mov	r24, r28
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    126e:	c8 2f       	mov	r28, r24
#ifdef LONG_CONN_LOWPOWER
    sprintf((char *)str,",\"low\":%d",LONG_CONN_LOWPOWER);
    length = set_wifi_uart_buffer(length, str, my_strlen(str));
#endif
  
    length = set_wifi_uart_buffer(length, "}", my_strlen("}"));
    1270:	81 e2       	ldi	r24, 0x21	; 33
    1272:	9a ea       	ldi	r25, 0xAA	; 170
    1274:	0e 94 4c 05 	call	0xa98	; 0xa98 <my_strlen>
    1278:	ab 01       	movw	r20, r22
    127a:	61 e2       	ldi	r22, 0x21	; 33
    127c:	7a ea       	ldi	r23, 0xAA	; 170
    127e:	8c 2f       	mov	r24, r28
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 92 08 	call	0x1124	; 0x1124 <set_wifi_uart_buffer>
    
    wifi_uart_write_frame(PRODUCT_INFO_CMD, MCU_TX_VER, length);
    1286:	ac 01       	movw	r20, r24
    1288:	55 27       	eor	r21, r21
    128a:	63 e0       	ldi	r22, 0x03	; 3
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
}
    1292:	cf 91       	pop	r28
    1294:	08 95       	ret

00001296 <get_mcu_wifi_mode>:
    length = set_wifi_uart_byte(length, WF_RESERT_KEY);
#else                                                           
    //No need to process data
#endif
    
    wifi_uart_write_frame(WORK_MODE_CMD, MCU_TX_VER, length);
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
    12a2:	08 95       	ret

000012a4 <data_handle>:
 * @brief  Data frame processing
 * @param[in] {offset} Data start position
 * @return Null
 */
void data_handle(unsigned short offset)
{
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    unsigned short dp_len;
#endif
  
    unsigned char ret;
    unsigned short i,total_len;
    unsigned char cmd_type = wifi_data_process_buf[offset + FRAME_TYPE];
    12b4:	fc 01       	movw	r30, r24
    12b6:	e0 50       	subi	r30, 0x00	; 0
    12b8:	f7 4c       	sbci	r31, 0xC7	; 199
    12ba:	e0 81       	ld	r30, Z
    static unsigned short file_package_size = 0;                                //File packet size
    static unsigned char file_download_flag = 0;                                //File download flag
    unsigned int file_download_size = 0;
#endif

    switch(cmd_type)
    12bc:	4e 2f       	mov	r20, r30
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	49 30       	cpi	r20, 0x09	; 9
    12c2:	51 05       	cpc	r21, r1
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <data_handle+0x24>
    12c6:	54 c0       	rjmp	.+168    	; 0x1370 <data_handle+0xcc>
    12c8:	8c 01       	movw	r16, r24
    12ca:	fa 01       	movw	r30, r20
    12cc:	e2 5c       	subi	r30, 0xC2	; 194
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__tablejump2__>
    {
        case HEAT_BEAT_CMD:                                     //Heartbeat package
            heat_beat_check();
    12d4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <heat_beat_check>
        break;
    12d8:	4b c0       	rjmp	.+150    	; 0x1370 <data_handle+0xcc>
    
        case PRODUCT_INFO_CMD:                                  //Product information
            product_info_update();
    12da:	0e 94 ef 08 	call	0x11de	; 0x11de <product_info_update>
        break;
    12de:	48 c0       	rjmp	.+144    	; 0x1370 <data_handle+0xcc>
    
        case WORK_MODE_CMD:                                     //Query the module working mode set by the MCU
            get_mcu_wifi_mode();
    12e0:	0e 94 4b 09 	call	0x1296	; 0x1296 <get_mcu_wifi_mode>
        break;
    12e4:	45 c0       	rjmp	.+138    	; 0x1370 <data_handle+0xcc>
    
#ifndef WIFI_CONTROL_SELF_MODE
        case WIFI_STATE_CMD:                                    //Wifi working status
            wifi_work_state = wifi_data_process_buf[offset + DATA_START];
    12e6:	fc 01       	movw	r30, r24
    12e8:	ed 5f       	subi	r30, 0xFD	; 253
    12ea:	f6 4c       	sbci	r31, 0xC6	; 198
    12ec:	80 81       	ld	r24, Z
    12ee:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <wifi_work_state>
            wifi_uart_write_frame(WIFI_STATE_CMD, MCU_TX_VER, 0);
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	0e 94 b2 08 	call	0x1164	; 0x1164 <wifi_uart_write_frame>
            if(wifi_work_state == WIFI_CONNECTED && isWoSend == 0) { //When the WIFI connection is successful, open the weather data only once
                mcu_open_weather();
                isWoSend = 1;
            }
#endif
        break;
    12fe:	38 c0       	rjmp	.+112    	; 0x1370 <data_handle+0xcc>

        case WIFI_RESET_CMD:                                    //Reset wifi
            reset_wifi_flag = RESET_WIFI_SUCCESS;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 70 39 	sts	0x3970, r24	; 0x803970 <reset_wifi_flag>
        break;
    1306:	34 c0       	rjmp	.+104    	; 0x1370 <data_handle+0xcc>
    
        case WIFI_MODE_CMD:                                     //Select smartconfig/AP mode
            set_wifimode_flag = SET_WIFICONFIG_SUCCESS;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <set_wifimode_flag>
        break;
    130e:	30 c0       	rjmp	.+96     	; 0x1370 <data_handle+0xcc>
#endif
    
        case DATA_QUERT_CMD:                                    //Order send
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
    1310:	fc 01       	movw	r30, r24
    1312:	ef 5f       	subi	r30, 0xFF	; 255
    1314:	f6 4c       	sbci	r31, 0xC6	; 198
    1316:	e0 80       	ld	r14, Z
    1318:	f1 2c       	mov	r15, r1
    131a:	fe 2c       	mov	r15, r14
    131c:	ee 24       	eor	r14, r14
    131e:	fc 01       	movw	r30, r24
    1320:	ee 5f       	subi	r30, 0xFE	; 254
    1322:	f6 4c       	sbci	r31, 0xC6	; 198
    1324:	80 81       	ld	r24, Z
    1326:	e8 2a       	or	r14, r24
    
            for(i = 0;i < total_len; ) {
    1328:	c1 2c       	mov	r12, r1
    132a:	d1 2c       	mov	r13, r1
    132c:	1b c0       	rjmp	.+54     	; 0x1364 <data_handle+0xc0>
                dp_len = wifi_data_process_buf[offset + DATA_START + i + 2] * 0x100;
    132e:	c6 01       	movw	r24, r12
    1330:	80 0f       	add	r24, r16
    1332:	91 1f       	adc	r25, r17
    1334:	fc 01       	movw	r30, r24
    1336:	eb 5f       	subi	r30, 0xFB	; 251
    1338:	f6 4c       	sbci	r31, 0xC6	; 198
    133a:	40 81       	ld	r20, Z
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	34 2f       	mov	r19, r20
                dp_len += wifi_data_process_buf[offset + DATA_START + i + 3];
    1340:	fc 01       	movw	r30, r24
    1342:	ea 5f       	subi	r30, 0xFA	; 250
    1344:	f6 4c       	sbci	r31, 0xC6	; 198
    1346:	40 81       	ld	r20, Z
    1348:	e9 01       	movw	r28, r18
    134a:	c4 0f       	add	r28, r20
    134c:	d1 1d       	adc	r29, r1
                //
                ret = data_point_handle((unsigned char *)wifi_data_process_buf + offset + DATA_START + i);
    134e:	8d 5f       	subi	r24, 0xFD	; 253
    1350:	96 4c       	sbci	r25, 0xC6	; 198
    1352:	0e 94 62 08 	call	0x10c4	; 0x10c4 <data_point_handle>
                    //Send success
                }else {
                    //Send fault
                }
      
                i += (dp_len + 4);
    1356:	96 01       	movw	r18, r12
    1358:	2c 0f       	add	r18, r28
    135a:	3d 1f       	adc	r19, r29
    135c:	69 01       	movw	r12, r18
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	c8 0e       	add	r12, r24
    1362:	d1 1c       	adc	r13, r1
#endif
    
        case DATA_QUERT_CMD:                                    //Order send
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
    
            for(i = 0;i < total_len; ) {
    1364:	ce 14       	cp	r12, r14
    1366:	df 04       	cpc	r13, r15
    1368:	10 f3       	brcs	.-60     	; 0x132e <data_handle+0x8a>
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <data_handle+0xcc>
                i += (dp_len + 4);
            }
        break;
    
        case STATE_QUERY_CMD:                                   //Status query
            all_data_update();                               
    136c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <all_data_update>
#endif
        

        default:break;
    }
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <with_data_rxbuff>:
 * @param  Null
 * @return Is there data
 */
unsigned char with_data_rxbuff(void)
{
    if(rx_buf_in != rx_buf_out)
    1382:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <rx_buf_in>
    1386:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <rx_buf_in+0x1>
    138a:	80 91 36 39 	lds	r24, 0x3936	; 0x803936 <rx_buf_out>
    138e:	90 91 37 39 	lds	r25, 0x3937	; 0x803937 <rx_buf_out+0x1>
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	11 f0       	breq	.+4      	; 0x139c <with_data_rxbuff+0x1a>
        return 1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	08 95       	ret
    else
        return 0;
    139c:	80 e0       	ldi	r24, 0x00	; 0
}
    139e:	08 95       	ret

000013a0 <take_byte_rxbuff>:
 */
unsigned char take_byte_rxbuff(void)
{
    unsigned char value;
    
    if(rx_buf_out != rx_buf_in) {
    13a0:	20 91 36 39 	lds	r18, 0x3936	; 0x803936 <rx_buf_out>
    13a4:	30 91 37 39 	lds	r19, 0x3937	; 0x803937 <rx_buf_out+0x1>
    13a8:	40 91 1d 39 	lds	r20, 0x391D	; 0x80391d <rx_buf_in>
    13ac:	50 91 1e 39 	lds	r21, 0x391E	; 0x80391e <rx_buf_in+0x1>
    13b0:	24 17       	cp	r18, r20
    13b2:	35 07       	cpc	r19, r21
    13b4:	a1 f0       	breq	.+40     	; 0x13de <take_byte_rxbuff+0x3e>
        //With data
        if(rx_buf_out >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
    13b6:	26 53       	subi	r18, 0x36	; 54
    13b8:	39 43       	sbci	r19, 0x39	; 57
    13ba:	30 f0       	brcs	.+12     	; 0x13c8 <take_byte_rxbuff+0x28>
            //The data has reached the end
            rx_buf_out = (unsigned char *)(wifi_uart_rx_buf);
    13bc:	8f e1       	ldi	r24, 0x1F	; 31
    13be:	99 e3       	ldi	r25, 0x39	; 57
    13c0:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <rx_buf_out>
    13c4:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <rx_buf_out+0x1>
        }
        
        value = *rx_buf_out ++;   
    13c8:	e0 91 36 39 	lds	r30, 0x3936	; 0x803936 <rx_buf_out>
    13cc:	f0 91 37 39 	lds	r31, 0x3937	; 0x803937 <rx_buf_out+0x1>
    13d0:	cf 01       	movw	r24, r30
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <rx_buf_out>
    13d8:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <rx_buf_out+0x1>
    13dc:	80 81       	ld	r24, Z
    }
    
    return value;
}
    13de:	08 95       	ret

000013e0 <triac_driver_tick>:
}


uint8_t triac_get_angle(){
	return driver_config.trigger_angle;
}
    13e0:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <driver_started>
    13e4:	88 23       	and	r24, r24
    13e6:	09 f4       	brne	.+2      	; 0x13ea <triac_driver_tick+0xa>
    13e8:	03 c1       	rjmp	.+518    	; 0x15f0 <triac_driver_tick+0x210>
    13ea:	80 91 9f 38 	lds	r24, 0x389F	; 0x80389f <driver_config+0x5>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <triac_driver_tick+0x14>
    13f2:	eb c0       	rjmp	.+470    	; 0x15ca <triac_driver_tick+0x1ea>
    13f4:	90 91 9e 38 	lds	r25, 0x389E	; 0x80389e <driver_config+0x4>
    13f8:	9a 30       	cpi	r25, 0x0A	; 10
    13fa:	08 f4       	brcc	.+2      	; 0x13fe <triac_driver_tick+0x1e>
    13fc:	e6 c0       	rjmp	.+460    	; 0x15ca <triac_driver_tick+0x1ea>
    13fe:	e0 91 9a 38 	lds	r30, 0x389A	; 0x80389a <driver_config>
    1402:	f0 91 9b 38 	lds	r31, 0x389B	; 0x80389b <driver_config+0x1>
    1406:	09 95       	icall
    1408:	81 11       	cpse	r24, r1
    140a:	07 c0       	rjmp	.+14     	; 0x141a <triac_driver_tick+0x3a>
    140c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <flag_zero_sync.3820>
    1410:	81 11       	cpse	r24, r1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <triac_driver_tick+0x3a>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <flag_zero_sync.3820>
    141a:	e0 91 9a 38 	lds	r30, 0x389A	; 0x80389a <driver_config>
    141e:	f0 91 9b 38 	lds	r31, 0x389B	; 0x80389b <driver_config+0x1>
    1422:	09 95       	icall
    1424:	81 11       	cpse	r24, r1
    1426:	64 c0       	rjmp	.+200    	; 0x14f0 <triac_driver_tick+0x110>
    1428:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <flag_zero_sync.3820>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <triac_driver_tick+0x52>
    1430:	5f c0       	rjmp	.+190    	; 0x14f0 <triac_driver_tick+0x110>
    1432:	10 92 98 38 	sts	0x3898, r1	; 0x803898 <flag_zero_high.3822>
    1436:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <flag_zero_low.3821>
    143a:	81 11       	cpse	r24, r1
    143c:	24 c0       	rjmp	.+72     	; 0x1486 <triac_driver_tick+0xa6>
    143e:	60 91 9e 38 	lds	r22, 0x389E	; 0x80389e <driver_config+0x4>
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__floatsisf>
    144c:	2c ea       	ldi	r18, 0xAC	; 172
    144e:	3a ea       	ldi	r19, 0xAA	; 170
    1450:	46 ea       	ldi	r20, 0xA6	; 166
    1452:	52 e4       	ldi	r21, 0x42	; 66
    1454:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__mulsf3>
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	44 e3       	ldi	r20, 0x34	; 52
    145e:	53 e4       	ldi	r21, 0x43	; 67
    1460:	0e 94 4d 13 	call	0x269a	; 0x269a <__divsf3>
    1464:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1468:	60 93 95 38 	sts	0x3895, r22	; 0x803895 <cnt_angle.3824>
    146c:	70 93 96 38 	sts	0x3896, r23	; 0x803896 <cnt_angle.3824+0x1>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <flag_zero_low.3821>
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <cnt_triac.3825>
    147e:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <cnt_triac.3825+0x1>
    1482:	10 92 92 38 	sts	0x3892, r1	; 0x803892 <flag_triac_off.3823>
    1486:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <cnt_angle.3824>
    148a:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <cnt_angle.3824+0x1>
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	29 f0       	breq	.+10     	; 0x149c <triac_driver_tick+0xbc>
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <cnt_angle.3824>
    1498:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <cnt_angle.3824+0x1>
    149c:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <cnt_angle.3824>
    14a0:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <cnt_angle.3824+0x1>
    14a4:	89 2b       	or	r24, r25
    14a6:	21 f5       	brne	.+72     	; 0x14f0 <triac_driver_tick+0x110>
    14a8:	80 91 92 38 	lds	r24, 0x3892	; 0x803892 <flag_triac_off.3823>
    14ac:	81 11       	cpse	r24, r1
    14ae:	20 c0       	rjmp	.+64     	; 0x14f0 <triac_driver_tick+0x110>
    14b0:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    14b4:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	09 95       	icall
    14bc:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <cnt_triac.3825>
    14c0:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <cnt_triac.3825+0x1>
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <triac_driver_tick+0xf2>
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <cnt_triac.3825>
    14ce:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <cnt_triac.3825+0x1>
    14d2:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <cnt_triac.3825>
    14d6:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <cnt_triac.3825+0x1>
    14da:	89 2b       	or	r24, r25
    14dc:	49 f4       	brne	.+18     	; 0x14f0 <triac_driver_tick+0x110>
    14de:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    14e2:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	09 95       	icall
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <flag_triac_off.3823>
    14f0:	e0 91 9a 38 	lds	r30, 0x389A	; 0x80389a <driver_config>
    14f4:	f0 91 9b 38 	lds	r31, 0x389B	; 0x80389b <driver_config+0x1>
    14f8:	09 95       	icall
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <triac_driver_tick+0x120>
    14fe:	78 c0       	rjmp	.+240    	; 0x15f0 <triac_driver_tick+0x210>
    1500:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <flag_zero_sync.3820>
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <triac_driver_tick+0x12a>
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <triac_driver_tick+0x210>
    150a:	10 92 97 38 	sts	0x3897, r1	; 0x803897 <flag_zero_low.3821>
    150e:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <flag_zero_high.3822>
    1512:	81 11       	cpse	r24, r1
    1514:	24 c0       	rjmp	.+72     	; 0x155e <triac_driver_tick+0x17e>
    1516:	60 91 9e 38 	lds	r22, 0x389E	; 0x80389e <driver_config+0x4>
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__floatsisf>
    1524:	2c ea       	ldi	r18, 0xAC	; 172
    1526:	3a ea       	ldi	r19, 0xAA	; 170
    1528:	46 ea       	ldi	r20, 0xA6	; 166
    152a:	52 e4       	ldi	r21, 0x42	; 66
    152c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__mulsf3>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	44 e3       	ldi	r20, 0x34	; 52
    1536:	53 e4       	ldi	r21, 0x43	; 67
    1538:	0e 94 4d 13 	call	0x269a	; 0x269a <__divsf3>
    153c:	0e 94 bf 13 	call	0x277e	; 0x277e <__fixunssfsi>
    1540:	60 93 95 38 	sts	0x3895, r22	; 0x803895 <cnt_angle.3824>
    1544:	70 93 96 38 	sts	0x3896, r23	; 0x803896 <cnt_angle.3824+0x1>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <flag_zero_high.3822>
    154e:	85 e0       	ldi	r24, 0x05	; 5
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <cnt_triac.3825>
    1556:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <cnt_triac.3825+0x1>
    155a:	10 92 92 38 	sts	0x3892, r1	; 0x803892 <flag_triac_off.3823>
    155e:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <cnt_angle.3824>
    1562:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <cnt_angle.3824+0x1>
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	29 f0       	breq	.+10     	; 0x1574 <triac_driver_tick+0x194>
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <cnt_angle.3824>
    1570:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <cnt_angle.3824+0x1>
    1574:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <cnt_angle.3824>
    1578:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <cnt_angle.3824+0x1>
    157c:	89 2b       	or	r24, r25
    157e:	c1 f5       	brne	.+112    	; 0x15f0 <triac_driver_tick+0x210>
    1580:	80 91 92 38 	lds	r24, 0x3892	; 0x803892 <flag_triac_off.3823>
    1584:	81 11       	cpse	r24, r1
    1586:	34 c0       	rjmp	.+104    	; 0x15f0 <triac_driver_tick+0x210>
    1588:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    158c:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	09 95       	icall
    1594:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <cnt_triac.3825>
    1598:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <cnt_triac.3825+0x1>
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	29 f0       	breq	.+10     	; 0x15aa <triac_driver_tick+0x1ca>
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <cnt_triac.3825>
    15a6:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <cnt_triac.3825+0x1>
    15aa:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <cnt_triac.3825>
    15ae:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <cnt_triac.3825+0x1>
    15b2:	89 2b       	or	r24, r25
    15b4:	e9 f4       	brne	.+58     	; 0x15f0 <triac_driver_tick+0x210>
    15b6:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    15ba:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	09 95       	icall
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <flag_triac_off.3823>
    15c8:	08 95       	ret
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	59 f4       	brne	.+22     	; 0x15e4 <triac_driver_tick+0x204>
    15ce:	80 91 9e 38 	lds	r24, 0x389E	; 0x80389e <driver_config+0x4>
    15d2:	8a 30       	cpi	r24, 0x0A	; 10
    15d4:	38 f4       	brcc	.+14     	; 0x15e4 <triac_driver_tick+0x204>
    15d6:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    15da:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	09 95       	icall
    15e2:	08 95       	ret
    15e4:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <driver_config+0x2>
    15e8:	f0 91 9d 38 	lds	r31, 0x389D	; 0x80389d <driver_config+0x3>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	09 95       	icall
    15f0:	08 95       	ret

000015f2 <triac_driver_init>:
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	26 97       	sbiw	r28, 0x06	; 6
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	49 83       	std	Y+1, r20	; 0x01
    1602:	5a 83       	std	Y+2, r21	; 0x02
    1604:	6b 83       	std	Y+3, r22	; 0x03
    1606:	7c 83       	std	Y+4, r23	; 0x04
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	86 e0       	ldi	r24, 0x06	; 6
    160e:	fe 01       	movw	r30, r28
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	aa e9       	ldi	r26, 0x9A	; 154
    1614:	b8 e3       	ldi	r27, 0x38	; 56
    1616:	01 90       	ld	r0, Z+
    1618:	0d 92       	st	X+, r0
    161a:	8a 95       	dec	r24
    161c:	e1 f7       	brne	.-8      	; 0x1616 <triac_driver_init+0x24>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <driver_started>
    1624:	26 96       	adiw	r28, 0x06	; 6
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <triac_set_angle>:
    1630:	87 39       	cpi	r24, 0x97	; 151
    1632:	08 f0       	brcs	.+2      	; 0x1636 <triac_set_angle+0x6>
    1634:	86 e9       	ldi	r24, 0x96	; 150
    1636:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <driver_config+0x4>
    163a:	08 95       	ret

0000163c <triac_set_output_state>:


void triac_set_output_state(output_state state) {
	driver_config.triac_state = state;		
    163c:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <driver_config+0x5>
    1640:	08 95       	ret

00001642 <triac_get_output_state>:
}

output_state triac_get_output_state(){
	return driver_config.triac_state;
}
    1642:	80 91 9f 38 	lds	r24, 0x389F	; 0x80389f <driver_config+0x5>
    1646:	08 95       	ret

00001648 <check_for_aks_block>:
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	ae 81       	ldd	r26, Y+6	; 0x06
    165a:	bf 81       	ldd	r27, Y+7	; 0x07
    165c:	eb 01       	movw	r28, r22
    165e:	cc 0f       	add	r28, r28
    1660:	dd 1f       	adc	r29, r29
    1662:	c6 0f       	add	r28, r22
    1664:	d7 1f       	adc	r29, r23
    1666:	ca 0f       	add	r28, r26
    1668:	db 1f       	adc	r29, r27
    166a:	fa 80       	ldd	r15, Y+2	; 0x02
    166c:	fc 01       	movw	r30, r24
    166e:	44 81       	ldd	r20, Z+4	; 0x04
    1670:	55 81       	ldd	r21, Z+5	; 0x05
    1672:	e6 e0       	ldi	r30, 0x06	; 6
    1674:	e6 9f       	mul	r30, r22
    1676:	90 01       	movw	r18, r0
    1678:	e7 9f       	mul	r30, r23
    167a:	30 0d       	add	r19, r0
    167c:	11 24       	eor	r1, r1
    167e:	8a 01       	movw	r16, r20
    1680:	02 0f       	add	r16, r18
    1682:	13 1f       	adc	r17, r19
    1684:	f8 01       	movw	r30, r16
    1686:	22 81       	ldd	r18, Z+2	; 0x02
    1688:	33 81       	ldd	r19, Z+3	; 0x03
    168a:	f9 01       	movw	r30, r18
    168c:	21 81       	ldd	r18, Z+1	; 0x01
    168e:	32 81       	ldd	r19, Z+2	; 0x02
    1690:	f8 01       	movw	r30, r16
    1692:	04 81       	ldd	r16, Z+4	; 0x04
    1694:	15 81       	ldd	r17, Z+5	; 0x05
    1696:	20 1b       	sub	r18, r16
    1698:	31 0b       	sbc	r19, r17
    169a:	e8 81       	ld	r30, Y
    169c:	2e 1b       	sub	r18, r30
    169e:	31 09       	sbc	r19, r1
    16a0:	ec 01       	movw	r28, r24
    16a2:	ea 81       	ldd	r30, Y+2	; 0x02
    16a4:	fb 81       	ldd	r31, Y+3	; 0x03
    16a6:	00 81       	ld	r16, Z
    16a8:	11 81       	ldd	r17, Z+1	; 0x01
    16aa:	fa 01       	movw	r30, r20
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	40 17       	cp	r20, r16
    16b2:	51 07       	cpc	r21, r17
    16b4:	39 f1       	breq	.+78     	; 0x1704 <check_for_aks_block+0xbc>
    16b6:	46 17       	cp	r20, r22
    16b8:	57 07       	cpc	r21, r23
    16ba:	f9 f0       	breq	.+62     	; 0x16fa <check_for_aks_block+0xb2>
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	8c 91       	ld	r24, X
    16c0:	12 97       	sbiw	r26, 0x02	; 2
    16c2:	f8 12       	cpse	r15, r24
    16c4:	1a c0       	rjmp	.+52     	; 0x16fa <check_for_aks_block+0xb2>
    16c6:	80 81       	ld	r24, Z
    16c8:	85 58       	subi	r24, 0x85	; 133
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	e8 f0       	brcs	.+58     	; 0x1708 <check_for_aks_block+0xc0>
    16ce:	c4 80       	ldd	r12, Z+4	; 0x04
    16d0:	d5 80       	ldd	r13, Z+5	; 0x05
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	ec 01       	movw	r28, r24
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	c8 16       	cp	r12, r24
    16de:	d9 06       	cpc	r13, r25
    16e0:	60 f4       	brcc	.+24     	; 0x16fa <check_for_aks_block+0xb2>
    16e2:	8c 19       	sub	r24, r12
    16e4:	9d 09       	sbc	r25, r13
    16e6:	cc 91       	ld	r28, X
    16e8:	d0 e0       	ldi	r29, 0x00	; 0
    16ea:	c8 17       	cp	r28, r24
    16ec:	d9 07       	cpc	r29, r25
    16ee:	28 f4       	brcc	.+10     	; 0x16fa <check_for_aks_block+0xb2>
    16f0:	8c 1b       	sub	r24, r28
    16f2:	9d 0b       	sbc	r25, r29
    16f4:	28 17       	cp	r18, r24
    16f6:	39 07       	cpc	r19, r25
    16f8:	38 f0       	brcs	.+14     	; 0x1708 <check_for_aks_block+0xc0>
    16fa:	4f 5f       	subi	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	13 96       	adiw	r26, 0x03	; 3
    1700:	36 96       	adiw	r30, 0x06	; 6
    1702:	d6 cf       	rjmp	.-84     	; 0x16b0 <check_for_aks_block+0x68>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	01 c0       	rjmp	.+2      	; 0x170a <check_for_aks_block+0xc2>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	08 95       	ret

0000171a <qtm_update_qtlib_timer>:
    171a:	20 91 a1 38 	lds	r18, 0x38A1	; 0x8038a1 <qtm_local_ms_timecount>
    171e:	30 91 a2 38 	lds	r19, 0x38A2	; 0x8038a2 <qtm_local_ms_timecount+0x1>
    1722:	82 0f       	add	r24, r18
    1724:	93 1f       	adc	r25, r19
    1726:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <qtm_local_ms_timecount>
    172a:	90 93 a2 38 	sts	0x38A2, r25	; 0x8038a2 <qtm_local_ms_timecount+0x1>
    172e:	08 95       	ret

00001730 <qtm_init_sensor_key>:
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	d9 f0       	breq	.+54     	; 0x176a <qtm_init_sensor_key+0x3a>
    1734:	41 15       	cp	r20, r1
    1736:	51 05       	cpc	r21, r1
    1738:	c1 f0       	breq	.+48     	; 0x176a <qtm_init_sensor_key+0x3a>
    173a:	26 e0       	ldi	r18, 0x06	; 6
    173c:	62 9f       	mul	r22, r18
    173e:	b0 01       	movw	r22, r0
    1740:	11 24       	eor	r1, r1
    1742:	dc 01       	movw	r26, r24
    1744:	14 96       	adiw	r26, 0x04	; 4
    1746:	ed 91       	ld	r30, X+
    1748:	fc 91       	ld	r31, X
    174a:	15 97       	sbiw	r26, 0x05	; 5
    174c:	e6 0f       	add	r30, r22
    174e:	f7 1f       	adc	r31, r23
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	20 83       	st	Z, r18
    1754:	14 96       	adiw	r26, 0x04	; 4
    1756:	8d 91       	ld	r24, X+
    1758:	9c 91       	ld	r25, X
    175a:	15 97       	sbiw	r26, 0x05	; 5
    175c:	fc 01       	movw	r30, r24
    175e:	e6 0f       	add	r30, r22
    1760:	f7 1f       	adc	r31, r23
    1762:	42 83       	std	Z+2, r20	; 0x02
    1764:	53 83       	std	Z+3, r21	; 0x03
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret
    176a:	8b e0       	ldi	r24, 0x0B	; 11
    176c:	08 95       	ret

0000176e <qtm_key_sensors_process>:
    176e:	2f 92       	push	r2
    1770:	3f 92       	push	r3
    1772:	4f 92       	push	r4
    1774:	5f 92       	push	r5
    1776:	6f 92       	push	r6
    1778:	7f 92       	push	r7
    177a:	8f 92       	push	r8
    177c:	9f 92       	push	r9
    177e:	af 92       	push	r10
    1780:	bf 92       	push	r11
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	09 f4       	brne	.+2      	; 0x1798 <qtm_key_sensors_process+0x2a>
    1796:	7e c3       	rjmp	.+1788   	; 0x1e94 <qtm_key_sensors_process+0x726>
    1798:	ec 01       	movw	r28, r24
    179a:	a1 2c       	mov	r10, r1
    179c:	b1 2c       	mov	r11, r1
    179e:	81 2c       	mov	r8, r1
    17a0:	91 2c       	mov	r9, r1
    17a2:	21 2c       	mov	r2, r1
    17a4:	d1 2c       	mov	r13, r1
    17a6:	55 24       	eor	r5, r5
    17a8:	53 94       	inc	r5
    17aa:	33 e0       	ldi	r19, 0x03	; 3
    17ac:	c3 2e       	mov	r12, r19
    17ae:	45 e8       	ldi	r20, 0x85	; 133
    17b0:	64 2e       	mov	r6, r20
    17b2:	56 e8       	ldi	r21, 0x86	; 134
    17b4:	75 2e       	mov	r7, r21
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	36 2e       	mov	r3, r22
    17ba:	78 e0       	ldi	r23, 0x08	; 8
    17bc:	47 2e       	mov	r4, r23
    17be:	ea 81       	ldd	r30, Y+2	; 0x02
    17c0:	fb 81       	ldd	r31, Y+3	; 0x03
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	88 16       	cp	r8, r24
    17c8:	99 06       	cpc	r9, r25
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <qtm_key_sensors_process+0x60>
    17cc:	a6 c1       	rjmp	.+844    	; 0x1b1a <qtm_key_sensors_process+0x3ac>
    17ce:	75 01       	movw	r14, r10
    17d0:	ee 0c       	add	r14, r14
    17d2:	ff 1c       	adc	r15, r15
    17d4:	ec 81       	ldd	r30, Y+4	; 0x04
    17d6:	fd 81       	ldd	r31, Y+5	; 0x05
    17d8:	ee 0d       	add	r30, r14
    17da:	ff 1d       	adc	r31, r15
    17dc:	a2 81       	ldd	r26, Z+2	; 0x02
    17de:	b3 81       	ldd	r27, Z+3	; 0x03
    17e0:	9c 91       	ld	r25, X
    17e2:	9e 71       	andi	r25, 0x1E	; 30
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <qtm_key_sensors_process+0x7a>
    17e6:	50 82       	st	Z, r5
    17e8:	0c 81       	ldd	r16, Y+4	; 0x04
    17ea:	1d 81       	ldd	r17, Y+5	; 0x05
    17ec:	0e 0d       	add	r16, r14
    17ee:	1f 1d       	adc	r17, r15
    17f0:	d8 01       	movw	r26, r16
    17f2:	8c 91       	ld	r24, X
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	09 f4       	brne	.+2      	; 0x17fa <qtm_key_sensors_process+0x8c>
    17f8:	9e c0       	rjmp	.+316    	; 0x1936 <qtm_key_sensors_process+0x1c8>
    17fa:	38 f4       	brcc	.+14     	; 0x180a <qtm_key_sensors_process+0x9c>
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	d1 f0       	breq	.+52     	; 0x1834 <qtm_key_sensors_process+0xc6>
    1800:	08 f0       	brcs	.+2      	; 0x1804 <qtm_key_sensors_process+0x96>
    1802:	45 c0       	rjmp	.+138    	; 0x188e <qtm_key_sensors_process+0x120>
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	59 f0       	breq	.+22     	; 0x181e <qtm_key_sensors_process+0xb0>
    1808:	81 c1       	rjmp	.+770    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    180a:	85 38       	cpi	r24, 0x85	; 133
    180c:	09 f4       	brne	.+2      	; 0x1810 <qtm_key_sensors_process+0xa2>
    180e:	bf c0       	rjmp	.+382    	; 0x198e <qtm_key_sensors_process+0x220>
    1810:	86 38       	cpi	r24, 0x86	; 134
    1812:	09 f4       	brne	.+2      	; 0x1816 <qtm_key_sensors_process+0xa8>
    1814:	f5 c0       	rjmp	.+490    	; 0x1a00 <qtm_key_sensors_process+0x292>
    1816:	87 30       	cpi	r24, 0x07	; 7
    1818:	09 f0       	breq	.+2      	; 0x181c <qtm_key_sensors_process+0xae>
    181a:	78 c1       	rjmp	.+752    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    181c:	36 c1       	rjmp	.+620    	; 0x1a8a <qtm_key_sensors_process+0x31c>
    181e:	91 11       	cpse	r25, r1
    1820:	67 c1       	rjmp	.+718    	; 0x1af0 <qtm_key_sensors_process+0x382>
    1822:	f8 01       	movw	r30, r16
    1824:	30 82       	st	Z, r3
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	fc 01       	movw	r30, r24
    182c:	ee 0d       	add	r30, r14
    182e:	ff 1d       	adc	r31, r15
    1830:	41 82       	std	Z+1, r4	; 0x01
    1832:	5e c1       	rjmp	.+700    	; 0x1af0 <qtm_key_sensors_process+0x382>
    1834:	d8 01       	movw	r26, r16
    1836:	11 96       	adiw	r26, 0x01	; 1
    1838:	2c 91       	ld	r18, X
    183a:	11 97       	sbiw	r26, 0x01	; 1
    183c:	22 23       	and	r18, r18
    183e:	29 f1       	breq	.+74     	; 0x188a <qtm_key_sensors_process+0x11c>
    1840:	12 96       	adiw	r26, 0x02	; 2
    1842:	ed 91       	ld	r30, X+
    1844:	fc 91       	ld	r31, X
    1846:	13 97       	sbiw	r26, 0x03	; 3
    1848:	25 30       	cpi	r18, 0x05	; 5
    184a:	18 f0       	brcs	.+6      	; 0x1852 <qtm_key_sensors_process+0xe4>
    184c:	81 81       	ldd	r24, Z+1	; 0x01
    184e:	92 81       	ldd	r25, Z+2	; 0x02
    1850:	0e c0       	rjmp	.+28     	; 0x186e <qtm_key_sensors_process+0x100>
    1852:	d8 01       	movw	r26, r16
    1854:	14 96       	adiw	r26, 0x04	; 4
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	15 97       	sbiw	r26, 0x05	; 5
    185c:	41 81       	ldd	r20, Z+1	; 0x01
    185e:	52 81       	ldd	r21, Z+2	; 0x02
    1860:	84 17       	cp	r24, r20
    1862:	95 07       	cpc	r25, r21
    1864:	69 f0       	breq	.+26     	; 0x1880 <qtm_key_sensors_process+0x112>
    1866:	48 17       	cp	r20, r24
    1868:	59 07       	cpc	r21, r25
    186a:	30 f4       	brcc	.+12     	; 0x1878 <qtm_key_sensors_process+0x10a>
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	8d 93       	st	X+, r24
    1872:	9c 93       	st	X, r25
    1874:	15 97       	sbiw	r26, 0x05	; 5
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <qtm_key_sensors_process+0x112>
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	f8 01       	movw	r30, r16
    187c:	84 83       	std	Z+4, r24	; 0x04
    187e:	95 83       	std	Z+5, r25	; 0x05
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	d8 01       	movw	r26, r16
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	2c 93       	st	X, r18
    1888:	33 c1       	rjmp	.+614    	; 0x1af0 <qtm_key_sensors_process+0x382>
    188a:	f8 01       	movw	r30, r16
    188c:	2d c1       	rjmp	.+602    	; 0x1ae8 <qtm_key_sensors_process+0x37a>
    188e:	d8 01       	movw	r26, r16
    1890:	14 96       	adiw	r26, 0x04	; 4
    1892:	2d 91       	ld	r18, X+
    1894:	3c 91       	ld	r19, X
    1896:	15 97       	sbiw	r26, 0x05	; 5
    1898:	12 96       	adiw	r26, 0x02	; 2
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	13 97       	sbiw	r26, 0x03	; 3
    18a0:	41 81       	ldd	r20, Z+1	; 0x01
    18a2:	52 81       	ldd	r21, Z+2	; 0x02
    18a4:	24 17       	cp	r18, r20
    18a6:	35 07       	cpc	r19, r21
    18a8:	09 f4       	brne	.+2      	; 0x18ac <qtm_key_sensors_process+0x13e>
    18aa:	30 c1       	rjmp	.+608    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	9f 81       	ldd	r25, Y+7	; 0x07
    18b0:	42 17       	cp	r20, r18
    18b2:	53 07       	cpc	r21, r19
    18b4:	f8 f4       	brcc	.+62     	; 0x18f4 <qtm_key_sensors_process+0x186>
    18b6:	ea 81       	ldd	r30, Y+2	; 0x02
    18b8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ba:	24 1b       	sub	r18, r20
    18bc:	35 0b       	sbc	r19, r21
    18be:	dc 01       	movw	r26, r24
    18c0:	aa 0d       	add	r26, r10
    18c2:	bb 1d       	adc	r27, r11
    18c4:	8c 91       	ld	r24, X
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	05 80       	ldd	r0, Z+5	; 0x05
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <qtm_key_sensors_process+0x162>
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <qtm_key_sensors_process+0x15e>
    18d4:	99 27       	eor	r25, r25
    18d6:	28 17       	cp	r18, r24
    18d8:	39 07       	cpc	r19, r25
    18da:	08 f4       	brcc	.+2      	; 0x18de <qtm_key_sensors_process+0x170>
    18dc:	17 c1       	rjmp	.+558    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	88 23       	and	r24, r24
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <qtm_key_sensors_process+0x178>
    18e4:	13 c1       	rjmp	.+550    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    18e6:	87 e0       	ldi	r24, 0x07	; 7
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	24 81       	ldd	r18, Z+4	; 0x04
    18f2:	1a c0       	rjmp	.+52     	; 0x1928 <qtm_key_sensors_process+0x1ba>
    18f4:	fc 01       	movw	r30, r24
    18f6:	ea 0d       	add	r30, r10
    18f8:	fb 1d       	adc	r31, r11
    18fa:	42 1b       	sub	r20, r18
    18fc:	53 0b       	sbc	r21, r19
    18fe:	80 81       	ld	r24, Z
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	48 17       	cp	r20, r24
    1904:	59 07       	cpc	r21, r25
    1906:	08 f4       	brcc	.+2      	; 0x190a <qtm_key_sensors_process+0x19c>
    1908:	01 c1       	rjmp	.+514    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	88 23       	and	r24, r24
    190e:	31 f0       	breq	.+12     	; 0x191c <qtm_key_sensors_process+0x1ae>
    1910:	b4 01       	movw	r22, r8
    1912:	ce 01       	movw	r24, r28
    1914:	0e 94 24 0b 	call	0x1648	; 0x1648 <check_for_aks_block>
    1918:	81 11       	cpse	r24, r1
    191a:	f8 c0       	rjmp	.+496    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    191c:	e4 e0       	ldi	r30, 0x04	; 4
    191e:	d8 01       	movw	r26, r16
    1920:	ec 93       	st	X, r30
    1922:	ea 81       	ldd	r30, Y+2	; 0x02
    1924:	fb 81       	ldd	r31, Y+3	; 0x03
    1926:	22 81       	ldd	r18, Z+2	; 0x02
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	fc 01       	movw	r30, r24
    192e:	ee 0d       	add	r30, r14
    1930:	ff 1d       	adc	r31, r15
    1932:	21 83       	std	Z+1, r18	; 0x01
    1934:	dd c0       	rjmp	.+442    	; 0x1af0 <qtm_key_sensors_process+0x382>
    1936:	d8 01       	movw	r26, r16
    1938:	14 96       	adiw	r26, 0x04	; 4
    193a:	2d 91       	ld	r18, X+
    193c:	3c 91       	ld	r19, X
    193e:	15 97       	sbiw	r26, 0x05	; 5
    1940:	12 96       	adiw	r26, 0x02	; 2
    1942:	ed 91       	ld	r30, X+
    1944:	fc 91       	ld	r31, X
    1946:	13 97       	sbiw	r26, 0x03	; 3
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	92 81       	ldd	r25, Z+2	; 0x02
    194c:	82 17       	cp	r24, r18
    194e:	93 07       	cpc	r25, r19
    1950:	08 f4       	brcc	.+2      	; 0x1954 <qtm_key_sensors_process+0x1e6>
    1952:	bb c0       	rjmp	.+374    	; 0x1aca <qtm_key_sensors_process+0x35c>
    1954:	ee 81       	ldd	r30, Y+6	; 0x06
    1956:	ff 81       	ldd	r31, Y+7	; 0x07
    1958:	ea 0d       	add	r30, r10
    195a:	fb 1d       	adc	r31, r11
    195c:	82 1b       	sub	r24, r18
    195e:	93 0b       	sbc	r25, r19
    1960:	20 81       	ld	r18, Z
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	28 17       	cp	r18, r24
    1966:	39 07       	cpc	r19, r25
    1968:	08 f0       	brcs	.+2      	; 0x196c <qtm_key_sensors_process+0x1fe>
    196a:	c5 c0       	rjmp	.+394    	; 0x1af6 <qtm_key_sensors_process+0x388>
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	88 23       	and	r24, r24
    1970:	31 f0       	breq	.+12     	; 0x197e <qtm_key_sensors_process+0x210>
    1972:	b4 01       	movw	r22, r8
    1974:	ce 01       	movw	r24, r28
    1976:	0e 94 24 0b 	call	0x1648	; 0x1648 <check_for_aks_block>
    197a:	81 11       	cpse	r24, r1
    197c:	c7 c0       	rjmp	.+398    	; 0x1b0c <qtm_key_sensors_process+0x39e>
    197e:	f8 01       	movw	r30, r16
    1980:	81 81       	ldd	r24, Z+1	; 0x01
    1982:	88 23       	and	r24, r24
    1984:	09 f4       	brne	.+2      	; 0x1988 <qtm_key_sensors_process+0x21a>
    1986:	6a c0       	rjmp	.+212    	; 0x1a5c <qtm_key_sensors_process+0x2ee>
    1988:	81 50       	subi	r24, 0x01	; 1
    198a:	81 83       	std	Z+1, r24	; 0x01
    198c:	b1 c0       	rjmp	.+354    	; 0x1af0 <qtm_key_sensors_process+0x382>
    198e:	e8 81       	ld	r30, Y
    1990:	f9 81       	ldd	r31, Y+1	; 0x01
    1992:	aa 81       	ldd	r26, Y+2	; 0x02
    1994:	bb 81       	ldd	r27, Y+3	; 0x03
    1996:	18 96       	adiw	r26, 0x08	; 8
    1998:	8c 91       	ld	r24, X
    199a:	83 83       	std	Z+3, r24	; 0x03
    199c:	ec 81       	ldd	r30, Y+4	; 0x04
    199e:	fd 81       	ldd	r31, Y+5	; 0x05
    19a0:	ee 0d       	add	r30, r14
    19a2:	ff 1d       	adc	r31, r15
    19a4:	44 81       	ldd	r20, Z+4	; 0x04
    19a6:	55 81       	ldd	r21, Z+5	; 0x05
    19a8:	a2 81       	ldd	r26, Z+2	; 0x02
    19aa:	b3 81       	ldd	r27, Z+3	; 0x03
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	12 97       	sbiw	r26, 0x02	; 2
    19b4:	84 17       	cp	r24, r20
    19b6:	95 07       	cpc	r25, r21
    19b8:	c0 f0       	brcs	.+48     	; 0x19ea <qtm_key_sensors_process+0x27c>
    19ba:	ae 81       	ldd	r26, Y+6	; 0x06
    19bc:	bf 81       	ldd	r27, Y+7	; 0x07
    19be:	aa 0d       	add	r26, r10
    19c0:	bb 1d       	adc	r27, r11
    19c2:	6c 91       	ld	r22, X
    19c4:	26 2f       	mov	r18, r22
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	7c 91       	ld	r23, X
    19cc:	7f 5f       	subi	r23, 0xFF	; 255
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <qtm_key_sensors_process+0x266>
    19d0:	35 95       	asr	r19
    19d2:	27 95       	ror	r18
    19d4:	7a 95       	dec	r23
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <qtm_key_sensors_process+0x262>
    19d8:	84 1b       	sub	r24, r20
    19da:	95 0b       	sbc	r25, r21
    19dc:	62 1b       	sub	r22, r18
    19de:	26 2f       	mov	r18, r22
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	08 f4       	brcc	.+2      	; 0x19ea <qtm_key_sensors_process+0x27c>
    19e8:	8f c0       	rjmp	.+286    	; 0x1b08 <qtm_key_sensors_process+0x39a>
    19ea:	70 82       	st	Z, r7
    19ec:	ea 81       	ldd	r30, Y+2	; 0x02
    19ee:	fb 81       	ldd	r31, Y+3	; 0x03
    19f0:	22 81       	ldd	r18, Z+2	; 0x02
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	fc 01       	movw	r30, r24
    19f8:	ee 0d       	add	r30, r14
    19fa:	ff 1d       	adc	r31, r15
    19fc:	21 83       	std	Z+1, r18	; 0x01
    19fe:	42 c0       	rjmp	.+132    	; 0x1a84 <qtm_key_sensors_process+0x316>
    1a00:	d8 01       	movw	r26, r16
    1a02:	14 96       	adiw	r26, 0x04	; 4
    1a04:	6d 91       	ld	r22, X+
    1a06:	7c 91       	ld	r23, X
    1a08:	15 97       	sbiw	r26, 0x05	; 5
    1a0a:	12 96       	adiw	r26, 0x02	; 2
    1a0c:	ed 91       	ld	r30, X+
    1a0e:	fc 91       	ld	r31, X
    1a10:	13 97       	sbiw	r26, 0x03	; 3
    1a12:	21 81       	ldd	r18, Z+1	; 0x01
    1a14:	32 81       	ldd	r19, Z+2	; 0x02
    1a16:	26 17       	cp	r18, r22
    1a18:	37 07       	cpc	r19, r23
    1a1a:	58 f4       	brcc	.+22     	; 0x1a32 <qtm_key_sensors_process+0x2c4>
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	8c 91       	ld	r24, X
    1a20:	11 97       	sbiw	r26, 0x01	; 1
    1a22:	81 11       	cpse	r24, r1
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <qtm_key_sensors_process+0x2bc>
    1a26:	cc 92       	st	X, r12
    1a28:	6f c0       	rjmp	.+222    	; 0x1b08 <qtm_key_sensors_process+0x39a>
    1a2a:	81 50       	subi	r24, 0x01	; 1
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	81 83       	std	Z+1, r24	; 0x01
    1a30:	6b c0       	rjmp	.+214    	; 0x1b08 <qtm_key_sensors_process+0x39a>
    1a32:	ee 81       	ldd	r30, Y+6	; 0x06
    1a34:	ff 81       	ldd	r31, Y+7	; 0x07
    1a36:	ea 0d       	add	r30, r10
    1a38:	fb 1d       	adc	r31, r11
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <qtm_key_sensors_process+0x2dc>
    1a46:	55 95       	asr	r21
    1a48:	47 95       	ror	r20
    1a4a:	9a 95       	dec	r25
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <qtm_key_sensors_process+0x2d8>
    1a4e:	26 1b       	sub	r18, r22
    1a50:	37 0b       	sbc	r19, r23
    1a52:	84 1b       	sub	r24, r20
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	60 f4       	brcc	.+24     	; 0x1a74 <qtm_key_sensors_process+0x306>
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	6c 92       	st	X, r6
    1a60:	ea 81       	ldd	r30, Y+2	; 0x02
    1a62:	fb 81       	ldd	r31, Y+3	; 0x03
    1a64:	23 81       	ldd	r18, Z+3	; 0x03
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	ee 0d       	add	r30, r14
    1a6e:	ff 1d       	adc	r31, r15
    1a70:	21 83       	std	Z+1, r18	; 0x01
    1a72:	4a c0       	rjmp	.+148    	; 0x1b08 <qtm_key_sensors_process+0x39a>
    1a74:	f8 01       	movw	r30, r16
    1a76:	81 81       	ldd	r24, Z+1	; 0x01
    1a78:	81 11       	cpse	r24, r1
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <qtm_key_sensors_process+0x312>
    1a7c:	c0 82       	st	Z, r12
    1a7e:	44 c0       	rjmp	.+136    	; 0x1b08 <qtm_key_sensors_process+0x39a>
    1a80:	81 50       	subi	r24, 0x01	; 1
    1a82:	81 83       	std	Z+1, r24	; 0x01
    1a84:	22 24       	eor	r2, r2
    1a86:	23 94       	inc	r2
    1a88:	33 c0       	rjmp	.+102    	; 0x1af0 <qtm_key_sensors_process+0x382>
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	24 81       	ldd	r18, Z+4	; 0x04
    1a8e:	35 81       	ldd	r19, Z+5	; 0x05
    1a90:	02 80       	ldd	r0, Z+2	; 0x02
    1a92:	f3 81       	ldd	r31, Z+3	; 0x03
    1a94:	e0 2d       	mov	r30, r0
    1a96:	81 81       	ldd	r24, Z+1	; 0x01
    1a98:	92 81       	ldd	r25, Z+2	; 0x02
    1a9a:	82 17       	cp	r24, r18
    1a9c:	93 07       	cpc	r25, r19
    1a9e:	58 f5       	brcc	.+86     	; 0x1af6 <qtm_key_sensors_process+0x388>
    1aa0:	28 1b       	sub	r18, r24
    1aa2:	39 0b       	sbc	r19, r25
    1aa4:	ee 81       	ldd	r30, Y+6	; 0x06
    1aa6:	ff 81       	ldd	r31, Y+7	; 0x07
    1aa8:	ea 0d       	add	r30, r10
    1aaa:	fb 1d       	adc	r31, r11
    1aac:	80 81       	ld	r24, Z
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	05 80       	ldd	r0, Z+5	; 0x05
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <qtm_key_sensors_process+0x34e>
    1ab8:	95 95       	asr	r25
    1aba:	87 95       	ror	r24
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <qtm_key_sensors_process+0x34a>
    1ac0:	99 27       	eor	r25, r25
    1ac2:	28 17       	cp	r18, r24
    1ac4:	39 07       	cpc	r19, r25
    1ac6:	18 f4       	brcc	.+6      	; 0x1ace <qtm_key_sensors_process+0x360>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	cc 92       	st	X, r12
    1acc:	16 c0       	rjmp	.+44     	; 0x1afa <qtm_key_sensors_process+0x38c>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	81 81       	ldd	r24, Z+1	; 0x01
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	0b c0       	rjmp	.+22     	; 0x1aec <qtm_key_sensors_process+0x37e>
    1ad6:	50 82       	st	Z, r5
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	fc 01       	movw	r30, r24
    1ade:	ee 0d       	add	r30, r14
    1ae0:	ff 1d       	adc	r31, r15
    1ae2:	02 80       	ldd	r0, Z+2	; 0x02
    1ae4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	c0 82       	st	Z, r12
    1aea:	10 c0       	rjmp	.+32     	; 0x1b0c <qtm_key_sensors_process+0x39e>
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	81 83       	std	Z+1, r24	; 0x01
    1af0:	dd 24       	eor	r13, r13
    1af2:	d3 94       	inc	r13
    1af4:	0b c0       	rjmp	.+22     	; 0x1b0c <qtm_key_sensors_process+0x39e>
    1af6:	f8 01       	movw	r30, r16
    1af8:	c0 82       	st	Z, r12
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	fc 01       	movw	r30, r24
    1b00:	ee 0d       	add	r30, r14
    1b02:	ff 1d       	adc	r31, r15
    1b04:	11 82       	std	Z+1, r1	; 0x01
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <qtm_key_sensors_process+0x39e>
    1b08:	22 24       	eor	r2, r2
    1b0a:	23 94       	inc	r2
    1b0c:	ff ef       	ldi	r31, 0xFF	; 255
    1b0e:	8f 1a       	sub	r8, r31
    1b10:	9f 0a       	sbc	r9, r31
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	a8 0e       	add	r10, r24
    1b16:	b1 1c       	adc	r11, r1
    1b18:	52 ce       	rjmp	.-860    	; 0x17be <qtm_key_sensors_process+0x50>
    1b1a:	e8 81       	ld	r30, Y
    1b1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b1e:	80 81       	ld	r24, Z
    1b20:	87 ff       	sbrs	r24, 7
    1b22:	23 c0       	rjmp	.+70     	; 0x1b6a <qtm_key_sensors_process+0x3fc>
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	98 f4       	brcc	.+38     	; 0x1b60 <qtm_key_sensors_process+0x3f2>
    1b3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b3e:	e4 0f       	add	r30, r20
    1b40:	f5 1f       	adc	r31, r21
    1b42:	a2 81       	ldd	r26, Z+2	; 0x02
    1b44:	b3 81       	ldd	r27, Z+3	; 0x03
    1b46:	8c 91       	ld	r24, X
    1b48:	80 fd       	sbrc	r24, 0
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <qtm_key_sensors_process+0x3e8>
    1b4c:	90 81       	ld	r25, Z
    1b4e:	97 7f       	andi	r25, 0xF7	; 247
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <qtm_key_sensors_process+0x3e8>
    1b52:	81 60       	ori	r24, 0x01	; 1
    1b54:	8c 93       	st	X, r24
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	4a 5f       	subi	r20, 0xFA	; 250
    1b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5e:	e6 cf       	rjmp	.-52     	; 0x1b2c <qtm_key_sensors_process+0x3be>
    1b60:	e8 81       	ld	r30, Y
    1b62:	f9 81       	ldd	r31, Y+1	; 0x01
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 77       	andi	r24, 0x7F	; 127
    1b68:	80 83       	st	Z, r24
    1b6a:	d1 10       	cpse	r13, r1
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <qtm_key_sensors_process+0x40e>
    1b6e:	e8 81       	ld	r30, Y
    1b70:	f9 81       	ldd	r31, Y+1	; 0x01
    1b72:	21 10       	cpse	r2, r1
    1b74:	6f c0       	rjmp	.+222    	; 0x1c54 <qtm_key_sensors_process+0x4e6>
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	6e c0       	rjmp	.+220    	; 0x1c58 <qtm_key_sensors_process+0x4ea>
    1b7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b80:	81 85       	ldd	r24, Z+9	; 0x09
    1b82:	88 23       	and	r24, r24
    1b84:	a1 f3       	breq	.-24     	; 0x1b6e <qtm_key_sensors_process+0x400>
    1b86:	e8 81       	ld	r30, Y
    1b88:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 68       	ori	r24, 0x80	; 128
    1b8e:	80 83       	st	Z, r24
    1b90:	ea 81       	ldd	r30, Y+2	; 0x02
    1b92:	fb 81       	ldd	r31, Y+3	; 0x03
    1b94:	81 85       	ldd	r24, Z+9	; 0x09
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	51 f7       	brne	.-44     	; 0x1b6e <qtm_key_sensors_process+0x400>
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	96 e0       	ldi	r25, 0x06	; 6
    1ba4:	d9 2e       	mov	r13, r25
    1ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	26 17       	cp	r18, r22
    1bb0:	37 07       	cpc	r19, r23
    1bb2:	e8 f6       	brcc	.-70     	; 0x1b6e <qtm_key_sensors_process+0x400>
    1bb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bb6:	1d 81       	ldd	r17, Y+5	; 0x05
    1bb8:	fa 01       	movw	r30, r20
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	e0 0f       	add	r30, r16
    1bc0:	f1 1f       	adc	r31, r17
    1bc2:	80 81       	ld	r24, Z
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	97 7f       	andi	r25, 0xF7	; 247
    1bc8:	a1 f1       	breq	.+104    	; 0x1c32 <qtm_key_sensors_process+0x4c4>
    1bca:	85 38       	cpi	r24, 0x85	; 133
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <qtm_key_sensors_process+0x464>
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	b1 f5       	brne	.+108    	; 0x1c3e <qtm_key_sensors_process+0x4d0>
    1bd2:	ee 80       	ldd	r14, Y+6	; 0x06
    1bd4:	ff 80       	ldd	r15, Y+7	; 0x07
    1bd6:	d7 01       	movw	r26, r14
    1bd8:	a4 0f       	add	r26, r20
    1bda:	b5 1f       	adc	r27, r21
    1bdc:	12 96       	adiw	r26, 0x02	; 2
    1bde:	bc 90       	ld	r11, X
    1be0:	bb 20       	and	r11, r11
    1be2:	39 f1       	breq	.+78     	; 0x1c32 <qtm_key_sensors_process+0x4c4>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	c1 2c       	mov	r12, r1
    1bea:	86 17       	cp	r24, r22
    1bec:	97 07       	cpc	r25, r23
    1bee:	f8 f4       	brcc	.+62     	; 0x1c2e <qtm_key_sensors_process+0x4c0>
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	d1 f0       	breq	.+52     	; 0x1c2a <qtm_key_sensors_process+0x4bc>
    1bf6:	d8 9e       	mul	r13, r24
    1bf8:	d0 01       	movw	r26, r0
    1bfa:	d9 9e       	mul	r13, r25
    1bfc:	b0 0d       	add	r27, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	a0 0f       	add	r26, r16
    1c02:	b1 1f       	adc	r27, r17
    1c04:	ac 91       	ld	r26, X
    1c06:	a4 30       	cpi	r26, 0x04	; 4
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <qtm_key_sensors_process+0x4a0>
    1c0a:	a6 38       	cpi	r26, 0x86	; 134
    1c0c:	71 f4       	brne	.+28     	; 0x1c2a <qtm_key_sensors_process+0x4bc>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	aa 0f       	add	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	a8 0f       	add	r26, r24
    1c16:	b9 1f       	adc	r27, r25
    1c18:	ae 0d       	add	r26, r14
    1c1a:	bf 1d       	adc	r27, r15
    1c1c:	12 96       	adiw	r26, 0x02	; 2
    1c1e:	ac 91       	ld	r26, X
    1c20:	ba 12       	cpse	r11, r26
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <qtm_key_sensors_process+0x4bc>
    1c24:	cb 01       	movw	r24, r22
    1c26:	cc 24       	eor	r12, r12
    1c28:	c3 94       	inc	r12
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	de cf       	rjmp	.-68     	; 0x1bea <qtm_key_sensors_process+0x47c>
    1c2e:	c1 10       	cpse	r12, r1
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <qtm_key_sensors_process+0x4d0>
    1c32:	02 80       	ldd	r0, Z+2	; 0x02
    1c34:	f3 81       	ldd	r31, Z+3	; 0x03
    1c36:	e0 2d       	mov	r30, r0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8e 7f       	andi	r24, 0xFE	; 254
    1c3c:	05 c0       	rjmp	.+10     	; 0x1c48 <qtm_key_sensors_process+0x4da>
    1c3e:	02 80       	ldd	r0, Z+2	; 0x02
    1c40:	f3 81       	ldd	r31, Z+3	; 0x03
    1c42:	e0 2d       	mov	r30, r0
    1c44:	80 81       	ld	r24, Z
    1c46:	81 60       	ori	r24, 0x01	; 1
    1c48:	80 83       	st	Z, r24
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	4d 5f       	subi	r20, 0xFD	; 253
    1c50:	5f 4f       	sbci	r21, 0xFF	; 255
    1c52:	a9 cf       	rjmp	.-174    	; 0x1ba6 <qtm_key_sensors_process+0x438>
    1c54:	80 81       	ld	r24, Z
    1c56:	81 60       	ori	r24, 0x01	; 1
    1c58:	80 83       	st	Z, r24
    1c5a:	80 91 a1 38 	lds	r24, 0x38A1	; 0x8038a1 <qtm_local_ms_timecount>
    1c5e:	90 91 a2 38 	lds	r25, 0x38A2	; 0x8038a2 <qtm_local_ms_timecount+0x1>
    1c62:	e8 81       	ld	r30, Y
    1c64:	f9 81       	ldd	r31, Y+1	; 0x01
    1c66:	21 81       	ldd	r18, Z+1	; 0x01
    1c68:	32 81       	ldd	r19, Z+2	; 0x02
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	48 53       	subi	r20, 0x38	; 56
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	48 17       	cp	r20, r24
    1c72:	59 07       	cpc	r21, r25
    1c74:	38 f4       	brcc	.+14     	; 0x1c84 <qtm_key_sensors_process+0x516>
    1c76:	82 1b       	sub	r24, r18
    1c78:	93 0b       	sbc	r25, r19
    1c7a:	aa 24       	eor	r10, r10
    1c7c:	a3 94       	inc	r10
    1c7e:	a3 e0       	ldi	r26, 0x03	; 3
    1c80:	ba 2e       	mov	r11, r26
    1c82:	44 c0       	rjmp	.+136    	; 0x1d0c <qtm_key_sensors_process+0x59e>
    1c84:	82 17       	cp	r24, r18
    1c86:	93 07       	cpc	r25, r19
    1c88:	10 f0       	brcs	.+4      	; 0x1c8e <qtm_key_sensors_process+0x520>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	04 c1       	rjmp	.+520    	; 0x1e96 <qtm_key_sensors_process+0x728>
    1c8e:	82 1b       	sub	r24, r18
    1c90:	93 0b       	sbc	r25, r19
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	89 3c       	cpi	r24, 0xC9	; 201
    1c96:	91 05       	cpc	r25, r1
    1c98:	c0 f3       	brcs	.-16     	; 0x1c8a <qtm_key_sensors_process+0x51c>
    1c9a:	ef cf       	rjmp	.-34     	; 0x1c7a <qtm_key_sensors_process+0x50c>
    1c9c:	88 5c       	subi	r24, 0xC8	; 200
    1c9e:	91 09       	sbc	r25, r1
    1ca0:	e8 81       	ld	r30, Y
    1ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca4:	21 81       	ldd	r18, Z+1	; 0x01
    1ca6:	32 81       	ldd	r19, Z+2	; 0x02
    1ca8:	28 53       	subi	r18, 0x38	; 56
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	21 83       	std	Z+1, r18	; 0x01
    1cae:	32 83       	std	Z+2, r19	; 0x02
    1cb0:	23 81       	ldd	r18, Z+3	; 0x03
    1cb2:	21 11       	cpse	r18, r1
    1cb4:	96 c0       	rjmp	.+300    	; 0x1de2 <qtm_key_sensors_process+0x674>
    1cb6:	24 81       	ldd	r18, Z+4	; 0x04
    1cb8:	22 23       	and	r18, r18
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <qtm_key_sensors_process+0x552>
    1cbc:	21 50       	subi	r18, 0x01	; 1
    1cbe:	24 83       	std	Z+4, r18	; 0x04
    1cc0:	e8 81       	ld	r30, Y
    1cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc4:	25 81       	ldd	r18, Z+5	; 0x05
    1cc6:	22 23       	and	r18, r18
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <qtm_key_sensors_process+0x560>
    1cca:	21 50       	subi	r18, 0x01	; 1
    1ccc:	25 83       	std	Z+5, r18	; 0x05
    1cce:	8a 80       	ldd	r8, Y+2	; 0x02
    1cd0:	9b 80       	ldd	r9, Y+3	; 0x03
    1cd2:	d4 01       	movw	r26, r8
    1cd4:	16 96       	adiw	r26, 0x06	; 6
    1cd6:	2c 91       	ld	r18, X
    1cd8:	16 97       	sbiw	r26, 0x06	; 6
    1cda:	21 11       	cpse	r18, r1
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <qtm_key_sensors_process+0x5a6>
    1cde:	8a 80       	ldd	r8, Y+2	; 0x02
    1ce0:	9b 80       	ldd	r9, Y+3	; 0x03
    1ce2:	f4 01       	movw	r30, r8
    1ce4:	27 81       	ldd	r18, Z+7	; 0x07
    1ce6:	21 11       	cpse	r18, r1
    1ce8:	48 c0       	rjmp	.+144    	; 0x1d7a <qtm_key_sensors_process+0x60c>
    1cea:	ea 81       	ldd	r30, Y+2	; 0x02
    1cec:	fb 81       	ldd	r31, Y+3	; 0x03
    1cee:	23 81       	ldd	r18, Z+3	; 0x03
    1cf0:	22 23       	and	r18, r18
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <qtm_key_sensors_process+0x59e>
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	a0 e0       	ldi	r26, 0x00	; 0
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1d00:	40 81       	ld	r20, Z
    1d02:	51 81       	ldd	r21, Z+1	; 0x01
    1d04:	a4 17       	cp	r26, r20
    1d06:	b5 07       	cpc	r27, r21
    1d08:	08 f4       	brcc	.+2      	; 0x1d0c <qtm_key_sensors_process+0x59e>
    1d0a:	6e c0       	rjmp	.+220    	; 0x1de8 <qtm_key_sensors_process+0x67a>
    1d0c:	89 3c       	cpi	r24, 0xC9	; 201
    1d0e:	91 05       	cpc	r25, r1
    1d10:	28 f6       	brcc	.-118    	; 0x1c9c <qtm_key_sensors_process+0x52e>
    1d12:	bb cf       	rjmp	.-138    	; 0x1c8a <qtm_key_sensors_process+0x51c>
    1d14:	08 81       	ld	r16, Y
    1d16:	19 81       	ldd	r17, Y+1	; 0x01
    1d18:	f8 01       	movw	r30, r16
    1d1a:	24 81       	ldd	r18, Z+4	; 0x04
    1d1c:	21 11       	cpse	r18, r1
    1d1e:	df cf       	rjmp	.-66     	; 0x1cde <qtm_key_sensors_process+0x570>
    1d20:	ed 90       	ld	r14, X+
    1d22:	fc 90       	ld	r15, X
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	4e 15       	cp	r20, r14
    1d2e:	5f 05       	cpc	r21, r15
    1d30:	f1 f0       	breq	.+60     	; 0x1d6e <qtm_key_sensors_process+0x600>
    1d32:	ec 81       	ldd	r30, Y+4	; 0x04
    1d34:	fd 81       	ldd	r31, Y+5	; 0x05
    1d36:	e6 0f       	add	r30, r22
    1d38:	f7 1f       	adc	r31, r23
    1d3a:	20 81       	ld	r18, Z
    1d3c:	23 30       	cpi	r18, 0x03	; 3
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <qtm_key_sensors_process+0x5d6>
    1d40:	28 30       	cpi	r18, 0x08	; 8
    1d42:	81 f4       	brne	.+32     	; 0x1d64 <qtm_key_sensors_process+0x5f6>
    1d44:	24 81       	ldd	r18, Z+4	; 0x04
    1d46:	35 81       	ldd	r19, Z+5	; 0x05
    1d48:	c2 80       	ldd	r12, Z+2	; 0x02
    1d4a:	d3 80       	ldd	r13, Z+3	; 0x03
    1d4c:	d6 01       	movw	r26, r12
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	cd 90       	ld	r12, X+
    1d52:	dc 90       	ld	r13, X
    1d54:	12 97       	sbiw	r26, 0x02	; 2
    1d56:	2c 15       	cp	r18, r12
    1d58:	3d 05       	cpc	r19, r13
    1d5a:	20 f4       	brcc	.+8      	; 0x1d64 <qtm_key_sensors_process+0x5f6>
    1d5c:	2f 5f       	subi	r18, 0xFF	; 255
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	24 83       	std	Z+4, r18	; 0x04
    1d62:	35 83       	std	Z+5, r19	; 0x05
    1d64:	4f 5f       	subi	r20, 0xFF	; 255
    1d66:	5f 4f       	sbci	r21, 0xFF	; 255
    1d68:	6a 5f       	subi	r22, 0xFA	; 250
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	df cf       	rjmp	.-66     	; 0x1d2c <qtm_key_sensors_process+0x5be>
    1d6e:	f4 01       	movw	r30, r8
    1d70:	26 81       	ldd	r18, Z+6	; 0x06
    1d72:	d8 01       	movw	r26, r16
    1d74:	14 96       	adiw	r26, 0x04	; 4
    1d76:	2c 93       	st	X, r18
    1d78:	b2 cf       	rjmp	.-156    	; 0x1cde <qtm_key_sensors_process+0x570>
    1d7a:	08 81       	ld	r16, Y
    1d7c:	19 81       	ldd	r17, Y+1	; 0x01
    1d7e:	d8 01       	movw	r26, r16
    1d80:	15 96       	adiw	r26, 0x05	; 5
    1d82:	2c 91       	ld	r18, X
    1d84:	21 11       	cpse	r18, r1
    1d86:	b1 cf       	rjmp	.-158    	; 0x1cea <qtm_key_sensors_process+0x57c>
    1d88:	e0 80       	ld	r14, Z
    1d8a:	f1 80       	ldd	r15, Z+1	; 0x01
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	4e 15       	cp	r20, r14
    1d96:	5f 05       	cpc	r21, r15
    1d98:	f1 f0       	breq	.+60     	; 0x1dd6 <qtm_key_sensors_process+0x668>
    1d9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9e:	e6 0f       	add	r30, r22
    1da0:	f7 1f       	adc	r31, r23
    1da2:	20 81       	ld	r18, Z
    1da4:	23 30       	cpi	r18, 0x03	; 3
    1da6:	11 f0       	breq	.+4      	; 0x1dac <qtm_key_sensors_process+0x63e>
    1da8:	28 30       	cpi	r18, 0x08	; 8
    1daa:	81 f4       	brne	.+32     	; 0x1dcc <qtm_key_sensors_process+0x65e>
    1dac:	24 81       	ldd	r18, Z+4	; 0x04
    1dae:	35 81       	ldd	r19, Z+5	; 0x05
    1db0:	c2 80       	ldd	r12, Z+2	; 0x02
    1db2:	d3 80       	ldd	r13, Z+3	; 0x03
    1db4:	d6 01       	movw	r26, r12
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	cd 90       	ld	r12, X+
    1dba:	dc 90       	ld	r13, X
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
    1dbe:	c2 16       	cp	r12, r18
    1dc0:	d3 06       	cpc	r13, r19
    1dc2:	20 f4       	brcc	.+8      	; 0x1dcc <qtm_key_sensors_process+0x65e>
    1dc4:	21 50       	subi	r18, 0x01	; 1
    1dc6:	31 09       	sbc	r19, r1
    1dc8:	24 83       	std	Z+4, r18	; 0x04
    1dca:	35 83       	std	Z+5, r19	; 0x05
    1dcc:	4f 5f       	subi	r20, 0xFF	; 255
    1dce:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd0:	6a 5f       	subi	r22, 0xFA	; 250
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	df cf       	rjmp	.-66     	; 0x1d94 <qtm_key_sensors_process+0x626>
    1dd6:	f4 01       	movw	r30, r8
    1dd8:	27 81       	ldd	r18, Z+7	; 0x07
    1dda:	d8 01       	movw	r26, r16
    1ddc:	15 96       	adiw	r26, 0x05	; 5
    1dde:	2c 93       	st	X, r18
    1de0:	84 cf       	rjmp	.-248    	; 0x1cea <qtm_key_sensors_process+0x57c>
    1de2:	21 50       	subi	r18, 0x01	; 1
    1de4:	23 83       	std	Z+3, r18	; 0x03
    1de6:	81 cf       	rjmp	.-254    	; 0x1cea <qtm_key_sensors_process+0x57c>
    1de8:	a9 01       	movw	r20, r18
    1dea:	44 0f       	add	r20, r20
    1dec:	55 1f       	adc	r21, r21
    1dee:	ec 81       	ldd	r30, Y+4	; 0x04
    1df0:	fd 81       	ldd	r31, Y+5	; 0x05
    1df2:	e4 0f       	add	r30, r20
    1df4:	f5 1f       	adc	r31, r21
    1df6:	60 81       	ld	r22, Z
    1df8:	65 38       	cpi	r22, 0x85	; 133
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <qtm_key_sensors_process+0x690>
    1dfc:	47 c0       	rjmp	.+142    	; 0x1e8c <qtm_key_sensors_process+0x71e>
    1dfe:	61 81       	ldd	r22, Z+1	; 0x01
    1e00:	66 23       	and	r22, r22
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <qtm_key_sensors_process+0x69c>
    1e04:	61 50       	subi	r22, 0x01	; 1
    1e06:	61 83       	std	Z+1, r22	; 0x01
    1e08:	41 c0       	rjmp	.+130    	; 0x1e8c <qtm_key_sensors_process+0x71e>
    1e0a:	a0 82       	st	Z, r10
    1e0c:	6c 81       	ldd	r22, Y+4	; 0x04
    1e0e:	7d 81       	ldd	r23, Y+5	; 0x05
    1e10:	fb 01       	movw	r30, r22
    1e12:	e4 0f       	add	r30, r20
    1e14:	f5 1f       	adc	r31, r21
    1e16:	02 80       	ldd	r0, Z+2	; 0x02
    1e18:	f3 81       	ldd	r31, Z+3	; 0x03
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	b0 82       	st	Z, r11
    1e1e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e20:	ff 81       	ldd	r31, Y+7	; 0x07
    1e22:	e2 0f       	add	r30, r18
    1e24:	f3 1f       	adc	r31, r19
    1e26:	d2 80       	ldd	r13, Z+2	; 0x02
    1e28:	dd 20       	and	r13, r13
    1e2a:	81 f1       	breq	.+96     	; 0x1e8c <qtm_key_sensors_process+0x71e>
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	00 e0       	ldi	r16, 0x00	; 0
    1e32:	10 e0       	ldi	r17, 0x00	; 0
    1e34:	ea 81       	ldd	r30, Y+2	; 0x02
    1e36:	fb 81       	ldd	r31, Y+3	; 0x03
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	06 17       	cp	r16, r22
    1e3e:	17 07       	cpc	r17, r23
    1e40:	28 f5       	brcc	.+74     	; 0x1e8c <qtm_key_sensors_process+0x71e>
    1e42:	ee 81       	ldd	r30, Y+6	; 0x06
    1e44:	ff 81       	ldd	r31, Y+7	; 0x07
    1e46:	e4 0f       	add	r30, r20
    1e48:	f5 1f       	adc	r31, r21
    1e4a:	62 81       	ldd	r22, Z+2	; 0x02
    1e4c:	d6 12       	cpse	r13, r22
    1e4e:	19 c0       	rjmp	.+50     	; 0x1e82 <qtm_key_sensors_process+0x714>
    1e50:	ba 01       	movw	r22, r20
    1e52:	66 0f       	add	r22, r22
    1e54:	77 1f       	adc	r23, r23
    1e56:	ec 81       	ldd	r30, Y+4	; 0x04
    1e58:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5a:	4f 01       	movw	r8, r30
    1e5c:	86 0e       	add	r8, r22
    1e5e:	97 1e       	adc	r9, r23
    1e60:	f4 01       	movw	r30, r8
    1e62:	e2 80       	ldd	r14, Z+2	; 0x02
    1e64:	f3 80       	ldd	r15, Z+3	; 0x03
    1e66:	f7 01       	movw	r30, r14
    1e68:	f0 80       	ld	r15, Z
    1e6a:	f0 fe       	sbrs	r15, 0
    1e6c:	0a c0       	rjmp	.+20     	; 0x1e82 <qtm_key_sensors_process+0x714>
    1e6e:	f4 01       	movw	r30, r8
    1e70:	a0 82       	st	Z, r10
    1e72:	ec 81       	ldd	r30, Y+4	; 0x04
    1e74:	fd 81       	ldd	r31, Y+5	; 0x05
    1e76:	e6 0f       	add	r30, r22
    1e78:	f7 1f       	adc	r31, r23
    1e7a:	02 80       	ldd	r0, Z+2	; 0x02
    1e7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e7e:	e0 2d       	mov	r30, r0
    1e80:	b0 82       	st	Z, r11
    1e82:	0f 5f       	subi	r16, 0xFF	; 255
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	4d 5f       	subi	r20, 0xFD	; 253
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	d4 cf       	rjmp	.-88     	; 0x1e34 <qtm_key_sensors_process+0x6c6>
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	2d 5f       	subi	r18, 0xFD	; 253
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	34 cf       	rjmp	.-408    	; 0x1cfc <qtm_key_sensors_process+0x58e>
    1e94:	8b e0       	ldi	r24, 0x0B	; 11
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	9f 90       	pop	r9
    1eac:	8f 90       	pop	r8
    1eae:	7f 90       	pop	r7
    1eb0:	6f 90       	pop	r6
    1eb2:	5f 90       	pop	r5
    1eb4:	4f 90       	pop	r4
    1eb6:	3f 90       	pop	r3
    1eb8:	2f 90       	pop	r2
    1eba:	08 95       	ret

00001ebc <select_next_channel_to_measure>:
    1ebc:	80 91 a6 38 	lds	r24, 0x38A6	; 0x8038a6 <current_measure_channel>
    1ec0:	90 91 a7 38 	lds	r25, 0x38A7	; 0x8038a7 <current_measure_channel+0x1>
    1ec4:	a0 91 72 39 	lds	r26, 0x3972	; 0x803972 <qtm_acquisition_control_working_set_ptr>
    1ec8:	b0 91 73 39 	lds	r27, 0x3973	; 0x803973 <qtm_acquisition_control_working_set_ptr+0x1>
    1ecc:	ed 91       	ld	r30, X+
    1ece:	fc 91       	ld	r31, X
    1ed0:	11 97       	sbiw	r26, 0x01	; 1
    1ed2:	40 81       	ld	r20, Z
    1ed4:	51 81       	ldd	r21, Z+1	; 0x01
    1ed6:	25 e0       	ldi	r18, 0x05	; 5
    1ed8:	28 9f       	mul	r18, r24
    1eda:	b0 01       	movw	r22, r0
    1edc:	29 9f       	mul	r18, r25
    1ede:	70 0d       	add	r23, r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	84 17       	cp	r24, r20
    1ee8:	95 07       	cpc	r25, r21
    1eea:	a8 f4       	brcc	.+42     	; 0x1f16 <select_next_channel_to_measure+0x5a>
    1eec:	14 96       	adiw	r26, 0x04	; 4
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	15 97       	sbiw	r26, 0x05	; 5
    1ef4:	e2 0f       	add	r30, r18
    1ef6:	f3 1f       	adc	r31, r19
    1ef8:	e6 0f       	add	r30, r22
    1efa:	f7 1f       	adc	r31, r23
    1efc:	e0 81       	ld	r30, Z
    1efe:	2b 5f       	subi	r18, 0xFB	; 251
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	e0 fd       	sbrc	r30, 0
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <select_next_channel_to_measure+0x4e>
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	ee cf       	rjmp	.-36     	; 0x1ee6 <select_next_channel_to_measure+0x2a>
    1f0a:	80 93 a6 38 	sts	0x38A6, r24	; 0x8038a6 <current_measure_channel>
    1f0e:	90 93 a7 38 	sts	0x38A7, r25	; 0x8038a7 <current_measure_channel+0x1>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	08 95       	ret
    1f16:	10 92 a6 38 	sts	0x38A6, r1	; 0x8038a6 <current_measure_channel>
    1f1a:	10 92 a7 38 	sts	0x38A7, r1	; 0x8038a7 <current_measure_channel+0x1>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	08 95       	ret

00001f22 <qtm_measure_node>:
    1f22:	bc 01       	movw	r22, r24
    1f24:	e0 91 72 39 	lds	r30, 0x3972	; 0x803972 <qtm_acquisition_control_working_set_ptr>
    1f28:	f0 91 73 39 	lds	r31, 0x3973	; 0x803973 <qtm_acquisition_control_working_set_ptr+0x1>
    1f2c:	9c 01       	movw	r18, r24
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	8a 95       	dec	r24
    1f36:	e1 f7       	brne	.-8      	; 0x1f30 <qtm_measure_node+0xe>
    1f38:	a2 81       	ldd	r26, Z+2	; 0x02
    1f3a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f3c:	a2 0f       	add	r26, r18
    1f3e:	b3 1f       	adc	r27, r19
    1f40:	12 96       	adiw	r26, 0x02	; 2
    1f42:	9c 91       	ld	r25, X
    1f44:	12 97       	sbiw	r26, 0x02	; 2
    1f46:	13 96       	adiw	r26, 0x03	; 3
    1f48:	8c 91       	ld	r24, X
    1f4a:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <gain_setting_int_cap+0x7f5c07>
    1f4e:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <gain_setting_int_cap+0x7f5c08>
    1f52:	a2 81       	ldd	r26, Z+2	; 0x02
    1f54:	b3 81       	ldd	r27, Z+3	; 0x03
    1f56:	a2 0f       	add	r26, r18
    1f58:	b3 1f       	adc	r27, r19
    1f5a:	9c 91       	ld	r25, X
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	8c 91       	ld	r24, X
    1f60:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <gain_setting_int_cap+0x7f5c03>
    1f64:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <gain_setting_int_cap+0x7f5c04>
    1f68:	95 e0       	ldi	r25, 0x05	; 5
    1f6a:	96 9f       	mul	r25, r22
    1f6c:	a0 01       	movw	r20, r0
    1f6e:	97 9f       	mul	r25, r23
    1f70:	50 0d       	add	r21, r0
    1f72:	11 24       	eor	r1, r1
    1f74:	a4 81       	ldd	r26, Z+4	; 0x04
    1f76:	b5 81       	ldd	r27, Z+5	; 0x05
    1f78:	a4 0f       	add	r26, r20
    1f7a:	b5 1f       	adc	r27, r21
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	8c 91       	ld	r24, X
    1f80:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gain_setting_int_cap+0x7f5bf7>
    1f84:	a4 81       	ldd	r26, Z+4	; 0x04
    1f86:	b5 81       	ldd	r27, Z+5	; 0x05
    1f88:	a4 0f       	add	r26, r20
    1f8a:	b5 1f       	adc	r27, r21
    1f8c:	14 96       	adiw	r26, 0x04	; 4
    1f8e:	8c 91       	ld	r24, X
    1f90:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <gain_setting_int_cap+0x7f5bf8>
    1f94:	a4 81       	ldd	r26, Z+4	; 0x04
    1f96:	b5 81       	ldd	r27, Z+5	; 0x05
    1f98:	a4 0f       	add	r26, r20
    1f9a:	b5 1f       	adc	r27, r21
    1f9c:	8c 91       	ld	r24, X
    1f9e:	81 fd       	sbrc	r24, 1
    1fa0:	9c 93       	st	X, r25
    1fa2:	84 81       	ldd	r24, Z+4	; 0x04
    1fa4:	95 81       	ldd	r25, Z+5	; 0x05
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	a4 0f       	add	r26, r20
    1faa:	b5 1f       	adc	r27, r21
    1fac:	8c 91       	ld	r24, X
    1fae:	8c 71       	andi	r24, 0x1C	; 28
    1fb0:	69 f4       	brne	.+26     	; 0x1fcc <qtm_measure_node+0xaa>
    1fb2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fb4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fb6:	a2 0f       	add	r26, r18
    1fb8:	b3 1f       	adc	r27, r19
    1fba:	16 96       	adiw	r26, 0x06	; 6
    1fbc:	ac 91       	ld	r26, X
    1fbe:	a2 95       	swap	r26
    1fc0:	af 70       	andi	r26, 0x0F	; 15
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	ad 5d       	subi	r26, 0xDD	; 221
    1fc6:	b5 45       	sbci	r27, 0x55	; 85
    1fc8:	8c 91       	ld	r24, X
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <qtm_measure_node+0xac>
    1fcc:	8f e3       	ldi	r24, 0x3F	; 63
    1fce:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <gain_setting_int_cap+0x7f5bf9>
    1fd2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fd4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fd6:	a2 0f       	add	r26, r18
    1fd8:	b3 1f       	adc	r27, r19
    1fda:	14 96       	adiw	r26, 0x04	; 4
    1fdc:	8c 91       	ld	r24, X
    1fde:	8b 31       	cpi	r24, 0x1B	; 27
    1fe0:	10 f4       	brcc	.+4      	; 0x1fe6 <qtm_measure_node+0xc4>
    1fe2:	8c 5f       	subi	r24, 0xFC	; 252
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <qtm_measure_node+0xc6>
    1fe6:	8f e1       	ldi	r24, 0x1F	; 31
    1fe8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <gain_setting_int_cap+0x7f5be2>
    1fec:	a2 81       	ldd	r26, Z+2	; 0x02
    1fee:	b3 81       	ldd	r27, Z+3	; 0x03
    1ff0:	a2 0f       	add	r26, r18
    1ff2:	b3 1f       	adc	r27, r19
    1ff4:	17 96       	adiw	r26, 0x07	; 7
    1ff6:	8c 91       	ld	r24, X
    1ff8:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <gain_setting_int_cap+0x7f5bde>
    1ffc:	a2 81       	ldd	r26, Z+2	; 0x02
    1ffe:	b3 81       	ldd	r27, Z+3	; 0x03
    2000:	a2 0f       	add	r26, r18
    2002:	b3 1f       	adc	r27, r19
    2004:	15 96       	adiw	r26, 0x05	; 5
    2006:	8c 91       	ld	r24, X
    2008:	82 95       	swap	r24
    200a:	8f 70       	andi	r24, 0x0F	; 15
    200c:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gain_setting_int_cap+0x7f5bf6>
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	fc 01       	movw	r30, r24
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	85 81       	ldd	r24, Z+5	; 0x05
    201c:	8f 70       	andi	r24, 0x0F	; 15
    201e:	80 61       	ori	r24, 0x10	; 16
    2020:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <gain_setting_int_cap+0x7f5bdf>
    2024:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2028:	83 60       	ori	r24, 0x03	; 3
    202a:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    202e:	81 e8       	ldi	r24, 0x81	; 129
    2030:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <gain_setting_int_cap+0x7f5bdd>
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <gain_setting_int_cap+0x7f5be5>
    203a:	08 95       	ret

0000203c <qtm_acquisition_process>:
    203c:	3f 92       	push	r3
    203e:	4f 92       	push	r4
    2040:	5f 92       	push	r5
    2042:	6f 92       	push	r6
    2044:	7f 92       	push	r7
    2046:	8f 92       	push	r8
    2048:	9f 92       	push	r9
    204a:	af 92       	push	r10
    204c:	bf 92       	push	r11
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <touch_seq_lib_state>
    2062:	88 23       	and	r24, r24
    2064:	09 f4       	brne	.+2      	; 0x2068 <qtm_acquisition_process+0x2c>
    2066:	48 c1       	rjmp	.+656    	; 0x22f8 <qtm_acquisition_process+0x2bc>
    2068:	a0 91 72 39 	lds	r26, 0x3972	; 0x803972 <qtm_acquisition_control_working_set_ptr>
    206c:	b0 91 73 39 	lds	r27, 0x3973	; 0x803973 <qtm_acquisition_control_working_set_ptr+0x1>
    2070:	c0 90 74 39 	lds	r12, 0x3974	; 0x803974 <qtm_raw_data_measurements_ptr>
    2074:	d0 90 75 39 	lds	r13, 0x3975	; 0x803975 <qtm_raw_data_measurements_ptr+0x1>
    2078:	00 e0       	ldi	r16, 0x00	; 0
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	e1 2c       	mov	r14, r1
    2082:	f1 2c       	mov	r15, r1
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	33 24       	eor	r3, r3
    2088:	33 94       	inc	r3
    208a:	d1 e8       	ldi	r29, 0x81	; 129
    208c:	4d 2e       	mov	r4, r29
    208e:	88 24       	eor	r8, r8
    2090:	8a 94       	dec	r8
    2092:	99 24       	eor	r9, r9
    2094:	93 94       	inc	r9
    2096:	6d 90       	ld	r6, X+
    2098:	7c 90       	ld	r7, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	f3 01       	movw	r30, r6
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	e2 16       	cp	r14, r18
    20a4:	f3 06       	cpc	r15, r19
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <qtm_acquisition_process+0x6e>
    20a8:	23 c1       	rjmp	.+582    	; 0x22f0 <qtm_acquisition_process+0x2b4>
    20aa:	e6 01       	movw	r28, r12
    20ac:	29 91       	ld	r18, Y+
    20ae:	39 91       	ld	r19, Y+
    20b0:	6e 01       	movw	r12, r28
    20b2:	14 96       	adiw	r26, 0x04	; 4
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	15 97       	sbiw	r26, 0x05	; 5
    20ba:	e6 0f       	add	r30, r22
    20bc:	f7 1f       	adc	r31, r23
    20be:	40 81       	ld	r20, Z
    20c0:	4c 71       	andi	r20, 0x1C	; 28
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	56 95       	lsr	r21
    20c6:	47 95       	ror	r20
    20c8:	56 95       	lsr	r21
    20ca:	47 95       	ror	r20
    20cc:	41 15       	cp	r20, r1
    20ce:	51 05       	cpc	r21, r1
    20d0:	21 f0       	breq	.+8      	; 0x20da <qtm_acquisition_process+0x9e>
    20d2:	41 30       	cpi	r20, 0x01	; 1
    20d4:	51 05       	cpc	r21, r1
    20d6:	b9 f0       	breq	.+46     	; 0x2106 <qtm_acquisition_process+0xca>
    20d8:	02 c1       	rjmp	.+516    	; 0x22de <qtm_acquisition_process+0x2a2>
    20da:	12 96       	adiw	r26, 0x02	; 2
    20dc:	cd 91       	ld	r28, X+
    20de:	dc 91       	ld	r29, X
    20e0:	13 97       	sbiw	r26, 0x03	; 3
    20e2:	c0 0f       	add	r28, r16
    20e4:	d1 1f       	adc	r29, r17
    20e6:	4e 81       	ldd	r20, Y+6	; 0x06
    20e8:	4f 70       	andi	r20, 0x0F	; 15
    20ea:	9f 81       	ldd	r25, Y+7	; 0x07
    20ec:	49 17       	cp	r20, r25
    20ee:	10 f4       	brcc	.+4      	; 0x20f4 <qtm_acquisition_process+0xb8>
    20f0:	94 1b       	sub	r25, r20
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <qtm_acquisition_process+0xba>
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <qtm_acquisition_process+0xc0>
    20f8:	36 95       	lsr	r19
    20fa:	27 95       	ror	r18
    20fc:	9a 95       	dec	r25
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <qtm_acquisition_process+0xbc>
    2100:	21 83       	std	Z+1, r18	; 0x01
    2102:	32 83       	std	Z+2, r19	; 0x02
    2104:	ed c0       	rjmp	.+474    	; 0x22e0 <qtm_acquisition_process+0x2a4>
    2106:	12 96       	adiw	r26, 0x02	; 2
    2108:	4d 91       	ld	r20, X+
    210a:	5c 91       	ld	r21, X
    210c:	13 97       	sbiw	r26, 0x03	; 3
    210e:	40 0f       	add	r20, r16
    2110:	51 1f       	adc	r21, r17
    2112:	ea 01       	movw	r28, r20
    2114:	0f 80       	ldd	r0, Y+7	; 0x07
    2116:	02 c0       	rjmp	.+4      	; 0x211c <qtm_acquisition_process+0xe0>
    2118:	36 95       	lsr	r19
    211a:	27 95       	ror	r18
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <qtm_acquisition_process+0xdc>
    2120:	21 83       	std	Z+1, r18	; 0x01
    2122:	32 83       	std	Z+2, r19	; 0x02
    2124:	a3 80       	ldd	r10, Z+3	; 0x03
    2126:	b4 80       	ldd	r11, Z+4	; 0x04
    2128:	21 15       	cp	r18, r1
    212a:	d2 e0       	ldi	r29, 0x02	; 2
    212c:	3d 07       	cpc	r19, r29
    212e:	20 f0       	brcs	.+8      	; 0x2138 <qtm_acquisition_process+0xfc>
    2130:	2f 5f       	subi	r18, 0xFF	; 255
    2132:	31 40       	sbci	r19, 0x01	; 1
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	05 c0       	rjmp	.+10     	; 0x2142 <qtm_acquisition_process+0x106>
    2138:	a4 01       	movw	r20, r8
    213a:	42 1b       	sub	r20, r18
    213c:	53 0b       	sbc	r21, r19
    213e:	9a 01       	movw	r18, r20
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	e3 01       	movw	r28, r6
    2144:	5a 80       	ldd	r5, Y+2	; 0x02
    2146:	d0 e4       	ldi	r29, 0x40	; 64
    2148:	5d 12       	cpse	r5, r29
    214a:	05 c0       	rjmp	.+10     	; 0x2156 <qtm_acquisition_process+0x11a>
    214c:	36 95       	lsr	r19
    214e:	27 95       	ror	r18
    2150:	99 23       	and	r25, r25
    2152:	19 f0       	breq	.+6      	; 0x215a <qtm_acquisition_process+0x11e>
    2154:	09 c0       	rjmp	.+18     	; 0x2168 <qtm_acquisition_process+0x12c>
    2156:	99 23       	and	r25, r25
    2158:	39 f0       	breq	.+14     	; 0x2168 <qtm_acquisition_process+0x12c>
    215a:	4f ef       	ldi	r20, 0xFF	; 255
    215c:	a4 16       	cp	r10, r20
    215e:	b4 06       	cpc	r11, r20
    2160:	31 f4       	brne	.+12     	; 0x216e <qtm_acquisition_process+0x132>
    2162:	40 82       	st	Z, r4
    2164:	8e e0       	ldi	r24, 0x0E	; 14
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <qtm_acquisition_process+0x13a>
    2168:	77 24       	eor	r7, r7
    216a:	73 94       	inc	r7
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <qtm_acquisition_process+0x134>
    216e:	71 2c       	mov	r7, r1
    2170:	2a 30       	cpi	r18, 0x0A	; 10
    2172:	31 05       	cpc	r19, r1
    2174:	90 f4       	brcc	.+36     	; 0x219a <qtm_acquisition_process+0x15e>
    2176:	14 96       	adiw	r26, 0x04	; 4
    2178:	ed 91       	ld	r30, X+
    217a:	fc 91       	ld	r31, X
    217c:	15 97       	sbiw	r26, 0x05	; 5
    217e:	e6 0f       	add	r30, r22
    2180:	f7 1f       	adc	r31, r23
    2182:	90 81       	ld	r25, Z
    2184:	97 ff       	sbrs	r25, 7
    2186:	30 82       	st	Z, r3
    2188:	14 96       	adiw	r26, 0x04	; 4
    218a:	ed 91       	ld	r30, X+
    218c:	fc 91       	ld	r31, X
    218e:	15 97       	sbiw	r26, 0x05	; 5
    2190:	e6 0f       	add	r30, r22
    2192:	f7 1f       	adc	r31, r23
    2194:	a3 82       	std	Z+3, r10	; 0x03
    2196:	b4 82       	std	Z+4, r11	; 0x04
    2198:	a3 c0       	rjmp	.+326    	; 0x22e0 <qtm_acquisition_process+0x2a4>
    219a:	e5 01       	movw	r28, r10
    219c:	cd 2f       	mov	r28, r29
    219e:	dd 27       	eor	r29, r29
    21a0:	c2 95       	swap	r28
    21a2:	cf 70       	andi	r28, 0x0F	; 15
    21a4:	9c 2f       	mov	r25, r28
    21a6:	a5 01       	movw	r20, r10
    21a8:	44 27       	eor	r20, r20
    21aa:	5f 70       	andi	r21, 0x0F	; 15
    21ac:	65 2e       	mov	r6, r21
    21ae:	a5 01       	movw	r20, r10
    21b0:	40 7f       	andi	r20, 0xF0	; 240
    21b2:	55 27       	eor	r21, r21
    21b4:	52 95       	swap	r21
    21b6:	42 95       	swap	r20
    21b8:	4f 70       	andi	r20, 0x0F	; 15
    21ba:	45 27       	eor	r20, r21
    21bc:	5f 70       	andi	r21, 0x0F	; 15
    21be:	45 27       	eor	r20, r21
    21c0:	5a 2d       	mov	r21, r10
    21c2:	5f 70       	andi	r21, 0x0F	; 15
    21c4:	a5 2e       	mov	r10, r21
    21c6:	c4 30       	cpi	r28, 0x04	; 4
    21c8:	30 f0       	brcs	.+12     	; 0x21d6 <qtm_acquisition_process+0x19a>
    21ca:	93 70       	andi	r25, 0x03	; 3
    21cc:	d6 95       	lsr	r29
    21ce:	c7 95       	ror	r28
    21d0:	d6 95       	lsr	r29
    21d2:	c7 95       	ror	r28
    21d4:	9c 0f       	add	r25, r28
    21d6:	71 10       	cpse	r7, r1
    21d8:	3c c0       	rjmp	.+120    	; 0x2252 <qtm_acquisition_process+0x216>
    21da:	50 e8       	ldi	r21, 0x80	; 128
    21dc:	55 0d       	add	r21, r5
    21de:	52 30       	cpi	r21, 0x02	; 2
    21e0:	10 f4       	brcc	.+4      	; 0x21e6 <qtm_acquisition_process+0x1aa>
    21e2:	56 e0       	ldi	r21, 0x06	; 6
    21e4:	07 c0       	rjmp	.+14     	; 0x21f4 <qtm_acquisition_process+0x1b8>
    21e6:	53 e0       	ldi	r21, 0x03	; 3
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <qtm_acquisition_process+0x1b8>
    21ea:	95 17       	cp	r25, r21
    21ec:	68 f4       	brcc	.+26     	; 0x2208 <qtm_acquisition_process+0x1cc>
    21ee:	9f 5f       	subi	r25, 0xFF	; 255
    21f0:	2f 5c       	subi	r18, 0xCF	; 207
    21f2:	31 09       	sbc	r19, r1
    21f4:	20 3d       	cpi	r18, 0xD0	; 208
    21f6:	31 05       	cpc	r19, r1
    21f8:	c0 f7       	brcc	.-16     	; 0x21ea <qtm_acquisition_process+0x1ae>
    21fa:	06 c0       	rjmp	.+12     	; 0x2208 <qtm_acquisition_process+0x1cc>
    21fc:	cf e0       	ldi	r28, 0x0F	; 15
    21fe:	6c 16       	cp	r6, r28
    2200:	49 f0       	breq	.+18     	; 0x2214 <qtm_acquisition_process+0x1d8>
    2202:	63 94       	inc	r6
    2204:	25 51       	subi	r18, 0x15	; 21
    2206:	31 09       	sbc	r19, r1
    2208:	26 31       	cpi	r18, 0x16	; 22
    220a:	31 05       	cpc	r19, r1
    220c:	b8 f7       	brcc	.-18     	; 0x21fc <qtm_acquisition_process+0x1c0>
    220e:	df e0       	ldi	r29, 0x0F	; 15
    2210:	6d 12       	cpse	r6, r29
    2212:	0e c0       	rjmp	.+28     	; 0x2230 <qtm_acquisition_process+0x1f4>
    2214:	95 17       	cp	r25, r21
    2216:	20 f4       	brcc	.+8      	; 0x2220 <qtm_acquisition_process+0x1e4>
    2218:	9f 5f       	subi	r25, 0xFF	; 255
    221a:	d5 e0       	ldi	r29, 0x05	; 5
    221c:	6d 2e       	mov	r6, r29
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <qtm_acquisition_process+0x1f4>
    2220:	cf e0       	ldi	r28, 0x0F	; 15
    2222:	6c 2e       	mov	r6, r28
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <qtm_acquisition_process+0x1f4>
    2226:	4f 30       	cpi	r20, 0x0F	; 15
    2228:	49 f0       	breq	.+18     	; 0x223c <qtm_acquisition_process+0x200>
    222a:	4f 5f       	subi	r20, 0xFF	; 255
    222c:	22 50       	subi	r18, 0x02	; 2
    222e:	31 09       	sbc	r19, r1
    2230:	23 30       	cpi	r18, 0x03	; 3
    2232:	31 05       	cpc	r19, r1
    2234:	c0 f7       	brcc	.-16     	; 0x2226 <qtm_acquisition_process+0x1ea>
    2236:	4f 30       	cpi	r20, 0x0F	; 15
    2238:	09 f0       	breq	.+2      	; 0x223c <qtm_acquisition_process+0x200>
    223a:	65 c0       	rjmp	.+202    	; 0x2306 <qtm_acquisition_process+0x2ca>
    223c:	4f e0       	ldi	r20, 0x0F	; 15
    223e:	64 16       	cp	r6, r20
    2240:	81 f1       	breq	.+96     	; 0x22a2 <qtm_acquisition_process+0x266>
    2242:	63 94       	inc	r6
    2244:	45 e0       	ldi	r20, 0x05	; 5
    2246:	5f c0       	rjmp	.+190    	; 0x2306 <qtm_acquisition_process+0x2ca>
    2248:	99 23       	and	r25, r25
    224a:	61 f0       	breq	.+24     	; 0x2264 <qtm_acquisition_process+0x228>
    224c:	91 50       	subi	r25, 0x01	; 1
    224e:	2f 5c       	subi	r18, 0xCF	; 207
    2250:	31 09       	sbc	r19, r1
    2252:	20 3d       	cpi	r18, 0xD0	; 208
    2254:	31 05       	cpc	r19, r1
    2256:	c0 f7       	brcc	.-16     	; 0x2248 <qtm_acquisition_process+0x20c>
    2258:	05 c0       	rjmp	.+10     	; 0x2264 <qtm_acquisition_process+0x228>
    225a:	66 20       	and	r6, r6
    225c:	41 f0       	breq	.+16     	; 0x226e <qtm_acquisition_process+0x232>
    225e:	6a 94       	dec	r6
    2260:	25 51       	subi	r18, 0x15	; 21
    2262:	31 09       	sbc	r19, r1
    2264:	26 31       	cpi	r18, 0x16	; 22
    2266:	31 05       	cpc	r19, r1
    2268:	c0 f7       	brcc	.-16     	; 0x225a <qtm_acquisition_process+0x21e>
    226a:	61 10       	cpse	r6, r1
    226c:	0d c0       	rjmp	.+26     	; 0x2288 <qtm_acquisition_process+0x24c>
    226e:	99 23       	and	r25, r25
    2270:	21 f0       	breq	.+8      	; 0x227a <qtm_acquisition_process+0x23e>
    2272:	91 50       	subi	r25, 0x01	; 1
    2274:	5a e0       	ldi	r21, 0x0A	; 10
    2276:	65 2e       	mov	r6, r21
    2278:	07 c0       	rjmp	.+14     	; 0x2288 <qtm_acquisition_process+0x24c>
    227a:	61 2c       	mov	r6, r1
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <qtm_acquisition_process+0x24c>
    227e:	44 23       	and	r20, r20
    2280:	41 f0       	breq	.+16     	; 0x2292 <qtm_acquisition_process+0x256>
    2282:	41 50       	subi	r20, 0x01	; 1
    2284:	22 50       	subi	r18, 0x02	; 2
    2286:	31 09       	sbc	r19, r1
    2288:	23 30       	cpi	r18, 0x03	; 3
    228a:	31 05       	cpc	r19, r1
    228c:	c0 f7       	brcc	.-16     	; 0x227e <qtm_acquisition_process+0x242>
    228e:	41 11       	cpse	r20, r1
    2290:	10 c0       	rjmp	.+32     	; 0x22b2 <qtm_acquisition_process+0x276>
    2292:	66 20       	and	r6, r6
    2294:	e9 f1       	breq	.+122    	; 0x2310 <qtm_acquisition_process+0x2d4>
    2296:	6a 94       	dec	r6
    2298:	4a e0       	ldi	r20, 0x0A	; 10
    229a:	23 30       	cpi	r18, 0x03	; 3
    229c:	31 05       	cpc	r19, r1
    229e:	c8 f6       	brcc	.-78     	; 0x2252 <qtm_acquisition_process+0x216>
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <qtm_acquisition_process+0x276>
    22a2:	59 13       	cpse	r21, r25
    22a4:	2f c0       	rjmp	.+94     	; 0x2304 <qtm_acquisition_process+0x2c8>
    22a6:	23 30       	cpi	r18, 0x03	; 3
    22a8:	31 05       	cpc	r19, r1
    22aa:	40 f1       	brcs	.+80     	; 0x22fc <qtm_acquisition_process+0x2c0>
    22ac:	4f e0       	ldi	r20, 0x0F	; 15
    22ae:	a4 2e       	mov	r10, r20
    22b0:	4f e0       	ldi	r20, 0x0F	; 15
    22b2:	94 30       	cpi	r25, 0x04	; 4
    22b4:	18 f0       	brcs	.+6      	; 0x22bc <qtm_acquisition_process+0x280>
    22b6:	99 0f       	add	r25, r25
    22b8:	99 0f       	add	r25, r25
    22ba:	99 50       	subi	r25, 0x09	; 9
    22bc:	c0 e1       	ldi	r28, 0x10	; 16
    22be:	4c 9f       	mul	r20, r28
    22c0:	a0 01       	movw	r20, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	56 29       	or	r21, r6
    22c6:	4a 29       	or	r20, r10
    22c8:	c9 2f       	mov	r28, r25
    22ca:	d0 e0       	ldi	r29, 0x00	; 0
    22cc:	dc 2f       	mov	r29, r28
    22ce:	cc 27       	eor	r28, r28
    22d0:	d2 95       	swap	r29
    22d2:	d0 7f       	andi	r29, 0xF0	; 240
    22d4:	4c 2b       	or	r20, r28
    22d6:	5d 2b       	or	r21, r29
    22d8:	43 83       	std	Z+3, r20	; 0x03
    22da:	54 83       	std	Z+4, r21	; 0x04
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <qtm_acquisition_process+0x2a4>
    22de:	ff cf       	rjmp	.-2      	; 0x22de <qtm_acquisition_process+0x2a2>
    22e0:	df ef       	ldi	r29, 0xFF	; 255
    22e2:	ed 1a       	sub	r14, r29
    22e4:	fd 0a       	sbc	r15, r29
    22e6:	6b 5f       	subi	r22, 0xFB	; 251
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	08 5f       	subi	r16, 0xF8	; 248
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	d3 ce       	rjmp	.-602    	; 0x2096 <qtm_acquisition_process+0x5a>
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	90 93 a5 38 	sts	0x38A5, r25	; 0x8038a5 <touch_seq_lib_state>
    22f6:	0e c0       	rjmp	.+28     	; 0x2314 <qtm_acquisition_process+0x2d8>
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	0c c0       	rjmp	.+24     	; 0x2314 <qtm_acquisition_process+0x2d8>
    22fc:	4f e0       	ldi	r20, 0x0F	; 15
    22fe:	2f e0       	ldi	r18, 0x0F	; 15
    2300:	a2 2e       	mov	r10, r18
    2302:	d7 cf       	rjmp	.-82     	; 0x22b2 <qtm_acquisition_process+0x276>
    2304:	4f e0       	ldi	r20, 0x0F	; 15
    2306:	23 30       	cpi	r18, 0x03	; 3
    2308:	31 05       	cpc	r19, r1
    230a:	08 f0       	brcs	.+2      	; 0x230e <qtm_acquisition_process+0x2d2>
    230c:	73 cf       	rjmp	.-282    	; 0x21f4 <qtm_acquisition_process+0x1b8>
    230e:	d1 cf       	rjmp	.-94     	; 0x22b2 <qtm_acquisition_process+0x276>
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	cf cf       	rjmp	.-98     	; 0x22b2 <qtm_acquisition_process+0x276>
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	df 90       	pop	r13
    2322:	cf 90       	pop	r12
    2324:	bf 90       	pop	r11
    2326:	af 90       	pop	r10
    2328:	9f 90       	pop	r9
    232a:	8f 90       	pop	r8
    232c:	7f 90       	pop	r7
    232e:	6f 90       	pop	r6
    2330:	5f 90       	pop	r5
    2332:	4f 90       	pop	r4
    2334:	3f 90       	pop	r3
    2336:	08 95       	ret

00002338 <qtm_ptc_init_acquisition_module>:
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	e1 f1       	breq	.+120    	; 0x23b8 <qtm_ptc_init_acquisition_module+0x80>
    2340:	dc 01       	movw	r26, r24
    2342:	ed 91       	ld	r30, X+
    2344:	fc 91       	ld	r31, X
    2346:	a0 81       	ld	r26, Z
    2348:	b1 81       	ldd	r27, Z+1	; 0x01
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a 17       	cp	r20, r26
    2358:	5b 07       	cpc	r21, r27
    235a:	99 f0       	breq	.+38     	; 0x2382 <qtm_ptc_init_acquisition_module+0x4a>
    235c:	ec 01       	movw	r28, r24
    235e:	ea 81       	ldd	r30, Y+2	; 0x02
    2360:	fb 81       	ldd	r31, Y+3	; 0x03
    2362:	e6 0f       	add	r30, r22
    2364:	f7 1f       	adc	r31, r23
    2366:	c0 81       	ld	r28, Z
    2368:	d1 81       	ldd	r29, Z+1	; 0x01
    236a:	02 80       	ldd	r0, Z+2	; 0x02
    236c:	f3 81       	ldd	r31, Z+3	; 0x03
    236e:	e0 2d       	mov	r30, r0
    2370:	ec 2b       	or	r30, r28
    2372:	fd 2b       	or	r31, r29
    2374:	2e 2b       	or	r18, r30
    2376:	3f 2b       	or	r19, r31
    2378:	4f 5f       	subi	r20, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255
    237c:	68 5f       	subi	r22, 0xF8	; 248
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	ea cf       	rjmp	.-44     	; 0x2356 <qtm_ptc_init_acquisition_module+0x1e>
    2382:	21 15       	cp	r18, r1
    2384:	31 05       	cpc	r19, r1
    2386:	d1 f0       	breq	.+52     	; 0x23bc <qtm_ptc_init_acquisition_module+0x84>
    2388:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <touch_seq_lib_state>
    238c:	81 11       	cpse	r24, r1
    238e:	08 c0       	rjmp	.+16     	; 0x23a0 <qtm_ptc_init_acquisition_module+0x68>
    2390:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <gain_setting_int_cap+0x7f5bff>
    2394:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <gain_setting_int_cap+0x7f5c00>
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <touch_seq_lib_state>
    239e:	0a c0       	rjmp	.+20     	; 0x23b4 <qtm_ptc_init_acquisition_module+0x7c>
    23a0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <gain_setting_int_cap+0x7f5bff>
    23a4:	82 2b       	or	r24, r18
    23a6:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <gain_setting_int_cap+0x7f5bff>
    23aa:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <gain_setting_int_cap+0x7f5c00>
    23ae:	83 2b       	or	r24, r19
    23b0:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <gain_setting_int_cap+0x7f5c00>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <qtm_ptc_init_acquisition_module+0x86>
    23b8:	8b e0       	ldi	r24, 0x0B	; 11
    23ba:	01 c0       	rjmp	.+2      	; 0x23be <qtm_ptc_init_acquisition_module+0x86>
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <qtm_ptc_qtlib_assign_signal_memory>:
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    23c8:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <qtm_raw_data_measurements_ptr>
    23cc:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <qtm_raw_data_measurements_ptr+0x1>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	08 95       	ret
    23d4:	8b e0       	ldi	r24, 0x0B	; 11
    23d6:	08 95       	ret

000023d8 <qtm_ptc_start_measurement_seq>:
    23d8:	61 15       	cp	r22, r1
    23da:	71 05       	cpc	r23, r1
    23dc:	a1 f1       	breq	.+104    	; 0x2446 <qtm_ptc_start_measurement_seq+0x6e>
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	91 f1       	breq	.+100    	; 0x2446 <qtm_ptc_start_measurement_seq+0x6e>
    23e2:	20 91 a5 38 	lds	r18, 0x38A5	; 0x8038a5 <touch_seq_lib_state>
    23e6:	22 23       	and	r18, r18
    23e8:	81 f1       	breq	.+96     	; 0x244a <qtm_ptc_start_measurement_seq+0x72>
    23ea:	24 30       	cpi	r18, 0x04	; 4
    23ec:	81 f1       	breq	.+96     	; 0x244e <qtm_ptc_start_measurement_seq+0x76>
    23ee:	80 93 72 39 	sts	0x3972, r24	; 0x803972 <qtm_acquisition_control_working_set_ptr>
    23f2:	90 93 73 39 	sts	0x3973, r25	; 0x803973 <qtm_acquisition_control_working_set_ptr+0x1>
    23f6:	60 93 a3 38 	sts	0x38A3, r22	; 0x8038a3 <ptc_seq_measure_complete_pointer>
    23fa:	70 93 a4 38 	sts	0x38A4, r23	; 0x8038a4 <ptc_seq_measure_complete_pointer+0x1>
    23fe:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2402:	dc 01       	movw	r26, r24
    2404:	ed 91       	ld	r30, X+
    2406:	fc 91       	ld	r31, X
    2408:	22 81       	ldd	r18, Z+2	; 0x02
    240a:	20 34       	cpi	r18, 0x40	; 64
    240c:	39 f4       	brne	.+14     	; 0x241c <qtm_ptc_start_measurement_seq+0x44>
    240e:	20 ec       	ldi	r18, 0xC0	; 192
    2410:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2414:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2418:	20 62       	ori	r18, 0x20	; 32
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <qtm_ptc_start_measurement_seq+0x4e>
    241c:	20 38       	cpi	r18, 0x80	; 128
    241e:	41 f4       	brne	.+16     	; 0x2430 <qtm_ptc_start_measurement_seq+0x58>
    2420:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2424:	28 62       	ori	r18, 0x28	; 40
    2426:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    242a:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <gain_setting_int_cap+0x7f5bfb>
    242e:	13 c0       	rjmp	.+38     	; 0x2456 <qtm_ptc_start_measurement_seq+0x7e>
    2430:	21 38       	cpi	r18, 0x81	; 129
    2432:	79 f4       	brne	.+30     	; 0x2452 <qtm_ptc_start_measurement_seq+0x7a>
    2434:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    2438:	28 62       	ori	r18, 0x28	; 40
    243a:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5bf5>
    243e:	26 e8       	ldi	r18, 0x86	; 134
    2440:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <gain_setting_int_cap+0x7f5bfb>
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <qtm_ptc_start_measurement_seq+0x7e>
    2446:	8b e0       	ldi	r24, 0x0B	; 11
    2448:	08 95       	ret
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	08 95       	ret
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	08 95       	ret
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	08 95       	ret
    2456:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f5bdd>
    245a:	dc 01       	movw	r26, r24
    245c:	ed 91       	ld	r30, X+
    245e:	fc 91       	ld	r31, X
    2460:	84 81       	ldd	r24, Z+4	; 0x04
    2462:	80 31       	cpi	r24, 0x10	; 16
    2464:	08 f0       	brcs	.+2      	; 0x2468 <qtm_ptc_start_measurement_seq+0x90>
    2466:	80 e1       	ldi	r24, 0x10	; 16
    2468:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <gain_setting_int_cap+0x7f5be0>
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <gain_setting_int_cap+0x7f5be8>
    2472:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <gain_setting_int_cap+0x7f5be7>
    2476:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <qtm_which_mode_current>
    247a:	10 92 a6 38 	sts	0x38A6, r1	; 0x8038a6 <current_measure_channel>
    247e:	10 92 a7 38 	sts	0x38A7, r1	; 0x8038a7 <current_measure_channel+0x1>
    2482:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <select_next_channel_to_measure>
    2486:	81 11       	cpse	r24, r1
    2488:	0b c0       	rjmp	.+22     	; 0x24a0 <qtm_ptc_start_measurement_seq+0xc8>
    248a:	84 e0       	ldi	r24, 0x04	; 4
    248c:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <touch_seq_lib_state>
    2490:	80 91 a6 38 	lds	r24, 0x38A6	; 0x8038a6 <current_measure_channel>
    2494:	90 91 a7 38 	lds	r25, 0x38A7	; 0x8038a7 <current_measure_channel+0x1>
    2498:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <qtm_measure_node>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	08 95       	ret
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <touch_seq_lib_state>
    24a6:	08 95       	ret

000024a8 <qtm_enable_sensor_node>:
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	c9 f0       	breq	.+50     	; 0x24de <qtm_enable_sensor_node+0x36>
    24ac:	dc 01       	movw	r26, r24
    24ae:	ed 91       	ld	r30, X+
    24b0:	fc 91       	ld	r31, X
    24b2:	11 97       	sbiw	r26, 0x01	; 1
    24b4:	20 81       	ld	r18, Z
    24b6:	31 81       	ldd	r19, Z+1	; 0x01
    24b8:	26 17       	cp	r18, r22
    24ba:	37 07       	cpc	r19, r23
    24bc:	90 f0       	brcs	.+36     	; 0x24e2 <qtm_enable_sensor_node+0x3a>
    24be:	45 e0       	ldi	r20, 0x05	; 5
    24c0:	46 9f       	mul	r20, r22
    24c2:	90 01       	movw	r18, r0
    24c4:	47 9f       	mul	r20, r23
    24c6:	30 0d       	add	r19, r0
    24c8:	11 24       	eor	r1, r1
    24ca:	14 96       	adiw	r26, 0x04	; 4
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	15 97       	sbiw	r26, 0x05	; 5
    24d2:	e2 0f       	add	r30, r18
    24d4:	f3 1f       	adc	r31, r19
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	80 83       	st	Z, r24
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	08 95       	ret
    24de:	8b e0       	ldi	r24, 0x0B	; 11
    24e0:	08 95       	ret
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	08 95       	ret

000024e6 <qtm_calibrate_sensor_node>:
    24e6:	fc 01       	movw	r30, r24
    24e8:	89 2b       	or	r24, r25
    24ea:	d1 f1       	breq	.+116    	; 0x2560 <qtm_calibrate_sensor_node+0x7a>
    24ec:	a0 81       	ld	r26, Z
    24ee:	b1 81       	ldd	r27, Z+1	; 0x01
    24f0:	8d 91       	ld	r24, X+
    24f2:	9c 91       	ld	r25, X
    24f4:	11 97       	sbiw	r26, 0x01	; 1
    24f6:	86 17       	cp	r24, r22
    24f8:	97 07       	cpc	r25, r23
    24fa:	a0 f1       	brcs	.+104    	; 0x2564 <qtm_calibrate_sensor_node+0x7e>
    24fc:	12 96       	adiw	r26, 0x02	; 2
    24fe:	9c 91       	ld	r25, X
    2500:	04 80       	ldd	r0, Z+4	; 0x04
    2502:	f5 81       	ldd	r31, Z+5	; 0x05
    2504:	e0 2d       	mov	r30, r0
    2506:	90 34       	cpi	r25, 0x40	; 64
    2508:	59 f4       	brne	.+22     	; 0x2520 <qtm_calibrate_sensor_node+0x3a>
    250a:	85 e0       	ldi	r24, 0x05	; 5
    250c:	86 9f       	mul	r24, r22
    250e:	d0 01       	movw	r26, r0
    2510:	87 9f       	mul	r24, r23
    2512:	b0 0d       	add	r27, r0
    2514:	11 24       	eor	r1, r1
    2516:	ae 0f       	add	r26, r30
    2518:	bf 1f       	adc	r27, r31
    251a:	84 e3       	ldi	r24, 0x34	; 52
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	0d c0       	rjmp	.+26     	; 0x253a <qtm_calibrate_sensor_node+0x54>
    2520:	90 58       	subi	r25, 0x80	; 128
    2522:	92 30       	cpi	r25, 0x02	; 2
    2524:	80 f4       	brcc	.+32     	; 0x2546 <qtm_calibrate_sensor_node+0x60>
    2526:	85 e0       	ldi	r24, 0x05	; 5
    2528:	86 9f       	mul	r24, r22
    252a:	d0 01       	movw	r26, r0
    252c:	87 9f       	mul	r24, r23
    252e:	b0 0d       	add	r27, r0
    2530:	11 24       	eor	r1, r1
    2532:	ae 0f       	add	r26, r30
    2534:	bf 1f       	adc	r27, r31
    2536:	87 e6       	ldi	r24, 0x67	; 103
    2538:	95 e0       	ldi	r25, 0x05	; 5
    253a:	13 96       	adiw	r26, 0x03	; 3
    253c:	8d 93       	st	X+, r24
    253e:	9c 93       	st	X, r25
    2540:	14 97       	sbiw	r26, 0x04	; 4
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <qtm_calibrate_sensor_node+0x62>
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	95 e0       	ldi	r25, 0x05	; 5
    254a:	96 9f       	mul	r25, r22
    254c:	90 01       	movw	r18, r0
    254e:	97 9f       	mul	r25, r23
    2550:	30 0d       	add	r19, r0
    2552:	11 24       	eor	r1, r1
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	90 81       	ld	r25, Z
    255a:	92 60       	ori	r25, 0x02	; 2
    255c:	90 83       	st	Z, r25
    255e:	08 95       	ret
    2560:	8b e0       	ldi	r24, 0x0B	; 11
    2562:	08 95       	ret
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	08 95       	ret

00002568 <qtm_t161x_ptc_handler_eoc>:
    2568:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f5bdd>
    256c:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f5bed>
    2570:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f5bee>
    2574:	80 91 a6 38 	lds	r24, 0x38A6	; 0x8038a6 <current_measure_channel>
    2578:	90 91 a7 38 	lds	r25, 0x38A7	; 0x8038a7 <current_measure_channel+0x1>
    257c:	9c 01       	movw	r18, r24
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	e0 91 74 39 	lds	r30, 0x3974	; 0x803974 <qtm_raw_data_measurements_ptr>
    2586:	f0 91 75 39 	lds	r31, 0x3975	; 0x803975 <qtm_raw_data_measurements_ptr+0x1>
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	40 83       	st	Z, r20
    2590:	51 83       	std	Z+1, r21	; 0x01
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	80 93 a6 38 	sts	0x38A6, r24	; 0x8038a6 <current_measure_channel>
    2598:	90 93 a7 38 	sts	0x38A7, r25	; 0x8038a7 <current_measure_channel+0x1>
    259c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <select_next_channel_to_measure>
    25a0:	81 11       	cpse	r24, r1
    25a2:	09 c0       	rjmp	.+18     	; 0x25b6 <qtm_t161x_ptc_handler_eoc+0x4e>
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <touch_seq_lib_state>
    25aa:	80 91 a6 38 	lds	r24, 0x38A6	; 0x8038a6 <current_measure_channel>
    25ae:	90 91 a7 38 	lds	r25, 0x38A7	; 0x8038a7 <current_measure_channel+0x1>
    25b2:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <qtm_measure_node>
    25b6:	e0 91 a3 38 	lds	r30, 0x38A3	; 0x8038a3 <ptc_seq_measure_complete_pointer>
    25ba:	f0 91 a4 38 	lds	r31, 0x38A4	; 0x8038a4 <ptc_seq_measure_complete_pointer+0x1>
    25be:	09 94       	ijmp

000025c0 <__subsf3>:
    25c0:	50 58       	subi	r21, 0x80	; 128

000025c2 <__addsf3>:
    25c2:	bb 27       	eor	r27, r27
    25c4:	aa 27       	eor	r26, r26
    25c6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__addsf3x>
    25ca:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__fp_round>
    25ce:	0e 94 34 14 	call	0x2868	; 0x2868 <__fp_pscA>
    25d2:	38 f0       	brcs	.+14     	; 0x25e2 <__addsf3+0x20>
    25d4:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fp_pscB>
    25d8:	20 f0       	brcs	.+8      	; 0x25e2 <__addsf3+0x20>
    25da:	39 f4       	brne	.+14     	; 0x25ea <__addsf3+0x28>
    25dc:	9f 3f       	cpi	r25, 0xFF	; 255
    25de:	19 f4       	brne	.+6      	; 0x25e6 <__addsf3+0x24>
    25e0:	26 f4       	brtc	.+8      	; 0x25ea <__addsf3+0x28>
    25e2:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__fp_nan>
    25e6:	0e f4       	brtc	.+2      	; 0x25ea <__addsf3+0x28>
    25e8:	e0 95       	com	r30
    25ea:	e7 fb       	bst	r30, 7
    25ec:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__fp_inf>

000025f0 <__addsf3x>:
    25f0:	e9 2f       	mov	r30, r25
    25f2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_split3>
    25f6:	58 f3       	brcs	.-42     	; 0x25ce <__addsf3+0xc>
    25f8:	ba 17       	cp	r27, r26
    25fa:	62 07       	cpc	r22, r18
    25fc:	73 07       	cpc	r23, r19
    25fe:	84 07       	cpc	r24, r20
    2600:	95 07       	cpc	r25, r21
    2602:	20 f0       	brcs	.+8      	; 0x260c <__addsf3x+0x1c>
    2604:	79 f4       	brne	.+30     	; 0x2624 <__addsf3x+0x34>
    2606:	a6 f5       	brtc	.+104    	; 0x2670 <__addsf3x+0x80>
    2608:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_zero>
    260c:	0e f4       	brtc	.+2      	; 0x2610 <__addsf3x+0x20>
    260e:	e0 95       	com	r30
    2610:	0b 2e       	mov	r0, r27
    2612:	ba 2f       	mov	r27, r26
    2614:	a0 2d       	mov	r26, r0
    2616:	0b 01       	movw	r0, r22
    2618:	b9 01       	movw	r22, r18
    261a:	90 01       	movw	r18, r0
    261c:	0c 01       	movw	r0, r24
    261e:	ca 01       	movw	r24, r20
    2620:	a0 01       	movw	r20, r0
    2622:	11 24       	eor	r1, r1
    2624:	ff 27       	eor	r31, r31
    2626:	59 1b       	sub	r21, r25
    2628:	99 f0       	breq	.+38     	; 0x2650 <__addsf3x+0x60>
    262a:	59 3f       	cpi	r21, 0xF9	; 249
    262c:	50 f4       	brcc	.+20     	; 0x2642 <__addsf3x+0x52>
    262e:	50 3e       	cpi	r21, 0xE0	; 224
    2630:	68 f1       	brcs	.+90     	; 0x268c <__addsf3x+0x9c>
    2632:	1a 16       	cp	r1, r26
    2634:	f0 40       	sbci	r31, 0x00	; 0
    2636:	a2 2f       	mov	r26, r18
    2638:	23 2f       	mov	r18, r19
    263a:	34 2f       	mov	r19, r20
    263c:	44 27       	eor	r20, r20
    263e:	58 5f       	subi	r21, 0xF8	; 248
    2640:	f3 cf       	rjmp	.-26     	; 0x2628 <__addsf3x+0x38>
    2642:	46 95       	lsr	r20
    2644:	37 95       	ror	r19
    2646:	27 95       	ror	r18
    2648:	a7 95       	ror	r26
    264a:	f0 40       	sbci	r31, 0x00	; 0
    264c:	53 95       	inc	r21
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__addsf3x+0x52>
    2650:	7e f4       	brtc	.+30     	; 0x2670 <__addsf3x+0x80>
    2652:	1f 16       	cp	r1, r31
    2654:	ba 0b       	sbc	r27, r26
    2656:	62 0b       	sbc	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	ba f0       	brmi	.+46     	; 0x268c <__addsf3x+0x9c>
    265e:	91 50       	subi	r25, 0x01	; 1
    2660:	a1 f0       	breq	.+40     	; 0x268a <__addsf3x+0x9a>
    2662:	ff 0f       	add	r31, r31
    2664:	bb 1f       	adc	r27, r27
    2666:	66 1f       	adc	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	c2 f7       	brpl	.-16     	; 0x265e <__addsf3x+0x6e>
    266e:	0e c0       	rjmp	.+28     	; 0x268c <__addsf3x+0x9c>
    2670:	ba 0f       	add	r27, r26
    2672:	62 1f       	adc	r22, r18
    2674:	73 1f       	adc	r23, r19
    2676:	84 1f       	adc	r24, r20
    2678:	48 f4       	brcc	.+18     	; 0x268c <__addsf3x+0x9c>
    267a:	87 95       	ror	r24
    267c:	77 95       	ror	r23
    267e:	67 95       	ror	r22
    2680:	b7 95       	ror	r27
    2682:	f7 95       	ror	r31
    2684:	9e 3f       	cpi	r25, 0xFE	; 254
    2686:	08 f0       	brcs	.+2      	; 0x268a <__addsf3x+0x9a>
    2688:	b0 cf       	rjmp	.-160    	; 0x25ea <__addsf3+0x28>
    268a:	93 95       	inc	r25
    268c:	88 0f       	add	r24, r24
    268e:	08 f0       	brcs	.+2      	; 0x2692 <__addsf3x+0xa2>
    2690:	99 27       	eor	r25, r25
    2692:	ee 0f       	add	r30, r30
    2694:	97 95       	ror	r25
    2696:	87 95       	ror	r24
    2698:	08 95       	ret

0000269a <__divsf3>:
    269a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3x>
    269e:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__fp_round>
    26a2:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fp_pscB>
    26a6:	58 f0       	brcs	.+22     	; 0x26be <__divsf3+0x24>
    26a8:	0e 94 34 14 	call	0x2868	; 0x2868 <__fp_pscA>
    26ac:	40 f0       	brcs	.+16     	; 0x26be <__divsf3+0x24>
    26ae:	29 f4       	brne	.+10     	; 0x26ba <__divsf3+0x20>
    26b0:	5f 3f       	cpi	r21, 0xFF	; 255
    26b2:	29 f0       	breq	.+10     	; 0x26be <__divsf3+0x24>
    26b4:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__fp_inf>
    26b8:	51 11       	cpse	r21, r1
    26ba:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__fp_szero>
    26be:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__fp_nan>

000026c2 <__divsf3x>:
    26c2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_split3>
    26c6:	68 f3       	brcs	.-38     	; 0x26a2 <__divsf3+0x8>

000026c8 <__divsf3_pse>:
    26c8:	99 23       	and	r25, r25
    26ca:	b1 f3       	breq	.-20     	; 0x26b8 <__divsf3+0x1e>
    26cc:	55 23       	and	r21, r21
    26ce:	91 f3       	breq	.-28     	; 0x26b4 <__divsf3+0x1a>
    26d0:	95 1b       	sub	r25, r21
    26d2:	55 0b       	sbc	r21, r21
    26d4:	bb 27       	eor	r27, r27
    26d6:	aa 27       	eor	r26, r26
    26d8:	62 17       	cp	r22, r18
    26da:	73 07       	cpc	r23, r19
    26dc:	84 07       	cpc	r24, r20
    26de:	38 f0       	brcs	.+14     	; 0x26ee <__divsf3_pse+0x26>
    26e0:	9f 5f       	subi	r25, 0xFF	; 255
    26e2:	5f 4f       	sbci	r21, 0xFF	; 255
    26e4:	22 0f       	add	r18, r18
    26e6:	33 1f       	adc	r19, r19
    26e8:	44 1f       	adc	r20, r20
    26ea:	aa 1f       	adc	r26, r26
    26ec:	a9 f3       	breq	.-22     	; 0x26d8 <__divsf3_pse+0x10>
    26ee:	35 d0       	rcall	.+106    	; 0x275a <__divsf3_pse+0x92>
    26f0:	0e 2e       	mov	r0, r30
    26f2:	3a f0       	brmi	.+14     	; 0x2702 <__divsf3_pse+0x3a>
    26f4:	e0 e8       	ldi	r30, 0x80	; 128
    26f6:	32 d0       	rcall	.+100    	; 0x275c <__divsf3_pse+0x94>
    26f8:	91 50       	subi	r25, 0x01	; 1
    26fa:	50 40       	sbci	r21, 0x00	; 0
    26fc:	e6 95       	lsr	r30
    26fe:	00 1c       	adc	r0, r0
    2700:	ca f7       	brpl	.-14     	; 0x26f4 <__divsf3_pse+0x2c>
    2702:	2b d0       	rcall	.+86     	; 0x275a <__divsf3_pse+0x92>
    2704:	fe 2f       	mov	r31, r30
    2706:	29 d0       	rcall	.+82     	; 0x275a <__divsf3_pse+0x92>
    2708:	66 0f       	add	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	88 1f       	adc	r24, r24
    270e:	bb 1f       	adc	r27, r27
    2710:	26 17       	cp	r18, r22
    2712:	37 07       	cpc	r19, r23
    2714:	48 07       	cpc	r20, r24
    2716:	ab 07       	cpc	r26, r27
    2718:	b0 e8       	ldi	r27, 0x80	; 128
    271a:	09 f0       	breq	.+2      	; 0x271e <__divsf3_pse+0x56>
    271c:	bb 0b       	sbc	r27, r27
    271e:	80 2d       	mov	r24, r0
    2720:	bf 01       	movw	r22, r30
    2722:	ff 27       	eor	r31, r31
    2724:	93 58       	subi	r25, 0x83	; 131
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	3a f0       	brmi	.+14     	; 0x2738 <__divsf3_pse+0x70>
    272a:	9e 3f       	cpi	r25, 0xFE	; 254
    272c:	51 05       	cpc	r21, r1
    272e:	78 f0       	brcs	.+30     	; 0x274e <__divsf3_pse+0x86>
    2730:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__fp_inf>
    2734:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__fp_szero>
    2738:	5f 3f       	cpi	r21, 0xFF	; 255
    273a:	e4 f3       	brlt	.-8      	; 0x2734 <__divsf3_pse+0x6c>
    273c:	98 3e       	cpi	r25, 0xE8	; 232
    273e:	d4 f3       	brlt	.-12     	; 0x2734 <__divsf3_pse+0x6c>
    2740:	86 95       	lsr	r24
    2742:	77 95       	ror	r23
    2744:	67 95       	ror	r22
    2746:	b7 95       	ror	r27
    2748:	f7 95       	ror	r31
    274a:	9f 5f       	subi	r25, 0xFF	; 255
    274c:	c9 f7       	brne	.-14     	; 0x2740 <__divsf3_pse+0x78>
    274e:	88 0f       	add	r24, r24
    2750:	91 1d       	adc	r25, r1
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	97 f9       	bld	r25, 7
    2758:	08 95       	ret
    275a:	e1 e0       	ldi	r30, 0x01	; 1
    275c:	66 0f       	add	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	bb 1f       	adc	r27, r27
    2764:	62 17       	cp	r22, r18
    2766:	73 07       	cpc	r23, r19
    2768:	84 07       	cpc	r24, r20
    276a:	ba 07       	cpc	r27, r26
    276c:	20 f0       	brcs	.+8      	; 0x2776 <__divsf3_pse+0xae>
    276e:	62 1b       	sub	r22, r18
    2770:	73 0b       	sbc	r23, r19
    2772:	84 0b       	sbc	r24, r20
    2774:	ba 0b       	sbc	r27, r26
    2776:	ee 1f       	adc	r30, r30
    2778:	88 f7       	brcc	.-30     	; 0x275c <__divsf3_pse+0x94>
    277a:	e0 95       	com	r30
    277c:	08 95       	ret

0000277e <__fixunssfsi>:
    277e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_splitA>
    2782:	88 f0       	brcs	.+34     	; 0x27a6 <__fixunssfsi+0x28>
    2784:	9f 57       	subi	r25, 0x7F	; 127
    2786:	98 f0       	brcs	.+38     	; 0x27ae <__fixunssfsi+0x30>
    2788:	b9 2f       	mov	r27, r25
    278a:	99 27       	eor	r25, r25
    278c:	b7 51       	subi	r27, 0x17	; 23
    278e:	b0 f0       	brcs	.+44     	; 0x27bc <__fixunssfsi+0x3e>
    2790:	e1 f0       	breq	.+56     	; 0x27ca <__fixunssfsi+0x4c>
    2792:	66 0f       	add	r22, r22
    2794:	77 1f       	adc	r23, r23
    2796:	88 1f       	adc	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	1a f0       	brmi	.+6      	; 0x27a2 <__fixunssfsi+0x24>
    279c:	ba 95       	dec	r27
    279e:	c9 f7       	brne	.-14     	; 0x2792 <__fixunssfsi+0x14>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <__fixunssfsi+0x4c>
    27a2:	b1 30       	cpi	r27, 0x01	; 1
    27a4:	91 f0       	breq	.+36     	; 0x27ca <__fixunssfsi+0x4c>
    27a6:	0e 94 75 14 	call	0x28ea	; 0x28ea <__fp_zero>
    27aa:	b1 e0       	ldi	r27, 0x01	; 1
    27ac:	08 95       	ret
    27ae:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__fp_zero>
    27b2:	67 2f       	mov	r22, r23
    27b4:	78 2f       	mov	r23, r24
    27b6:	88 27       	eor	r24, r24
    27b8:	b8 5f       	subi	r27, 0xF8	; 248
    27ba:	39 f0       	breq	.+14     	; 0x27ca <__fixunssfsi+0x4c>
    27bc:	b9 3f       	cpi	r27, 0xF9	; 249
    27be:	cc f3       	brlt	.-14     	; 0x27b2 <__fixunssfsi+0x34>
    27c0:	86 95       	lsr	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b3 95       	inc	r27
    27c8:	d9 f7       	brne	.-10     	; 0x27c0 <__fixunssfsi+0x42>
    27ca:	3e f4       	brtc	.+14     	; 0x27da <__fixunssfsi+0x5c>
    27cc:	90 95       	com	r25
    27ce:	80 95       	com	r24
    27d0:	70 95       	com	r23
    27d2:	61 95       	neg	r22
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8f 4f       	sbci	r24, 0xFF	; 255
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	08 95       	ret

000027dc <__floatunsisf>:
    27dc:	e8 94       	clt
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <__floatsisf+0x12>

000027e0 <__floatsisf>:
    27e0:	97 fb       	bst	r25, 7
    27e2:	3e f4       	brtc	.+14     	; 0x27f2 <__floatsisf+0x12>
    27e4:	90 95       	com	r25
    27e6:	80 95       	com	r24
    27e8:	70 95       	com	r23
    27ea:	61 95       	neg	r22
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255
    27ee:	8f 4f       	sbci	r24, 0xFF	; 255
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	99 23       	and	r25, r25
    27f4:	a9 f0       	breq	.+42     	; 0x2820 <__floatsisf+0x40>
    27f6:	f9 2f       	mov	r31, r25
    27f8:	96 e9       	ldi	r25, 0x96	; 150
    27fa:	bb 27       	eor	r27, r27
    27fc:	93 95       	inc	r25
    27fe:	f6 95       	lsr	r31
    2800:	87 95       	ror	r24
    2802:	77 95       	ror	r23
    2804:	67 95       	ror	r22
    2806:	b7 95       	ror	r27
    2808:	f1 11       	cpse	r31, r1
    280a:	f8 cf       	rjmp	.-16     	; 0x27fc <__floatsisf+0x1c>
    280c:	fa f4       	brpl	.+62     	; 0x284c <__floatsisf+0x6c>
    280e:	bb 0f       	add	r27, r27
    2810:	11 f4       	brne	.+4      	; 0x2816 <__floatsisf+0x36>
    2812:	60 ff       	sbrs	r22, 0
    2814:	1b c0       	rjmp	.+54     	; 0x284c <__floatsisf+0x6c>
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	8f 4f       	sbci	r24, 0xFF	; 255
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	16 c0       	rjmp	.+44     	; 0x284c <__floatsisf+0x6c>
    2820:	88 23       	and	r24, r24
    2822:	11 f0       	breq	.+4      	; 0x2828 <__floatsisf+0x48>
    2824:	96 e9       	ldi	r25, 0x96	; 150
    2826:	11 c0       	rjmp	.+34     	; 0x284a <__floatsisf+0x6a>
    2828:	77 23       	and	r23, r23
    282a:	21 f0       	breq	.+8      	; 0x2834 <__floatsisf+0x54>
    282c:	9e e8       	ldi	r25, 0x8E	; 142
    282e:	87 2f       	mov	r24, r23
    2830:	76 2f       	mov	r23, r22
    2832:	05 c0       	rjmp	.+10     	; 0x283e <__floatsisf+0x5e>
    2834:	66 23       	and	r22, r22
    2836:	71 f0       	breq	.+28     	; 0x2854 <__floatsisf+0x74>
    2838:	96 e8       	ldi	r25, 0x86	; 134
    283a:	86 2f       	mov	r24, r22
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	2a f0       	brmi	.+10     	; 0x284c <__floatsisf+0x6c>
    2842:	9a 95       	dec	r25
    2844:	66 0f       	add	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	da f7       	brpl	.-10     	; 0x2842 <__floatsisf+0x62>
    284c:	88 0f       	add	r24, r24
    284e:	96 95       	lsr	r25
    2850:	87 95       	ror	r24
    2852:	97 f9       	bld	r25, 7
    2854:	08 95       	ret

00002856 <__fp_inf>:
    2856:	97 f9       	bld	r25, 7
    2858:	9f 67       	ori	r25, 0x7F	; 127
    285a:	80 e8       	ldi	r24, 0x80	; 128
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	08 95       	ret

00002862 <__fp_nan>:
    2862:	9f ef       	ldi	r25, 0xFF	; 255
    2864:	80 ec       	ldi	r24, 0xC0	; 192
    2866:	08 95       	ret

00002868 <__fp_pscA>:
    2868:	00 24       	eor	r0, r0
    286a:	0a 94       	dec	r0
    286c:	16 16       	cp	r1, r22
    286e:	17 06       	cpc	r1, r23
    2870:	18 06       	cpc	r1, r24
    2872:	09 06       	cpc	r0, r25
    2874:	08 95       	ret

00002876 <__fp_pscB>:
    2876:	00 24       	eor	r0, r0
    2878:	0a 94       	dec	r0
    287a:	12 16       	cp	r1, r18
    287c:	13 06       	cpc	r1, r19
    287e:	14 06       	cpc	r1, r20
    2880:	05 06       	cpc	r0, r21
    2882:	08 95       	ret

00002884 <__fp_round>:
    2884:	09 2e       	mov	r0, r25
    2886:	03 94       	inc	r0
    2888:	00 0c       	add	r0, r0
    288a:	11 f4       	brne	.+4      	; 0x2890 <__fp_round+0xc>
    288c:	88 23       	and	r24, r24
    288e:	52 f0       	brmi	.+20     	; 0x28a4 <__fp_round+0x20>
    2890:	bb 0f       	add	r27, r27
    2892:	40 f4       	brcc	.+16     	; 0x28a4 <__fp_round+0x20>
    2894:	bf 2b       	or	r27, r31
    2896:	11 f4       	brne	.+4      	; 0x289c <__fp_round+0x18>
    2898:	60 ff       	sbrs	r22, 0
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <__fp_round+0x20>
    289c:	6f 5f       	subi	r22, 0xFF	; 255
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	8f 4f       	sbci	r24, 0xFF	; 255
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	08 95       	ret

000028a6 <__fp_split3>:
    28a6:	57 fd       	sbrc	r21, 7
    28a8:	90 58       	subi	r25, 0x80	; 128
    28aa:	44 0f       	add	r20, r20
    28ac:	55 1f       	adc	r21, r21
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <__fp_splitA+0x10>
    28b0:	5f 3f       	cpi	r21, 0xFF	; 255
    28b2:	71 f0       	breq	.+28     	; 0x28d0 <__fp_splitA+0x1a>
    28b4:	47 95       	ror	r20

000028b6 <__fp_splitA>:
    28b6:	88 0f       	add	r24, r24
    28b8:	97 fb       	bst	r25, 7
    28ba:	99 1f       	adc	r25, r25
    28bc:	61 f0       	breq	.+24     	; 0x28d6 <__fp_splitA+0x20>
    28be:	9f 3f       	cpi	r25, 0xFF	; 255
    28c0:	79 f0       	breq	.+30     	; 0x28e0 <__fp_splitA+0x2a>
    28c2:	87 95       	ror	r24
    28c4:	08 95       	ret
    28c6:	12 16       	cp	r1, r18
    28c8:	13 06       	cpc	r1, r19
    28ca:	14 06       	cpc	r1, r20
    28cc:	55 1f       	adc	r21, r21
    28ce:	f2 cf       	rjmp	.-28     	; 0x28b4 <__fp_split3+0xe>
    28d0:	46 95       	lsr	r20
    28d2:	f1 df       	rcall	.-30     	; 0x28b6 <__fp_splitA>
    28d4:	08 c0       	rjmp	.+16     	; 0x28e6 <__fp_splitA+0x30>
    28d6:	16 16       	cp	r1, r22
    28d8:	17 06       	cpc	r1, r23
    28da:	18 06       	cpc	r1, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	f1 cf       	rjmp	.-30     	; 0x28c2 <__fp_splitA+0xc>
    28e0:	86 95       	lsr	r24
    28e2:	71 05       	cpc	r23, r1
    28e4:	61 05       	cpc	r22, r1
    28e6:	08 94       	sec
    28e8:	08 95       	ret

000028ea <__fp_zero>:
    28ea:	e8 94       	clt

000028ec <__fp_szero>:
    28ec:	bb 27       	eor	r27, r27
    28ee:	66 27       	eor	r22, r22
    28f0:	77 27       	eor	r23, r23
    28f2:	cb 01       	movw	r24, r22
    28f4:	97 f9       	bld	r25, 7
    28f6:	08 95       	ret

000028f8 <__mulsf3>:
    28f8:	0e 94 8f 14 	call	0x291e	; 0x291e <__mulsf3x>
    28fc:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__fp_round>
    2900:	0e 94 34 14 	call	0x2868	; 0x2868 <__fp_pscA>
    2904:	38 f0       	brcs	.+14     	; 0x2914 <__mulsf3+0x1c>
    2906:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fp_pscB>
    290a:	20 f0       	brcs	.+8      	; 0x2914 <__mulsf3+0x1c>
    290c:	95 23       	and	r25, r21
    290e:	11 f0       	breq	.+4      	; 0x2914 <__mulsf3+0x1c>
    2910:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__fp_inf>
    2914:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__fp_nan>
    2918:	11 24       	eor	r1, r1
    291a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__fp_szero>

0000291e <__mulsf3x>:
    291e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_split3>
    2922:	70 f3       	brcs	.-36     	; 0x2900 <__mulsf3+0x8>

00002924 <__mulsf3_pse>:
    2924:	95 9f       	mul	r25, r21
    2926:	c1 f3       	breq	.-16     	; 0x2918 <__mulsf3+0x20>
    2928:	95 0f       	add	r25, r21
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	55 1f       	adc	r21, r21
    292e:	62 9f       	mul	r22, r18
    2930:	f0 01       	movw	r30, r0
    2932:	72 9f       	mul	r23, r18
    2934:	bb 27       	eor	r27, r27
    2936:	f0 0d       	add	r31, r0
    2938:	b1 1d       	adc	r27, r1
    293a:	63 9f       	mul	r22, r19
    293c:	aa 27       	eor	r26, r26
    293e:	f0 0d       	add	r31, r0
    2940:	b1 1d       	adc	r27, r1
    2942:	aa 1f       	adc	r26, r26
    2944:	64 9f       	mul	r22, r20
    2946:	66 27       	eor	r22, r22
    2948:	b0 0d       	add	r27, r0
    294a:	a1 1d       	adc	r26, r1
    294c:	66 1f       	adc	r22, r22
    294e:	82 9f       	mul	r24, r18
    2950:	22 27       	eor	r18, r18
    2952:	b0 0d       	add	r27, r0
    2954:	a1 1d       	adc	r26, r1
    2956:	62 1f       	adc	r22, r18
    2958:	73 9f       	mul	r23, r19
    295a:	b0 0d       	add	r27, r0
    295c:	a1 1d       	adc	r26, r1
    295e:	62 1f       	adc	r22, r18
    2960:	83 9f       	mul	r24, r19
    2962:	a0 0d       	add	r26, r0
    2964:	61 1d       	adc	r22, r1
    2966:	22 1f       	adc	r18, r18
    2968:	74 9f       	mul	r23, r20
    296a:	33 27       	eor	r19, r19
    296c:	a0 0d       	add	r26, r0
    296e:	61 1d       	adc	r22, r1
    2970:	23 1f       	adc	r18, r19
    2972:	84 9f       	mul	r24, r20
    2974:	60 0d       	add	r22, r0
    2976:	21 1d       	adc	r18, r1
    2978:	82 2f       	mov	r24, r18
    297a:	76 2f       	mov	r23, r22
    297c:	6a 2f       	mov	r22, r26
    297e:	11 24       	eor	r1, r1
    2980:	9f 57       	subi	r25, 0x7F	; 127
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	9a f0       	brmi	.+38     	; 0x29ac <__mulsf3_pse+0x88>
    2986:	f1 f0       	breq	.+60     	; 0x29c4 <__mulsf3_pse+0xa0>
    2988:	88 23       	and	r24, r24
    298a:	4a f0       	brmi	.+18     	; 0x299e <__mulsf3_pse+0x7a>
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	bb 1f       	adc	r27, r27
    2992:	66 1f       	adc	r22, r22
    2994:	77 1f       	adc	r23, r23
    2996:	88 1f       	adc	r24, r24
    2998:	91 50       	subi	r25, 0x01	; 1
    299a:	50 40       	sbci	r21, 0x00	; 0
    299c:	a9 f7       	brne	.-22     	; 0x2988 <__mulsf3_pse+0x64>
    299e:	9e 3f       	cpi	r25, 0xFE	; 254
    29a0:	51 05       	cpc	r21, r1
    29a2:	80 f0       	brcs	.+32     	; 0x29c4 <__mulsf3_pse+0xa0>
    29a4:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__fp_inf>
    29a8:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__fp_szero>
    29ac:	5f 3f       	cpi	r21, 0xFF	; 255
    29ae:	e4 f3       	brlt	.-8      	; 0x29a8 <__mulsf3_pse+0x84>
    29b0:	98 3e       	cpi	r25, 0xE8	; 232
    29b2:	d4 f3       	brlt	.-12     	; 0x29a8 <__mulsf3_pse+0x84>
    29b4:	86 95       	lsr	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	b7 95       	ror	r27
    29bc:	f7 95       	ror	r31
    29be:	e7 95       	ror	r30
    29c0:	9f 5f       	subi	r25, 0xFF	; 255
    29c2:	c1 f7       	brne	.-16     	; 0x29b4 <__mulsf3_pse+0x90>
    29c4:	fe 2b       	or	r31, r30
    29c6:	88 0f       	add	r24, r24
    29c8:	91 1d       	adc	r25, r1
    29ca:	96 95       	lsr	r25
    29cc:	87 95       	ror	r24
    29ce:	97 f9       	bld	r25, 7
    29d0:	08 95       	ret

000029d2 <__tablejump2__>:
    29d2:	ee 0f       	add	r30, r30
    29d4:	ff 1f       	adc	r31, r31
    29d6:	05 90       	lpm	r0, Z+
    29d8:	f4 91       	lpm	r31, Z
    29da:	e0 2d       	mov	r30, r0
    29dc:	09 94       	ijmp

000029de <_exit>:
    29de:	f8 94       	cli

000029e0 <__stop_program>:
    29e0:	ff cf       	rjmp	.-2      	; 0x29e0 <__stop_program>
